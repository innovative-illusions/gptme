gptme documentation
===================

Welcome to the documentation for ``gptme``!

``gptme`` is a personal AI assistant and agent platform that runs in your terminal and browser, equipped with powerful tools to execute code, edit files, browse the web, and more - acting as an intelligent copilot for your computer. The core components include:

- **gptme CLI**: The main :doc:`command-line interface <cli>` for terminal-based interactions
- **gptme-server**: A :doc:`server component <server>` for running gptme as a service
- **gptme-webui**: A :doc:`web interface <server>` for browser-based interactions
- **gptme-agent-template**: A template for creating custom :doc:`AI agents <agents>`

The system can execute python and bash, edit local files, search and browse the web, and much more through its rich set of :doc:`built-in tools <tools>` and extensible :doc:`tool system <custom_tool>`. You can see what's possible in the :doc:`examples` and :doc:`demos`, from creating web apps and games to analyzing data and automating workflows.

**Getting Started:** To begin using gptme, follow the :doc:`getting-started` guide, set up your preferred :doc:`LLM provider <providers>`, and customize your :doc:`configuration <config>` as needed.

The system is designed to be easy to use and extend, and can be used as a library, standalone application, or web service. For detailed usage patterns and features, see the :doc:`usage` guide.

See the `README <https://github.com/gptme/gptme/blob/master/README.md>`_ file for more general information about the project.

.. note::
    This documentation site is still under construction.

.. toctree::
   :maxdepth: 2
   :caption: User Guide

   getting-started
   usage
   examples
   tools
   config
   providers
   agents
   server
   mcp
   cli

.. toctree::
   :maxdepth: 2
   :caption: Developer Guide

   contributing
   building
   prompts
   evals
   bot
   finetuning
   custom_tool
   hooks
   api

.. toctree::
   :maxdepth: 2
   :caption: About

   alternatives
   arewetiny
   timeline
   changelog

.. toctree::
   :caption: External
   :maxdepth: 2

   GitHub <https://github.com/gptme/gptme>
   Discord <https://discord.gg/NMaCmmkxWv>
   X <https://x.com/gptmeorg>



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
* `llms.txt <llms.txt>`_ and `llms-full.txt <llms-full.txt>`_


Getting Started
===============

This guide will help you get started with gptme.

Installation
------------

To install gptme, we recommend using ``pipx`` or ``uv``:

.. code-block:: bash

    pipx install gptme
    # or
    uv tool install gptme

If pipx is not installed, you can install it using pip:

.. code-block:: bash

    pip install --user pipx

If ``uv`` is not installed, you can install it using pip, pipx, or your system package manager.

.. note::

   Windows is not directly supported, but you can run gptme using WSL or Docker.

Usage
-----

To start your first chat, simply run:

.. code-block:: bash

    gptme

This will start an interactive chat session with the AI assistant.

If you haven't set a :doc:`LLM provider <providers>` API key in the environment or :doc:`configuration <config>`, you will be prompted for one which will be saved in the configuration file.

For detailed usage instructions, see :doc:`usage`.

You can also try the :doc:`examples`.

Quick Examples
--------------

Here are some compelling examples to get you started:

.. code-block:: bash

    # Create applications and games
    gptme 'write a web app to particles.html which shows off an impressive and colorful particle effect using three.js'
    gptme 'create a performant n-body simulation in rust'

    # Work with files and code
    gptme 'summarize this' README.md
    gptme 'refactor this' main.py
    gptme 'what do you see?' image.png  # vision

    # Development workflows
    git status -vv | gptme 'commit'
    make test | gptme 'fix the failing tests'
    gptme 'implement this' https://github.com/gptme/gptme/issues/286

    # Chain multiple tasks
    gptme 'make a change' - 'test it' - 'commit it'

    # Resume conversations
    gptme -r

Next Steps
----------

- Read the :doc:`usage` guide
- Try the :doc:`examples`
- Learn about available :doc:`tools`
- Explore different :doc:`providers`
- Set up the :doc:`server` for web access

Support
-------

For any issues, please visit our `issue tracker <https://github.com/gptme/gptme/issues>`_.


Usage
=====

This guide covers common usage patterns and examples for gptme.

To start a new chat or select an existing one, run:

.. code-block:: bash

    gptme

This will show you a list of past chats, allowing you to select one or start a new one.

To get inspiration for your first prompt, see the :doc:`examples`.

.. contents:: Table of Contents
   :depth: 5
   :local:
   :backlinks: none

Commands
--------

.. TODO: use autodoc from source, like cli reference

You can use these slash-commands for various actions within the chat:

- ``/undo`` - Undo the last action
- ``/log`` - Show the conversation log
- ``/tools`` - Show available tools
- ``/edit`` - Edit the conversation in your editor
- ``/rename`` - Rename the conversation
- ``/fork`` - Create a copy of the conversation
- ``/summarize`` - Summarize the conversation
- ``/replay`` - Re-execute codeblocks in the conversation
- ``/help`` - Show help message
- ``/exit`` - Exit the program

Interfaces
----------

Besides the CLI, gptme can be used through:

- :ref:`server:gptme-webui` - A web-based interface
- A `desktop app <https://github.com/gptme/gptme-tauri>`_ (WIP)
- :doc:`bot` - GitHub bot integration

For more detailed information about specific features, check out:

- :doc:`tools` - Available tools and their usage
- :doc:`providers` - Supported LLM providers
- :doc:`server` - Web UI and API server setup


Features
--------

Here is a very quick overview of the main features of gptme.

.. rubric:: Tools

gptme comes with a variety of tools for different tasks:

- :ref:`tools:shell` - Execute shell commands
- :ref:`tools:python` - Run Python code
- :ref:`tools:browser` - Browse and interact with web content
- :ref:`tools:vision` - Process and analyze images

See the :doc:`tools` page for a complete list of available tools.

Writing Files
^^^^^^^^^^^^^

You can ask the assistant to create new files or modify existing ones:

.. chat::

   User: implement game of life in life.py

   Assistant: Certainly! I'll create a new file named `life.py` implementing Conway's Game of Life. This implementation will use NumPy for efficient array operations and Matplotlib for visualization. Here's the code:
   ```save life.py
   import numpy as np
   import matplotlib.pyplot as plt
   from matplotlib.animation import FuncAnimation
   ...
   ```

   System: Saved to life.py

Making Changes
^^^^^^^^^^^^^^

You can start chats and request changes directly from the command line. The contents of any mentioned text files will be included as context, and the assistant will generate patches to apply the requested changes:

.. code-block:: bash

   gptme 'make improvements to life.py so dead cells fade out over time'

.. chat::

   User: make improvements to life.py so dead cells fade out over time
   ```life.py
   ...
   ```

   Assistant: To make alive cells green and dead cells black in the Game of Life simulation, we need to modify the colormap and how we represent the cell states. Here's the updated `life.py` script with these changes:
   ```patch life.py
   ...
   ```

   System: Patch applied

Browser Integration
^^^^^^^^^^^^^^^^^^^

With the :ref:`tools:browser` extras installed, the assistant can read URLs (included in the prompt or with its ``read_url`` tool) and "see" web pages by taking screenshots and viewing them.

Multiprompt syntax
^^^^^^^^^^^^^^^^^^

The ``-`` separator allows you to chain multiple prompts together, letting the assistant finish running tools for one prompt before moving on to the next:

.. code-block:: bash

    gptme 'create a project' - 'add tests' - 'commit changes'

This is particularly useful for breaking down complex tasks into steps and creating :doc:`automation` workflows.

Skip confirmation prompts
^^^^^^^^^^^^^^^^^^^^^^^^^

You can skip confirmation prompts using the ``--no-confirm`` flag. This is useful when you are confident the LLM will do what you want, so you don't want to have to confirm actions:

.. code-block:: bash

    gptme --no-confirm 'create a snake game using curses in snake.py, dont run it'

Non-interactive mode
^^^^^^^^^^^^^^^^^^^^

The ``--non-interactive`` flag runs gptme in a mode that terminates after completing all prompts. This is useful for scripting and automation:

.. code-block:: bash

    gptme --non-interactive 'create a snake game using curses in snake.py, dont run it' '-' 'make the snake green and the apple red'

Note: ``--non-interactive`` implies ``--no-confirm``, so you don't need to specify both.

.. _pre-commit:

Pre-commit Integration
^^^^^^^^^^^^^^^^^^^^^^

gptme integrates with `pre-commit <https://pre-commit.com/>`__ to catch code quality issues early. When enabled, it will automatically run pre-commit checks after file modifications, right before yielding control back to the user, to let the assistant address issues without human intervention.

- Enabled automatically if a ``.pre-commit-config.yaml`` exists in any parent directory
- Can be explicitly enabled/disabled with ``GPTME_CHECK=true/false``
- Runs after file modifications to catch issues early
- Shows output in conversation when issues are found
- Distinguishes between automatically fixed issues and those requiring manual fixes

Example workflow:

.. chat::

   User: create a new file named main.py with a simple function

   Assistant: Sure! I'll create a new file named `main.py` with a simple function that adds two numbers together. Here's the code:
   ```save main.py
   def my_function(x, y):
       return x + y
   ```

   System: Saved to main.py

   Assistant: I have created the file.

   System: Pre-commit checks failed
   ```stdout
   typecheck................................................................Failed
   - hook id: typecheck
   - exit code: 1
   main.py: error: Function is missing type hints
   ```

   Assistant: Typechecks failed, I'll update the function to use type hints.
   ```patch main.py
   <<<<<<< ORIGINAL
   def my_function(x, y):
   =======
   def my_function(x: int, y: int) -> int:
   >>>>>>> UPDATED
   ```

   System: Patch applied

   Assistant: Great, the typecheck should now pass.

-----

For further usage examples, see the :doc:`examples` page.


Examples
========

Here are some examples of how to use gptme and what its capabilities are.

To see example output without running the commands yourself, check out the :doc:`demos`.

.. code-block:: bash

    gptme 'write a web app to particles.html which shows off an impressive and colorful particle effect using three.js'
    gptme 'render mandelbrot set to mandelbrot.png'

    # files
    gptme 'summarize this' README.md
    gptme 'refactor this' main.py
    gptme 'what do you see?' image.png  # vision

    # stdin
    git status -vv | gptme 'fix TODOs'
    git status -vv | gptme 'commit'
    make test | gptme 'fix the failing tests'

    # if path not directly provided in prompt, it can read files using tools
    gptme 'explore'
    gptme 'take a screenshot and tell me what you see'
    gptme 'suggest improvements to my vimrc'

    # can read URLs (if browser tool is available)
    gptme 'implement this' https://github.com/gptme/gptme/issues/286

    # can use `gh` shell tool to read issues, PRs, etc.
    gptme 'implement gptme/gptme/issues/286'

    # create new projects
    gptme 'create a performant n-body simulation in rust'

    # chaining prompts
    gptme 'make a change' - 'test it' - 'commit it'
    gptme 'show me something cool in the python repl' - 'something cooler' - 'something even cooler'

    # resume the last conversation
    gptme -r

Do you have a cool example? Share it with us in the `Discussions <https://github.com/gptme/gptme/discussions>`_!

.. toctree::
   :maxdepth: 2
   :caption: More Examples

   demos
   automation
   projects


Demos
=====

.. note::

   This page is a work in progress, and will be updated with more demos soon.

.. contents:: Table of Contents
   :depth: 1
   :local:
   :backlinks: none


.. rubric:: Snake with curses

Generate a snake game that runs in the terminal using curses, and then modify it to add color.

.. asciinema:: 621992
   :autoplay: true
   :idle-time-limit: 1

Steps

#. Create a snake game with curses to snake.py
#. Running fails, ask gptme to fix a bug
#. Game runs
#. Ask gptme to add color
#. Minor struggles
#. Finished game with green snake and red apple pie!

.. rubric:: Mandelbrot with curses

Generate a program that renders mandelbrot with curses, and then modify it to add color.

.. asciinema:: 621991
   :autoplay: true
   :idle-time-limit: 1

Steps

#. Render mandelbrot with curses to mandelbrot_curses.py
#. Program runs
#. Add color


.. rubric:: Fibonacci

An old demo showing off basic code execution and shell interaction.

.. asciinema:: 606375
   :autoplay: true
   :idle-time-limit: 1

Steps

#. Create a new dir 'gptme-test-fib' and git init
#. Write a fib function to fib.py, commit
#. Create a public repo and push to GitHub


.. rubric:: Answer question from URL

Showing off basic URL loading from the prompt, and answering questions based on the content.

.. asciinema:: 621997
   :autoplay: true
   :idle-time-limit: 1

Steps

#. Ask who the CEO of Superuser Labs is, passing website URL
#. gptme browses the website, and answers correctly


.. rubric:: Edit history with /edit

The ``/edit`` command allows you to directly edit the conversation history in your text editor. This is useful for:

- Fixing typos or mistakes in previous prompts
- Removing unwanted messages
- Restructuring conversation flow
- Correcting errors before they cascade

**How it works:**

#. The conversation is converted to TOML format
#. Your default editor (``$EDITOR``) opens the TOML file
#. Edit the conversation as needed (add, remove, or modify messages)
#. Save and close the editor
#. gptme validates and applies your changes
#. If there are parsing errors, you'll get a chance to fix them

**Example use cases:**

**Fixing a typo in a prompt:**
   If you made a typo that confused the assistant, use ``/edit`` to correct it. The assistant will see the corrected version.

**Removing a mistake:**
   If the assistant misunderstood and went down the wrong path, use ``/edit`` to remove the problematic messages and restart from a good point.

**Restructuring conversation:**
   You can reorder messages, combine prompts, or split long conversations into cleaner structure.

**Tips:**

- The TOML format is human-readable and easy to edit
- Each message has a ``role`` (user/assistant/system) and ``content``
- Be careful with TOML syntax - gptme will validate before applying
- Use ``/undo`` instead if you just want to undo the last message
- Press ``Ctrl+C`` in the editor to cancel without making changes


Automation
==========

gptme can be used to create powerful yet simple automated workflows. Here we showcase small but powerful examples that demonstrate the capabilities of gptme in various workflows and automation scenarios.

We will be using shell scripts, cron jobs, and other tools to automate the workflows.


.. note::

   This is a work in progress. We intend to make gptme more powerful for automations, see `issue #143 <https://github.com/gptme/gptme/issues/143>`_ for more details on this plan.



.. rubric:: Example: Implement feature

This example demonstrates how to implement a feature in a codebase using gptme, making sure the code is correct before creating a pull request.

Given a GitHub issue it will check out a new branch, look up relevant files, make changes, typecheck/test them, and create a pull request if everything is correct.

.. code-block:: bash

   $ gptme 'read <url>' '-' 'create a branch' '-' 'look up relevant files' '-' 'make changes' '-' 'typecheck it' '-' 'test it' '-' 'create a pull request'
.. rubric:: Example: Automated Code Review

This example demonstrates a simple and composable approach to automated code review using gptme and shell scripting.

1. Create a script called `review_pr.sh`:

   .. code-block:: bash

      #!/bin/bash
      # Usage: ./review_pr.sh <repo> <pr_number>

      repo=$1
      pr_number=$2

      # Fetch PR diff
      diff=$(gh pr view $pr_number --repo $repo --json diffUrl -q .diffUrl | xargs curl -s)

      # Generate review using gptme
      review=$(gptme --non-interactive "Review this pull request diff and provide constructive feedback:
      1. Identify potential bugs or issues.
      2. Suggest improvements for code quality and readability.
      3. Check for adherence to best practices.
      4. Highlight any security concerns.

      Pull Request Diff:
      $diff

      Format your review as a markdown list with clear, concise points.")

      # Post review comment
      gh pr comment $pr_number --repo $repo --body "## Automated Code Review

      $review

      *This review was generated automatically by gptme.*"

2. Make the script executable:

   .. code-block:: bash

      chmod +x review_pr.sh

3. Set up a GitHub Actions workflow (`.github/workflows/code_review.yml`):

   .. code-block:: yaml

      name: Automated Code Review
      on:
        pull_request:
          types: [opened, synchronize]

      jobs:
        review:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v2
            - name: Install gptme and GitHub CLI
              run: |
                pip install gptme
                gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
            - name: Run code review
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                ./review_pr.sh ${{ github.repository }} ${{ github.event.pull_request.number }}

This setup provides automated code reviews for your pull requests using gptme. It demonstrates how powerful automation can be achieved with minimal code and high composability.

Key points:

- Uses shell scripting for simplicity and ease of understanding
- Leverages gptme's non-interactive mode for automation
- Utilizes GitHub CLI (`gh`) for seamless GitHub integration
- Integrates with GitHub Actions for automated workflow

Benefits of this approach:

- Easily customizable: Adjust the gptme prompt to focus on specific aspects of code review
- Composable: The shell script can be extended or combined with other tools
- Minimal dependencies: Relies on widely available tools (bash, curl, gh)
- Quick setup: Can be implemented in any GitHub repository with minimal configuration

To customize this for your specific needs:

1. Modify the gptme prompt in `review_pr.sh` to focus on your project's coding standards
2. Add additional checks or integrations to the shell script as needed
3. Adjust the GitHub Actions workflow to fit your CI/CD pipeline

This example serves as a starting point for integrating gptme into your development workflow, demonstrating its potential for automating code review tasks.

.. rubric:: Example: Daily Activity Summary

Here's an example of how to use gptme to generate a daily summary based on ActivityWatch data using a shell script:

.. code-block:: bash

   #!/bin/bash

   # Function to get yesterday's date in YYYY-MM-DD format
   get_yesterday() {
       date -d "yesterday" +%Y-%m-%d
   }

   # Function to get ActivityWatch report
   get_aw_report() {
       local date=$1
       aw-client report $(hostname) --start $date --stop $(date -d "$date + 1 day" +%Y-%m-%d)
   }

   # Generate daily summary
   generate_daily_summary() {
       local yesterday=$(get_yesterday)
       local aw_report=$(get_aw_report $yesterday)

       # Create a temporary file
       local summary_file=$(mktemp)

       # Generate summary using gptme
       gptme --non-interactive "Based on the following ActivityWatch report for $yesterday, provide a concise summary of yesterday's activities.
       Include insights on productivity, time spent on different categories, and any notable patterns.
       Suggest areas for improvement if applicable.

       ActivityWatch Report:
       $aw_report

       Please format the summary in a clear, easy-to-read structure.
       Save the summary to this file: $summary_file"

       # Return the path to the summary file
       echo "$summary_file"
   }

   # Run the summary generation and get the file path
   summary_file=$(generate_daily_summary)

   # Output the file path (you can use this in other scripts or log it)
   echo "Daily summary saved to: $summary_file"

To automate this process to run every day at 8 AM, you could set up a cron job. Here's an example cron entry:

.. code-block:: bash

   0 8 * * * /path/to/daily_summary_script.sh

This automation will provide you with daily insights into your computer usage and productivity patterns from the previous day, leveraging the power of gptme to analyze and summarize the data collected by ActivityWatch.



Projects
========

This page lists projects that are powered by or built using gptme.

Official Projects
-----------------

* `gptme <https://github.com/gptme/gptme>`_
    gptme itself, of course!

* `gptme-agent-template <https://github.com/gptme/gptme-agent-template>`_
    Template for creating new :doc:`agents` powered by gptme.

* `Bob <https://github.com/TimeToBuildBob>`_
    The first agent built using the gptme agent architecture.

* `gptme-rag <https://github.com/gptme/gptme-rag>`_
    RAG (Retrieval-Augmented Generation) implementation for gptme context management.

* `gptme-webui <https://github.com/gptme/gptme-webui>`_
    Fancy web-based user interface for gptme, built with the help of `Lovable <https://lovable.dev/>`_.

* `gptme.vim <https://github.com/gptme/gptme.vim>`_
    Vim plugin for gptme integration.

Community Projects
------------------

*Your project could be here! Add it by creating a PR.*

* `ErikBjare/nbody-sim <https://github.com/ErikBjare/nbody-sim>`_
    Simple but performant n-body simulation in Rust built with gptme using only a few prompts.


.. rubric:: Adding Your Project


If you've built something using gptme, we'd love to feature it here!

1. Add the "Built with gptme" or "Powered by gptme" badge to your README:

   .. code-block:: markdown

      [![built using gptme](https://img.shields.io/badge/built%20using-gptme%20%F0%9F%A4%96-5151f5?style=flat)](https://github.com/gptme/gptme)

    .. code-block:: markdown

      [![Powered by gptme](https://img.shields.io/badge/powered%20by-gptme%20%F0%9F%A4%96-5151f5?style=flat)](https://github.com/gptme/gptme)

2. Create a PR adding your project to this list:

   .. code-block:: rst

      * `Project Name <https://github.com/username/project>`_
          Brief description of your project.

.. rubric:: Built with gptme Badge

The "Built with gptme" badge helps showcase your project's use of gptme and connects it to the broader ecosystem.

Standard Badge (for projects built using gptme):

.. image:: https://img.shields.io/badge/built%20using-gptme%20%F0%9F%A4%96-5151f5?style=flat
   :target: https://github.com/gptme/gptme
   :alt: Built using gptme

"Powered by" Variant (for tools/services running on gptme):

.. image:: https://img.shields.io/badge/powered%20by-gptme%20%F0%9F%A4%96-5151f5?style=flat
   :target: https://github.com/gptme/gptme
   :alt: Powered by gptme

Use the standard badge for projects created with gptme's assistance, and the "powered by" variant for tools or services that run on gptme.


Tools
=====

gptme's tools enable AI agents to execute code, edit files, browse the web, process images, and interact with your computer.

Overview
--------

📁 File System
^^^^^^^^^^^^^^

- `Read`_ - Read files in any format
- `Save`_ - Create and overwrite files
- `Patch`_ - Apply precise changes to existing files

💻 Code & Development
^^^^^^^^^^^^^^^^^^^^^

- `Python`_ - Execute Python code interactively with full library access
- `Shell`_ - Run shell commands and manage system processes

🌐 Web & Research
^^^^^^^^^^^^^^^^^

- `Browser`_ - Browse websites, take screenshots, and read web content
- `RAG`_ - Index and search through documentation and codebases
- `Chats`_ - Search past conversations for context and references

👁️ Visual & Interactive
^^^^^^^^^^^^^^^^^^^^^^^

- `Vision`_ - Analyze images, diagrams, and visual content
- `Screenshot`_ - Capture your screen for visual context
- `Computer`_ - Control desktop applications through visual interface

⚡ Advanced Workflows
^^^^^^^^^^^^^^^^^^^^^

- `Tmux`_ - Manage long-running processes in terminal sessions
- `Subagent`_ - Delegate subtasks to specialized agent instances
- `TTS`_ - Convert responses to speech for hands-free interaction

Combinations
^^^^^^^^^^^^

The real power emerges when tools work together:

- **Web Research + Code**: `Browser`_ + `Python`_ - Browse documentation and implement solutions
- **Visual Development**: `Vision`_ + `Patch`_ - Analyze UI mockups and update code accordingly
- **System Automation**: `Shell`_ + `Python`_ - Combine system commands with data processing
- **Interactive Debugging**: `Screenshot`_ + `Computer`_ - Visual debugging and interface automation
- **Knowledge-Driven Development**: `RAG`_ + `Chats`_ - Learn from documentation and past conversations

Shell
-----

.. automodule:: gptme.tools.shell
    :members:
    :noindex:

Python
------

.. automodule:: gptme.tools.python
    :members:
    :noindex:

Tmux
----

.. automodule:: gptme.tools.tmux
    :members:
    :noindex:

Subagent
--------

.. automodule:: gptme.tools.subagent
    :members:
    :noindex:

Read
----

.. automodule:: gptme.tools.read
    :members:
    :noindex:

Save
----

.. automodule:: gptme.tools.save
    :members:
    :noindex:

Patch
-----

.. automodule:: gptme.tools.patch
    :members:
    :noindex:

Vision
------

.. automodule:: gptme.tools.vision
    :members:
    :noindex:

Screenshot
----------

.. automodule:: gptme.tools.screenshot
    :members:
    :noindex:

Browser
-------

.. automodule:: gptme.tools.browser
    :members:
    :noindex:

Chats
-----

.. automodule:: gptme.tools.chats
    :members:
    :noindex:

Computer
--------
.. warning::

   The computer use interface is experimental and has serious security implications.
   Please use with caution and see Anthropic's documentation on `computer use <https://docs.anthropic.com/en/docs/build-with-claude/computer-use>`_ for additional guidance.


.. automodule:: gptme.tools.computer
    :members:
    :noindex:

.. _rag:

RAG
---

.. automodule:: gptme.tools.rag
    :members:
    :noindex:

TTS
---

.. automodule:: gptme.tools.tts
    :members:
    :noindex:

MCP
---

The Model Context Protocol (MCP) allows you to extend gptme with custom tools through external servers.
See :doc:`mcp` for configuration and usage details.


Configuration
=============

gptme has three configuration files:

- :ref:`global configuration <global-config>`
- :ref:`project configuration <project-config>`
- :ref:`chat configuration <chat-config>`

It also supports :ref:`environment-variables` for configuration, which take precedence over the configuration files.

The CLI also supports a variety of options that can be used to override both configuration values.

.. _global-config:

Global config
-------------

The file is located at ``~/.config/gptme/config.toml``.

Here is an example:

.. code-block:: toml

    [prompt]
    about_user = "I am a curious human programmer."
    response_preference = "Don't explain basic concepts"

    [env]
    # Uncomment to use Claude 3.5 Sonnet by default
    #MODEL = "anthropic/claude-3-5-sonnet-20240620"

    # One of these need to be set
    # If none of them are, they will be prompted for on first start
    OPENAI_API_KEY = ""
    ANTHROPIC_API_KEY = ""
    OPENROUTER_API_KEY = ""
    XAI_API_KEY = ""
    GEMINI_API_KEY = ""
    GROQ_API_KEY = ""
    DEEPSEEK_API_KEY = ""

    # Uncomment to use with Ollama
    #MODEL = "local/<model-name>"
    #OPENAI_BASE_URL = "http://localhost:11434/v1"

    # Uncomment to change tool configuration
    #TOOL_FORMAT = "markdown" # Select the tool formal. One of `markdown`, `xml`, `tool`
    #TOOL_ALLOWLIST = "save,append,patch,ipython,shell,browser"  # Comma separated list of allowed tools
    #TOOL_MODULES = "gptme.tools,custom.tools" # List of python comma separated python module path

The ``prompt`` section contains options for the prompt.

The ``env`` section contains environment variables that gptme will fall back to if they are not set in the shell environment. This is useful for setting the default model and API keys for :doc:`providers`. It can also be used to set default tool configuration options, see :doc:`custom_tool` for more information.

If you want to configure MCP servers, you can do so in a ``mcp`` section. See :ref:`mcp` for more information.

See :class:`gptme.config.UserConfig` for the API reference.

.. _project-config:

Project config
--------------

The project configuration file is intended to let the user configure how gptme works within a particular project/workspace.

.. note::

    The project configuration file is a very early feature and is likely to change/break in the future.

gptme will look for a ``gptme.toml`` file in the workspace root (this is the working directory if not overridden by the ``--workspace`` option). This file contains project-specific configuration options.

Example ``gptme.toml``:

.. code-block:: toml

    files = ["README.md", "Makefile"]
    prompt = "This is gptme."

This file currently supports a few options:

- ``files``, a list of paths that gptme will always include in the context. If no ``gptme.toml`` is present or if the ``files`` option is unset, gptme will automatically look for common project files, such as: ``README.md``, ``pyproject.toml``, ``package.json``, ``Cargo.toml``, ``Makefile``, ``.cursor/rules/**.mdc``, ``CLAUDE.md``, ``GEMINI.md``.
- ``prompt``, a string that will be included in the system prompt with a ``# Current Project`` header.
- ``base_prompt``, a string that will be used as the base prompt for the project. This will override the global base prompt ("You are gptme v{__version__}, a general-purpose AI assistant powered by LLMs. [...]"). It can be useful to change the identity of the assistant and override some default behaviors.
- ``context_cmd``, a command used to generate context to include when constructing the system prompt. The command will be run in the workspace root and should output a string that will be included in the system prompt. Examples can be ``git status -v`` or ``scripts/context.sh``.
- ``rag``, a dictionary to configure the RAG tool. See :ref:`rag` for more information.

See :class:`gptme.config.ProjectConfig` for the API reference.


.. _chat-config:

Chat config
-----------

The chat configuration file stores configuration options for a particular chat.
It is used to store the model, toolset, tool format, and streaming/interactive mode.

The chat configuration file is stored as ``config.toml`` in the chat log directory (i.e. ``~/.local/share/gptme/logs/2025-04-23-dancing-happy-walrus/config.toml``). It is automatically generated when a new chat is started and loaded when the chat is resumed, applying any overloaded options passed through the CLI.

See :class:`gptme.config.ChatConfig` for the API reference.

.. _environment-variables:

Environment Variables
---------------------

Besides the configuration files, gptme supports several environment variables to control its behavior:

.. rubric:: Feature Flags

- ``GPTME_CHECK`` - Enable ``pre-commit`` checks (default: true if ``.pre-commit-config.yaml`` present, see :ref:`pre-commit`)
- ``GPTME_CHAT_HISTORY`` - Enable cross-conversation context (default: false)
- ``GPTME_COSTS`` - Enable cost reporting for API calls (default: false)
- ``GPTME_FRESH`` - Enable fresh context mode (default: false)
- ``GPTME_BREAK_ON_TOOLUSE`` - Interrupt generation when tool use occurs in stream (default: true)
- ``GPTME_PATCH_RECOVERY`` - Return file content in error for non-matching patches (default: false)
- ``GPTME_SUGGEST_LLM`` - Enable LLM-powered prompt completion (default: false)

.. rubric:: API Configuration

- ``LLM_API_TIMEOUT`` - Set the timeout in seconds for LLM API requests (default: 600). Must be a valid numeric string (e.g., "600", "1800"). Useful for local LLMs that may take longer to respond.

.. rubric:: Tool Configuration

- ``GPTME_TTS_VOICE`` - Set the voice to use for TTS
- ``GPTME_VOICE_FINISH`` - Wait for TTS speech to finish before exiting (default: false)

.. rubric:: Paths

- ``GPTME_LOGS_HOME`` - Override the default logs folder location

All boolean flags accept "1", "true" (case-insensitive) as truthy values.

Cross-Conversation Context
~~~~~~~~~~~~~~~~~~~~~~~~~~

When ``GPTME_CHAT_HISTORY=true`` is set, gptme will automatically include summaries from recent conversations in new chat sessions, providing continuity across conversations.

**What it includes:**

- Summaries of the 3 most recent substantial conversations (4+ messages)
- Initial user requests and follow-ups from each conversation
- Last meaningful assistant response from each conversation
- Filters out test conversations and very short interactions

**Benefits:**

- Better continuity for ongoing projects and work
- Understanding of user preferences and communication style
- Context for follow-up questions without manual references
- Awareness of previous technical discussions and solutions

The context is automatically included as a system message when starting new conversations, enabling much better continuity without needing to manually reference previous conversations or maintain persistent notes.


Providers
=========

We support LLMs from several providers, including OpenAI, Anthropic, OpenRouter, Deepseek, Azure, and any OpenAI-compatible server (e.g. ``ollama``, ``llama-cpp-python``).

You can find our model recommendations on the :doc:`evals` page.

To select a provider and model, run ``gptme`` with the ``-m``/``--model`` flag set to ``<provider>/<model>``, for example:

.. code-block:: sh

    gptme "hello" -m openai/gpt-5
    gptme "hello" -m anthropic  # will use provider default
    gptme "hello" -m openrouter/x-ai/grok-4
    gptme "hello" -m deepseek/deepseek-reasoner
    gptme "hello" -m gemini/gemini-2.5-flash
    gptme "hello" -m groq/llama-3.3-70b-versatile
    gptme "hello" -m xai/grok-beta
    gptme "hello" -m local/llama3.2:1b

You can list the models known to gptme using ``gptme '/models' - '/exit'``

On first startup API key will be prompted for if no model and no API keys are set in the config/environment. The key will be saved in the configuration file, the provider will be inferred, and its default model used.

Use the ``[env]`` section in the :ref:`global-config` file to store API keys using the same format as the environment variables:

- ``OPENAI_API_KEY="your-api-key"``
- ``ANTHROPIC_API_KEY="your-api-key"``
- ``OPENROUTER_API_KEY="your-api-key"``
- ``GEMINI_API_KEY="your-api-key"``
- ``XAI_API_KEY="your-api-key"``
- ``GROQ_API_KEY="your-api-key"``
- ``DEEPSEEK_API_KEY="your-api-key"``

.. rubric:: Local

You can use local LLM models using any OpenAI API-compatible server.

To achieve that with ``ollama``, install it then run:

.. code-block:: sh

    ollama pull llama3.2:1b
    ollama serve
    OPENAI_BASE_URL="http://127.0.0.1:11434/v1" gptme 'hello' -m local/llama3.2:1b

.. note::

    Small models won't work well with tools, severely limiting the usefulness of gptme. You can find an overview of how different models perform on the :doc:`evals` page.


Agents
======

gptme supports highly customizable "agents": persistent AI assistants with structured memory, identity, and workspace management capabilities.

Each agent is implemented as a git repository that serves as their "brain," containing all their data, configuration, and interaction history.

Overview
--------

✨ Superpowers
^^^^^^^^^^^^^^

.. mermaid::

   graph LR
       Persistent[🔒 Persistent<br/>Complete history<br/>Version controlled]
       Autonomous[🎯 Autonomous<br/>Long-term goals<br/>Proactive & self-directed]
       Evolving[🌱 Self-Improving<br/>Gets smarter over time<br/>Learns from experience]

       %% Force left-to-right layout
       Persistent --- Autonomous --- Evolving

       classDef benefits fill:#fff8e1,stroke:#f57f17,stroke-width:3px,color:#000
       class Persistent,Autonomous,Evolving benefits

🧠 Agent Brain
^^^^^^^^^^^^^^

.. mermaid::

   graph TD
       subgraph Core[💎 Core Identity]
           Identity[Who am I?<br/>My goals & capabilities]
       end

       subgraph LivingMemory[🔄 Living Memory Systems]
           Journal[📔 Journal<br/>Every decision & insight<br/>Continuous learning]
           Tasks[🎯 Tasks<br/>Goals & achievements<br/>Progress tracking]
           Knowledge[📚 Knowledge<br/>Learned lessons<br/>Cross-referenced insights]
           People[👥 Relationships<br/>Collaboration history<br/>Social intelligence]
           Projects[🚀 Projects<br/>Active work & outcomes<br/>Success patterns]
       end

       subgraph Intelligence[🤖 Dynamic Intelligence]
           direction LR
           Context[⚡ Live Context<br/>Situational awareness<br/>Current state]
           Learning[📈 Continuous Learning<br/>Self-improvement<br/>Pattern recognition]
       end

       %% Internal intelligence flow
       Core --> LivingMemory
       LivingMemory --> Intelligence
       Context --- Learning

       %% Memory interconnections (selective)
       Journal -.->|Informs| Tasks
       Knowledge -.->|Supports| Projects
       People -.->|Collaborate on| Projects

       classDef core fill:#fff3e0,stroke:#ef6c00,stroke-width:3px,color:#000
       classDef memory fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,color:#000
       classDef intelligence fill:#fce4ec,stroke:#c2185b,stroke-width:3px,color:#000

       class Core,Identity core
       class LivingMemory,Journal,Tasks,Knowledge,People,Projects memory
       class Intelligence,Context,Learning intelligence

🌍 External World
^^^^^^^^^^^^^^^^^

.. mermaid::

   graph LR
       subgraph World
           User[👤 User]
           Web[🌐 Web & APIs]
           Files[📁 Files & Code]
           Social[✉️ Email & Discord]
       end

       classDef world fill:#e3f2fd,stroke:#1565c0,stroke-width:2px,color:#000

       class World,User,Web,Files,Social world

Architecture
------------

**Git-based Repository Structure:** Each agent is a complete git repository with a structured workspace.

- **Core files** - ``README.md``, ``ABOUT.md``, ``ARCHITECTURE.md``, ``gptme.toml``
- ``journal/`` - Daily activity logs (YYYY-MM-DD.md format)
- ``tasks/`` - Individual task files with YAML metadata
- ``knowledge/`` - Long-term documentation and insights
- ``lessons/`` - Learned lessons and best practices
- ``people/`` - Contact profiles and relationship management
- ``projects/`` - Project-specific information

**Dynamic Context Generation:** Agents use sophisticated context generation to maintain awareness.

- :doc:`Project configuration <config>` (``gptme.toml``) specifies core ``files`` always in context
- A ``context_cmd`` command specified in ``gptme.toml`` is used for dynamic context generation
- Each interaction includes recent journal entries, active tasks, and git status
- Provides comprehensive situational awareness across sessions

Key Systems
-----------

**Journal System:**

- One file per day in append-only format
- Contains task progress, decisions, reflections, and plans
- Most recent entries automatically included in context
- Maintains historical record of all activities and thoughts

**Task Management:**

- Individual Markdown files with YAML frontmatter metadata
- States: new, active, paused, done, cancelled
- Priority levels, tags, and dependencies
- CLI tools for management and status tracking
- Integrated with journal entries for progress updates

**Knowledge Base:**

- Long-term information storage organized by topic
- Technical documentation, best practices, and insights
- Cross-referenced with tasks and journal entries

**Lessons System:**

- Used to document learned lessons and best practices
- Learned lessons are to be retrieved when the context arises
- Helps avoid repeating mistakes and improves decision-making

**People Directory:**

- Individual profiles for contacts and collaborators
- Includes interests, skills, project history, and interaction notes
- Privacy-conscious with appropriate detail levels

Usage
-----

.. note::

    We are working on a graphical way to create and interact with agents using the :ref:`gptme web interface <server:gptme-webui>`. Try it out and let us know what you think! Soon coming as a managed service.

**Installing dependencies:**

First install the required dependencies using `pipx <https://pipx.pypa.io/>`_ (recommended) to ensure isolation and easy management:

.. code-block:: bash

    # Install required dependencies
    pipx install gptme   # or `pipx install -e ./gptme` to install from local source
    pipx install uv
    pipx install pre-commit

**Creating an Agent:**

Use the `gptme-agent-template <https://github.com/gptme/gptme-agent-template/>`_ to create new agents:

.. code-block:: bash

    # Clone the template repository
    git clone https://github.com/gptme/gptme-agent-template
    cd gptme-agent-template

    # Fork the template
    ./fork.sh ../my-agent "MyAgent"
    cd ../my-agent

    # (optional) set up pre-commit hooks
    make install

**Running an Agent:**

.. code-block:: bash

    # Run the agent
    gptme "your prompt here"

**Execution Flow:**

1. ``gptme`` builds context from all systems

   - Includes journal entries, tasks, knowledge, and people
   - Static context is included using the ``files`` in ``gptme.toml``
   - Dynamic context is generated using the ``context_cmd`` in ``gptme.toml``

2. ``gptme`` runs the agent

   - With prompt, tools, and collected context

3. Agent processes the prompt

   - Uses the context to inform decisions and responses
   - Updates journal, tasks, and knowledge as needed

Benefits
--------

**Version Control:**

- All agent data and interactions are version-controlled
- Complete history of agent development and interactions
- Easy backup, sharing, and collaboration

**Persistence:**

- Agents maintain state across sessions
- Remember previous conversations, decisions, and progress
- Build knowledge and relationships over time

**Structured Memory:**

- Organized information storage prevents knowledge loss
- Easy retrieval of past decisions and context
- Cross-referencing between different information types

**Extensibility:**

- Template provides consistent foundation
- Customizable identity, goals, and capabilities
- Integration with external tools and services

**Goal-Oriented Behavior:**

- Clear goals transform agents from reactive tools into proactive collaborators
- Well-defined purpose enables agents to take initiative, suggest improvements, and identify opportunities
- Strategic direction helps agents prioritize decisions and maintain long-term perspective
- Goals provide the contextual framework that "pulls agents forward" toward meaningful outcomes

Examples
--------

**Bob:**
Bob, aka `@TimeToBuildBob <https://github.com/TimeToBuildBob>`_, is an experimental agent that helps with gptme development. He demonstrates practical agent capabilities including:

- Project management and task tracking
- Code review and development assistance
- Documentation and knowledge management (he has a `website <https://timetobuildbob.github.io/>`_)
- Community interaction and support (he reads and responds on the Discord server)

Bob tries to be more than just a AI assistant, he tries to expand his own impact and seek autonomy to safely scale his efforts and improve the agent harness.

**Creating Specialized Agents:**
The template system enables creating agents for specific domains:

- Development assistants with project-specific knowledge
- Research assistants with domain expertise
- Personal productivity assistants with custom workflows
- Team collaboration agents with shared knowledge bases

External Integrations
---------------------

Agents can be extended with various external integrations and tools for enhanced capabilities:

**Content & Information:**

- **Web Browsing:** Access and analyze web content using built-in browser tools
- **Search Integration:** Query search engines and process results
- **RSS Reader:** Consume and process RSS feeds in LLM-friendly formats

**Communication & Sharing:**

- **Email Integration:** Send and receive emails for external communication
- **Social Media:**

  - Twitter integration for sharing updates and public communication
  - Discord integration for community interaction

- **GitHub Integration:** Create and share gists, manage repositories
- **Website Publishing:** Share information and updates publicly

**Collaboration Tools:**

- **Git Integration:** Version control with co-authoring capabilities
- **Issue Tracking:** Integration with GitHub issues and project management
- **Documentation:** Automated documentation generation and updates

**Development & Operations:**

- **CI/CD Integration:** Automated testing and deployment workflows
- **Monitoring:** System and application monitoring capabilities
- **Database Access:** Query and update databases as needed

These integrations transform agents from isolated assistants into connected participants in digital workflows, enabling them to:

- Stay informed about relevant developments through content feeds
- Communicate with external parties and communities
- Share their work and insights publicly
- Collaborate on projects with proper attribution
- Maintain awareness of project status and issues

**Note:** Many integrations are work-in-progress (WIP) and under active development.

Why personify agents?
---------------------

While personifying agents might seem unnecessary for professional use, it provides several benefits:

- **Mental Model:** Helps users understand the agent's role and capabilities
- **Consistency:** Encourages consistent interaction patterns and expectations
- **Memory:** Makes it easier to remember what you've told the agent
- **Engagement:** Creates more natural and memorable interactions
- **Identity:** Distinguishes between different specialized agents

Links
-----

For more details, see the following resources:

- `gptme-agent-template <https://github.com/gptme/gptme-agent-template/>`_ - Template for creating new agents
- `gptme-contrib <https://github.com/gptme/gptme-contrib>`_ - Community-contributed tools and scripts for agents


Server
======

gptme provides multiple web-based interfaces for browser-based interactions, from lightweight options to sophisticated desktop-integrated experiences.

Installation
------------

To use gptme's server capabilities, install with server extras:

.. code-block:: bash

    pipx install 'gptme[server]'

Start the server:

.. code-block:: bash

    gptme-server


For more CLI options, see the :ref:`CLI reference <cli:gptme-server>`.

.. _server:gptme-webui:

gptme-webui: Modern Web Interface
---------------------------------

The primary web interface is `gptme-webui <https://github.com/gptme/gptme-webui>`_: a modern, feature-rich application that provides a complete gptme experience in your browser.

**Try it now:**

- `chat.gptme.org <https://chat.gptme.org>`_ (latest version of gptme-webui, bring your own gptme-server)
- `gptme.ai <https://gptme.ai>`_ (upcoming hosted gptme service)

**Key Features:**

- Modern interface
- Streaming responses
- Mobile-friendly responsive design
- Dark mode support
- Conversation export and offline capabilities
- Integrated computer use interface
- Create your own persistent `agents`

**Local Installation:**
For self-hosting and local development, see the `gptme-webui README <https://github.com/gptme/gptme-webui>`_.

To use the server with a locally hosted gptme-webui, configure the CORS origin when starting the server:

.. code-block:: bash

    gptme-server --cors-origin 'http://localhost:5701'

Basic Web UI
------------

A lightweight chat interface with minimal dependencies is bundled with the gptme server for simple deployments.

Access at http://localhost:5700 after starting ``gptme-server``.

This interface provides basic chat functionality and is useful for:

- Quick testing and development
- Minimal server deployments
- Environments with limited resources

Computer Use Interface
----------------------

The computer use interface provides an innovative split-view experience with chat on the left and a live desktop environment on the right, enabling AI agents to interact directly with desktop applications.
.. warning::

   The computer use interface is experimental and has serious security implications.
   Please use with caution and see Anthropic's documentation on `computer use <https://docs.anthropic.com/en/docs/build-with-claude/computer-use>`_ for additional guidance.


**Docker Setup** (Recommended):

.. code-block:: bash

   # Clone the repository
   git clone https://github.com/gptme/gptme.git
   cd gptme

   # Build and run the computer use container
   make build-docker-computer
   docker run -v ~/.config/gptme:/home/computeruse/.config/gptme -p 6080:6080 -p 8080:8080 gptme-computer:latest

**Access Points:**

- **Combined interface:** http://localhost:8080/computer
- **Chat only:** http://localhost:8080
- **Desktop only:** http://localhost:6080/vnc.html

**Features:**

- Split-view interface with real-time desktop interaction
- Toggle between view-only and interactive desktop modes
- Automatic screen scaling optimized for LLM vision models
- Secure containerized environment

**Requirements:**

- Docker with X11 support
- Available ports: 6080 (VNC) and 8080 (web interface)

Local Computer Use (Advanced)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can enable the ``computer`` tool locally on Linux systems, though this is not recommended for security reasons.

**Requirements:**

- X11 server
- ``xdotool`` package installed

**Usage:**

.. code-block:: bash

   # Enable computer tool (disabled by default for security)
   gptme -t computer

Set an appropriate screen resolution for your vision model before use.

REST API
--------

gptme-server provides a REST API for programmatic access to gptme functionality. This enables integration with custom applications and automation workflows.

The API endpoints support the core gptme operations including chat interactions, tool execution, and conversation management.

.. note::
   API documentation is available when running the server. Visit the server endpoint ``/api/docs/`` for interactive API documentation based on the OpenAPI spec (served at ``/api/docs/openapi.json``).


.. _mcp:

MCP
===

gptme acts as a MCP client supporting MCP servers (`Model Context Protocol <https://modelcontextprotocol.io/>`_), allowing integration with external tools and services through a standardized protocol.

We also intend to expose tools in gptme as MCP servers, allowing you to use gptme tools in other MCP clients.

Configuration
-------------

You can configure MCP in your :ref:`global-config` (``~/.config/gptme/config.toml``) file:

.. code-block:: toml

    [mcp]
    enabled = true
    auto_start = true

    [[mcp.servers]]
    name = "my-server"
    enabled = true
    command = "server-command"
    args = ["--arg1", "--arg2"]
    env = { API_KEY = "your-key" }

    # HTTP MCP Server example
    [[mcp.servers]]
    name = "http-server"
    enabled = true
    url = "https://example.com/mcp"
    headers = { Authorization = "Bearer your-token" }

We also intend to support specifying it in the :ref:`project-config`, and the ability to set it per-conversation.

Management Tool
---------------

gptme includes a powerful MCP management tool that allows you to discover and dynamically load MCP servers during a conversation.

Commands
~~~~~~~~

The ``mcp`` tool provides the following slash-commands:

- ``/search [query]``: Search for MCP servers across registries
- ``/info <server-name>``: Get detailed information about a specific server
- ``/load <server-name>``: Dynamically load an MCP server into the current session
- ``/unload <server-name>``: Unload a previously loaded MCP server
- ``/list``: List all currently configured and loaded MCP servers

Once loaded, the server's tools will be available as ``<server-name>.<tool-name>`` in the conversation.

Configuration Options
~~~~~~~~~~~~~~~~~~~~~

- ``enabled``: Enable/disable MCP support globally
- ``auto_start``: Automatically start MCP servers when needed
- ``servers``: List of MCP server configurations

  - ``name``: Unique identifier for the server
  - ``enabled``: Enable/disable individual server
  - ``command``: Command to start the server (for stdio servers)
  - ``args``: List of command-line arguments (for stdio servers)
  - ``url``: HTTP endpoint URL (for HTTP servers)
  - ``headers``: HTTP headers dictionary (for HTTP servers)
  - ``env``: Environment variables for the server

MCP Server Examples
-------------------

SQLite Server
~~~~~~~~~~~~~

The SQLite server provides database interaction and business intelligence capabilities through SQLite. It enables running SQL queries, analyzing business data, and automatically generating business insight memos:

.. code-block:: toml

    [[mcp.servers]]
    name = "sqlite"
    enabled = true
    command = "uvx"
    args = [
        "mcp-server-sqlite",
        "--db-path",
        "/path/to/sqlitemcp-store.sqlite"
    ]

The server provides these core tools:

Query Tools:

- ``read_query``: Execute SELECT queries to read data
- ``write_query``: Execute INSERT, UPDATE, or DELETE queries
- ``create_table``: Create new tables in the database

Schema Tools:

- ``list_tables``: Get a list of all tables
- ``describe_table``: View schema information for a specific table

Analysis Tools:

- ``append_insight``: Add business insights to the memo resource

Resources:

- ``memo://insights``: A continuously updated business insights memo

The server also includes a demonstration prompt ``mcp-demo`` that guides users through database operations and analysis.

Running MCP Servers
-------------------

Each server provides its own set of tools that become available to the assistant.

MCP servers can be run in several ways:

- Using package managers like ``npx``, ``uvx``, or ``pipx`` for convenient installation and execution
- Running from source or pre-built binaries
- Using Docker containers

.. warning::
    Be cautious when using MCP servers from unknown sources, as they run with the same privileges as your user.

You can find a list of available MCP servers in the `example servers <https://modelcontextprotocol.io/examples>`_ and MCP directories like `MCP.so <https://mcp.so/>`_.

Managing MCP Servers
--------------------

gptme provides CLI commands to manage and test your MCP servers:

.. code-block:: bash

    # List all configured MCP servers and check their health
    gptme-util mcp list

    # Test connection to a specific server
    gptme-util mcp test server-name

    # Show detailed information about a server
    gptme-util mcp info server-name

These commands help you verify that your MCP servers are properly configured and accessible.


CLI Reference
=============

gptme provides the following commands:

.. contents:: Commands
   :depth: 1
   :local:
   :backlinks: none

This is the full CLI reference. For a more concise version, run ``gptme --help``.

.. click:: gptme.cli:main
   :prog: gptme
   :nested: full

.. click:: gptme.server:main
   :prog: gptme-server
   :nested: full

.. click:: gptme.eval:main
   :prog: gptme-eval
   :nested: full

.. click:: gptme.util.cli:main
   :prog: gptme-util
   :nested: full


Contributing
============

We welcome contributions to the project. Here is some information to get you started.

.. note::
    This document is a work in progress. PRs are welcome.

Install
-------

.. code-block:: bash

   # checkout the code and navigate to the root of the project
   git clone https://github.com/gptme/gptme.git
   cd gptme

   # install poetry (if not installed)
   pipx install poetry

   # activate the virtualenv
   poetry shell

   # build the project
   make build

You can now start ``gptme`` from your development environment using the regular commands.

You can also install it in editable mode with ``pipx`` using ``pipx install -e .`` which will let you use your development version of gptme regardless of venv.

Tests
-----

Run tests with ``make test``.

Some tests make LLM calls, which might take a while and so are not run by default. You can run them with ``make test SLOW=true``.

There are also some integration tests in ``./tests/test-integration.sh`` which are used to manually test more complex tasks.

There is also the :doc:`evals`.

Telemetry
---------

gptme includes optional OpenTelemetry integration for performance monitoring and debugging. This is useful for development to understand performance characteristics and identify bottlenecks.

Setup
~~~~~

To enable telemetry during development:

1. Install telemetry dependencies:

   .. code-block:: bash

      poetry install -E telemetry

2. Run Jaeger for trace visualization:

   .. code-block:: bash

      docker run --rm --name jaeger \
                -p 16686:16686 \
                -p 4317:4317 \
                -p 4318:4318 \
                -p 5778:5778 \
                -p 9411:9411 \
                cr.jaegertracing.io/jaegertracing/jaeger:latest

3. Run Prometheus for metrics collection:

   .. code-block:: bash

      docker run --rm --name prometheus \
                -p 9090:9090 \
                -v $(pwd)/scripts/prometheus.yml:/prometheus/prometheus.yml \
                prom/prometheus --web.enable-otlp-receiver

4. Set the telemetry environment variables:

   .. code-block:: bash

      export GPTME_TELEMETRY_ENABLED=true
      export OTLP_ENDPOINT=http://localhost:4318  # HTTP OTLP (port 4318)
      export GPTME_OTLP_METRICS=true  # Send metrics via OTLP

5. Run gptme:

   .. code-block:: bash

      poetry run gptme 'hello'
      # or gptme-server
      poetry run gptme-server

6. View data:

   - **Traces**: Jaeger UI at http://localhost:16686
   - **Metrics**: Prometheus UI at http://localhost:9090

Once enabled, gptme will automatically:

- Trace function execution times
- Record token processing metrics
- Monitor request durations
- Instrument Flask and HTTP requests
- Expose Prometheus metrics at `/metrics` endpoint

The telemetry data helps identify:

- Slow operations and bottlenecks
- Token processing rates
- Tool execution performance
- Resource usage patterns

Available Metrics
~~~~~~~~~~~~~~~~~

.. note::

    These metrics are still merely planned and may not be available yet, or be available in a different form.

The following metrics are automatically collected:

- ``gptme_tokens_processed_total``: Counter of tokens processed by type
- ``gptme_request_duration_seconds``: Histogram of request durations by endpoint
- ``gptme_tool_calls_total``: Counter of tool calls made by tool name
- ``gptme_tool_duration_seconds``: Histogram of tool execution durations by tool name
- ``gptme_active_conversations``: Gauge of currently active conversations
- ``gptme_llm_requests_total``: Counter of LLM API requests by provider, model, and success status
- HTTP request metrics (from Flask instrumentation)
- OpenAI/Anthropic API call metrics (from LLM instrumentations)

Example Prometheus Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

    These queries are aspirational and won't actually work yet.

Here are some useful Prometheus queries for monitoring gptme:

.. code-block:: promql

   # Average tool execution time by tool
   rate(gptme_tool_duration_seconds_sum[5m]) / rate(gptme_tool_duration_seconds_count[5m])

   # Most used tools
   topk(10, rate(gptme_tool_calls_total[5m]))

   # LLM request success rate
   rate(gptme_llm_requests_total{success="true"}[5m]) / rate(gptme_llm_requests_total[5m])

   # Tokens processed per second
   rate(gptme_tokens_processed_total[5m])

   # Active conversations
   gptme_active_conversations

   # Request latency percentiles
   histogram_quantile(0.95, rate(gptme_request_duration_seconds_bucket[5m]))

Environment Variables
~~~~~~~~~~~~~~~~~~~~~

- ``GPTME_TELEMETRY_ENABLED``: Enable/disable telemetry (default: false)
- ``OTLP_ENDPOINT``: OTLP endpoint for traces and metrics (default: http://localhost:4318)
- ``GPTME_OTLP_METRICS``: Send metrics via OTLP instead of Prometheus HTTP (default: true)

Multiple Instances
~~~~~~~~~~~~~~~~~~

When running multiple gptme instances with telemetry enabled, they can all send data to the same OTLP endpoint without port conflicts:

.. code-block:: bash

   # All instances use the same configuration
   export GPTME_TELEMETRY_ENABLED=true
   export OTLP_ENDPOINT=http://your-collector:4318
   export GPTME_OTLP_METRICS=true

The OpenTelemetry Collector aggregates metrics from all instances and exports them to Prometheus on a single port that Prometheus can scrape.

**Benefits:**

- No port conflicts between instances
- Centralized telemetry collection and processing
- Single Prometheus scrape target (the collector)
- Works across network boundaries
- Supports traces and metrics through the same endpoint

Release
-------

To make a release, simply run ``make release`` and follow the instructions.


Building Executables
====================

gptme supports building standalone executables using PyInstaller for easier distribution.

Building gptme-server Executable
--------------------------------

To build a standalone executable for gptme-server:

1. **Install dependencies** (including PyInstaller):

   .. code-block:: bash

      poetry install --extras server --with dev

2. **Build the executable**:

   .. code-block:: bash

      make build-server-exe

   Or manually:

   .. code-block:: bash

      ./scripts/build_server_executable.sh

3. **Find the executable** in the ``dist/`` directory:

   .. code-block:: bash

      ls -la dist/gptme-server*

Usage
-----

The standalone executable includes all dependencies and can be run without Python installed:

.. code-block:: bash

   # Run the server
   ./dist/gptme-server --host 0.0.0.0 --port 5700

   # Show help
   ./dist/gptme-server --help

The executable includes:

- All Python dependencies (Flask, gptme, etc.)
- Static web UI files
- All gptme tools and functionality

Distribution
------------

The executable is self-contained and can be distributed to systems without Python or gptme installed.

**Note**: The executable is platform-specific (Linux/macOS/Windows).

Cleaning Build Artifacts
------------------------

To clean PyInstaller build artifacts:

.. code-block:: bash

   make clean-build

This removes the ``build/``, ``dist/``, and temporary spec backup files.

Customization
-------------

The PyInstaller configuration is in ``scripts/pyinstaller/gptme-server.spec``. You can modify this file to:

- Add/remove hidden imports
- Include additional data files
- Change executable options
- Optimize the build

For more details, see the `PyInstaller documentation <https://pyinstaller.org/>`_.


Prompts
=======

Here you can read examples of the system prompts currently used by gptme.

.. automodule:: gptme.prompts
   :members:


Evals
=====

gptme provides LLMs with a wide variety of tools, but how well do models make use of them? Which tasks can they complete, and which ones do they struggle with? How far can they get on their own, without any human intervention?

To answer these questions, we have created an evaluation suite that tests the capabilities of LLMs on a wide variety of tasks.

.. note::
    The evaluation suite is still tiny and under development, but the eval harness is fully functional.

Recommended Model
-----------------

The recommended model is **Claude Sonnet 4.5** (``anthropic/claude-sonnet-4-5`` and ``openrouter/anthropic/claude-sonnet-4-5``) for its:

- Strong agentic capabilities
- Strong coder capabilities
- Strong performance across all tool types and formats
- Reasoning capabilities
- Vision & computer use capabilities

Decent alternatives include:

- GPT-4o (``openai/gpt-4o``)
- Llama 3.1 405B (``openrouter/meta-llama/llama-3.1-405b-instruct``)
- DeepSeek V3 (``deepseek/deepseek-chat``)
- DeepSeek R1 (``deepseek/deepseek-reasoner``)

Usage
-----

You can run the simple ``hello`` eval like this:

.. code-block:: bash

    gptme-eval hello --model anthropic/claude-sonnet-4-5

However, we recommend running it in Docker to improve isolation and reproducibility:

.. code-block:: bash

    make build-docker
    docker run \
        -e "ANTHROPIC_API_KEY=<your api key>" \
        -v $(pwd)/eval_results:/app/eval_results \
        gptme-eval hello --model anthropic/claude-sonnet-4-5

Available Evals
---------------

The current evaluations test basic tool use in gptme, such as the ability to: read, write, patch files; run code in ipython, commands in the shell; use git and create new projects with npm and cargo. It also has basic tests for web browsing and data extraction.

.. This is where we want to get to:

    The evaluation suite tests models on:

    1. Tool Usage

       - Shell commands and file operations
       - Git operations
       - Web browsing and data extraction
       - Project navigation and understanding

    2. Programming Tasks

       - Code completion and generation
       - Bug fixing and debugging
       - Documentation writing
       - Test creation

    3. Reasoning

       - Multi-step problem solving
       - Tool selection and sequencing
       - Error handling and recovery
       - Self-correction


Results
-------

Here are the results of the evals we have run so far:

.. command-output:: gptme-eval eval_results/*/eval_results.csv
   :cwd: ..
   :shell:

We are working on making the evals more robust, informative, and challenging.


Other evals
-----------

We have considered running gptme on other evals such as SWE-Bench, but have not finished it (see `PR #142 <https://github.com/gptme/gptme/pull/142>`_).

If you are interested in running gptme on other evals, drop a comment in the issues!


GitHub Bot
==========

One way to run gptme is as a GitHub bot.

The `gptme-bot` composite action is a GitHub Action that runs `gptme` in response to comments on GitHub issues or pull requests using the format `@gptme <prompt>`. It is designed to be used for tasks that gptme can perform with a one-shot prompt, such as answering questions, running commands and committing their results, creating files or making simple changes/additions (like write tests), and (potentially) automating code reviews.

## Usage

To use the `gptme-bot` composite action in your repo, you need to create a GitHub Actions workflow file that triggers the action in response to comments on issues or pull requests.

Here is an example workflow file that triggers the action in response to issue comments:

```yaml
name: gptme-bot

on:
  issue_comment:
    types: [created]

permissions: write-all

jobs:
  run-bot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: run gptme-bot action
        uses: gptme/gptme/.github/actions/bot@master
        with:
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowlist: "erikbjare"
```

The `gptme-bot` action will then run the `gptme` command-line tool with the command specified in the comment, and perform actions based on the output of the tool.

If a question was asked, it will simply reply.

If a request was made it will check out the appropriate branch, install dependencies, run `gptme`, then commit and push any changes made. If the issue is a pull request, the bot will push changes directly to the pull request branch. If the issue is not a pull request, the bot will create a new pull request with the changes.

The feature was initially introduced in [#16](https://github.com/gptme/gptme/issues/16).


Finetuning
==========

NOTE: this document is a work in progress!

This document aims to provide a step-by-step guide to finetuning a model on conversations from gptme.

The goal of fine-tuning a model for gptme is to:

 - Teach the tools available in gptme
 - Update out-of-date knowledge and conventions
 - Improve its ability to recover from errors


## Step 1: Gather the data

To fine-tune we need something to fine-tune on.

We will fine-tune on our own conversation history, combined with a subset of the [OpenAssistant dataset][oa-dataset] to extend the training data with relevant examples.

We collect our own conversation history by running the following command:

```bash
./train/collect.py --model "HuggingFaceH4/zephyr-7b-beta"  # or whatever model you intend to fine-tune
```

This will create files `train.csv` and `train.jsonl` in the `train` directory.

TODO: describe how to get the OpenAssistant dataset
TODO: describe how to use exported ChatGPT conversations

## Step 2: Prepare the data

We need to prepare the data for fine-tuning. This involves:

 - Extend the data with examples from the OpenAssistant dataset
 - Splitting the data into train and validation sets
   - We might want to make sure that the validation set is comprised of examples from gptme, and not from the OpenAssistant dataset.

TODO...

## Step 3: Fine-tune the model

Options:

 - [axolotl][axolotl]
   - Does it support Mistral? (and by extension Zephyr)
 - [Hugging Face transformers][hf-transformers]
   - [Examples for Llama2][llama-finetuning] by Meta
 - [OpenPipe][openpipe]?
   - Looks interesting, but not sure if it's relevant for us.

TODO...

## Model suggestions

 - HuggingFaceH4/zephyr-7b-beta
 - teknium/Replit-v2-CodeInstruct-3B
   - I had issues with this one on M2, but would be good to have some 3B model as an example used in testing/debug.

[oa-datasets]: https://projects.laion.ai/Open-Assistant/docs/data/datasets
[axolotl]: https://github.com/OpenAccess-AI-Collective/axolotl
[llama-finetuning]: https://ai.meta.com/llama/get-started/#fine-tuning


Custom Tools
============

Introduction
------------
There are three main approaches to extending gptme's functionality:

1. **Custom Tools**: Native gptme tools that integrate deeply with the assistant.
2. **Script Tools**: Standalone scripts that can be called via the shell tool.
3. **MCP Tools**: Tools that communicate via the Model Context Protocol, allowing language-agnostic tools that can be shared between different LLM clients.

This guide primarily covers the first two approaches. For information about MCP tools, see :doc:`mcp`.

Script-based Tools
------------------

The simplest way to extend gptme is by writing standalone scripts. These can be:

- Written in any language
- Run independently of gptme
- Called via the shell tool
- Easily tested and maintained

Benefits of script-based tools:

- Simple to create and maintain
- Can be run and tested independently
- No gptme dependency
- Flexible language choice
- Isolated dependencies

Limitations:

- Requires shell tool access
- Can't attach files/images to messages
- Not listed in tools section
- No built-in argument validation

For script-based tools, no registration is needed. Simply include them in the gptme context to make the agent aware of them.

1. Place scripts in a ``tools/`` directory (or any other location)
2. Make them executable (``chmod +x tools/script.py``)
3. Use via the shell tool (``gptme 'test our new tool' tools/script.py``)

Creating a Custom Tool
----------------------

When you need deeper integration with gptme, you can create a custom tool by defining a new instance of the ``ToolSpec`` class.

Custom tools are necessary when you need to:

- Attach files/images to messages
- Get included in the tools section
- Use without shell tool access
- Validate arguments
- Handle complex interactions

The ``ToolSpec`` class requires these parameters:

- **name**: The name of the tool.
- **desc**: A description of what the tool does.
- **instructions**: Instructions on how to use the tool.
- **examples**: Example usage of the tool.
- **execute**: A function that defines the tool's behavior when executed.
- **block_types**: The block types to detects.
- **parameters**: A list of parameters that the tool accepts.

Examples
--------

For examples of script-based tools, see:

**gptme-contrib** - A collection of community-contributed tools and scripts:

- `Twitter CLI <https://github.com/gptme/gptme-contrib/blob/master/scripts/twitter.py>`_: Twitter client with OAuth support
- `Perplexity CLI <https://github.com/gptme/gptme-contrib/blob/master/scripts/perplexity.py>`_: Perplexity search tool

**Standalone Tools** - Independent tool repositories:

- `gptme-rag <https://github.com/gptme/gptme-rag/>`_: Document indexing and retrieval

For examples of custom tools, see:

- `Screenshot tool <https://github.com/gptme/gptme/blob/master/gptme/tools/screenshot.py>`_: Takes screenshots
- `Browser tool <https://github.com/gptme/gptme/blob/master/gptme/tools/browser.py>`_: Web browsing and screenshots
- `Vision tool <https://github.com/gptme/gptme/blob/master/gptme/tools/vision.py>`_: Image viewing and analysis

Basic Custom Tool Example
~~~~~~~~~~~~~~~~~~~~~~~~~

Here's a minimal example of a custom tool:

.. code-block:: python

    from gptme.tools import ToolSpec, Parameter, ToolUse
    from gptme.message import Message

    def execute(code, args, kwargs, confirm):
        name = kwargs.get('name', 'World')
        yield Message('system', f"Hello, {name}!")

    tool = ToolSpec(
        name="hello",
        desc="A simple greeting tool",
        instructions="Greets the user by name",
        execute=execute,
        block_types=["hello"],
        parameters=[
            Parameter(
                name="name",
                type="string",
                description="Name to greet",
                required=False,
            ),
        ],
    )

Command Registration
--------------------

In addition to defining tools, you can register custom commands that users can invoke with ``/command`` syntax.

Registering Commands in Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tools can register commands in their ``ToolSpec`` definition:

.. code-block:: python

   from gptme.tools.base import ToolSpec
   from gptme.commands import CommandContext
   from gptme.message import Message

   def handle_my_command(ctx: CommandContext) -> Generator[Message, None, None]:
       """Handle the /my-command."""
       ctx.manager.undo(1, quiet=True)  # Remove command message
       yield Message("system", "Command executed!")

   tool = ToolSpec(
       name="my_tool",
       desc="Tool with custom command",
       commands={
           "my-command": handle_my_command,
       }
   )

Command Examples
~~~~~~~~~~~~~~~~

**Commit Command (autocommit tool):**

.. code-block:: python

   def handle_commit_command(ctx: CommandContext) -> Generator[Message, None, None]:
       """Handle the /commit command."""
       ctx.manager.undo(1, quiet=True)
       from ..util.context import autocommit
       yield autocommit()

   tool = ToolSpec(
       name="autocommit",
       commands={"commit": handle_commit_command}
   )

**Pre-commit Command (precommit tool):**

.. code-block:: python

   def handle_precommit_command(ctx: CommandContext) -> Generator[Message, None, None]:
       """Handle the /pre-commit command."""
       ctx.manager.undo(1, quiet=True)
       from ..util.context import run_precommit_checks
       success, message = run_precommit_checks()
       if not success and message:
           yield Message("system", message)

   tool = ToolSpec(
       name="precommit",
       commands={"pre-commit": handle_precommit_command}
   )

Command Context
~~~~~~~~~~~~~~~

Command handlers receive a ``CommandContext`` with:

- ``args``: List of command arguments
- ``full_args``: Full argument string
- ``manager``: LogManager for accessing conversation
- ``confirm``: Function for user confirmation

Command Best Practices
~~~~~~~~~~~~~~~~~~~~~~

1. **Undo command message**: Always call ``ctx.manager.undo(1, quiet=True)`` to remove the command from log
2. **Yield Messages**: Return system messages to provide feedback
3. **Handle errors**: Use try-except to handle failures gracefully
4. **Document commands**: Mention commands in tool's ``instructions`` field

Choosing an Approach
--------------------
Use **script-based tools** when you need:

- Standalone functionality
- Independent testing/development
- Language/framework flexibility
- Isolated dependencies

Use **custom tools** when you need:

- File/image attachments
- Tool listing in system prompt
- Complex argument validation
- Operation without shell access

Registering the Tool
--------------------
To ensure your tool is available for use, you can specify the module in the ``TOOL_MODULES`` env variable or
setting in your :doc:`project configuration file <config>`, which will automatically load your custom tools.

.. code-block:: toml

    [env]
    TOOL_MODULES = "gptme.tools,yourpackage.your_custom_tool_module"

Don't remove the ``gptme.tools`` package unless you know exactly what you are doing.

Ensure your module is in the Python path by either installing it
(e.g. with ``pip install .`` or ``pipx runpip gptme install .``, depending on installation method)
or by temporarily modifying the `PYTHONPATH` environment variable. For example:

.. code-block:: bash

    export PYTHONPATH=$PYTHONPATH:/path/to/your/module

This lets Python locate your module during development and testing without requiring installation.

Community Tools
---------------
The `gptme-contrib <https://github.com/gptme/gptme-contrib>`_ repository provides a collection of community-contributed tools and scripts.
This makes it easier to:

- Share tools between agents
- Maintain consistent quality
- Learn from examples
- Contribute your own tools

To use these tools, you can either:

1. Clone the repository and use the scripts directly
2. Copy specific scripts to your local workspace
3. Fork the repository to create your own collection


Hooks
=====

.. note::
   This is a new feature added in response to `issue #156 <https://github.com/gptme/gptme/issues/156>`_.

The hook system allows tools and plugins to register callbacks that execute at various points in gptme's lifecycle. This enables powerful extensions like automatic linting, memory management, pre-commit checks, and more.

Hook Types
----------

The following hook types are available:

Message Lifecycle Hooks
~~~~~~~~~~~~~~~~~~~~~~~~

- ``MESSAGE_PRE_PROCESS``: Before processing a user message
- ``MESSAGE_POST_PROCESS``: After message processing completes
- ``MESSAGE_TRANSFORM``: Transform message content before processing

Tool Lifecycle Hooks
~~~~~~~~~~~~~~~~~~~~~

- ``TOOL_PRE_EXECUTE``: Before executing any tool
- ``TOOL_POST_EXECUTE``: After executing any tool
- ``TOOL_TRANSFORM``: Transform tool execution

File Operation Hooks
~~~~~~~~~~~~~~~~~~~~~

- ``FILE_PRE_SAVE``: Before saving a file
- ``FILE_POST_SAVE``: After saving a file
- ``FILE_PRE_PATCH``: Before patching a file
- ``FILE_POST_PATCH``: After patching a file

Session Lifecycle Hooks
~~~~~~~~~~~~~~~~~~~~~~~~

- ``SESSION_START``: At session start
- ``SESSION_END``: At session end

Generation Hooks
~~~~~~~~~~~~~~~~

- ``GENERATION_PRE``: Before generating response
- ``GENERATION_POST``: After generating response
- ``GENERATION_INTERRUPT``: Interrupt generation

Usage
-----

Registering Hooks from Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tools can register hooks in their ``ToolSpec`` definition:

.. code-block:: python

   from gptme.tools.base import ToolSpec
   from gptme.hooks import HookType
   from gptme.message import Message

   def on_file_save(path, content, created):
       """Hook function called after a file is saved."""
       if path.suffix == ".py":
           # Run linting on Python files
           return Message("system", f"Linted {path}")
       return None

   tool = ToolSpec(
       name="linter",
       desc="Automatic linting tool",
       hooks={
           "file_save": (
               HookType.FILE_POST_SAVE.value,  # Hook type
               on_file_save,                    # Hook function
               10                               # Priority (higher = runs first)
           )
       }
   )

Registering Hooks Programmatically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can also register hooks directly:

.. code-block:: python

   from gptme.hooks import register_hook, HookType

   def my_hook_function(log, workspace):
       """Custom hook function."""
       # Do something
       return Message("system", "Hook executed!")

   register_hook(
       name="my_custom_hook",
       hook_type=HookType.MESSAGE_PRE_PROCESS,
       func=my_hook_function,
       priority=0,
       enabled=True
   )

Hook Function Signatures
~~~~~~~~~~~~~~~~~~~~~~~~~

Hook functions receive different arguments depending on the hook type:

.. code-block:: python

   # Message hooks
   def message_hook(log, workspace):
       pass

   # Tool hooks
   def tool_hook(tool_name, tool_use):
       pass

   # File hooks
   def file_hook(path, content, created=False):
       pass

   # Session hooks
   def session_hook(logdir, workspace, manager=None, initial_msgs=None):
       pass

Hook functions can:

- Return ``None`` (no action)
- Return a single ``Message`` object
- Return a generator that yields ``Message`` objects
- Raise exceptions (which are caught and logged)

Managing Hooks
--------------

Query Hooks
~~~~~~~~~~~

.. code-block:: python

   from gptme.hooks import get_hooks, HookType

   # Get all hooks
   all_hooks = get_hooks()

   # Get hooks of a specific type
   tool_hooks = get_hooks(HookType.TOOL_POST_EXECUTE)

Enable/Disable Hooks
~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   from gptme.hooks import enable_hook, disable_hook

   # Disable a hook
   disable_hook("linter.file_save")

   # Re-enable it
   enable_hook("linter.file_save")

Unregister Hooks
~~~~~~~~~~~~~~~~

.. code-block:: python

   from gptme.hooks import unregister_hook, HookType

   # Unregister from specific type
   unregister_hook("my_hook", HookType.FILE_POST_SAVE)

   # Unregister from all types
   unregister_hook("my_hook")

Examples
--------

Pre-commit Hook
~~~~~~~~~~~~~~~

Automatically run pre-commit checks after files are saved:

.. code-block:: python

   from pathlib import Path
   from gptme.tools.base import ToolSpec
   from gptme.hooks import HookType
   from gptme.message import Message
   import subprocess

   def run_precommit(path: Path, content: str, created: bool):
       """Run pre-commit on saved file."""
       try:
           result = subprocess.run(
               ["pre-commit", "run", "--files", str(path)],
               capture_output=True,
               text=True,
               timeout=30
           )
           if result.returncode != 0:
               yield Message("system", f"Pre-commit checks failed:\n{result.stdout}")
           else:
               yield Message("system", "Pre-commit checks passed", hide=True)
       except subprocess.TimeoutExpired:
           yield Message("system", "Pre-commit checks timed out", hide=True)

   tool = ToolSpec(
       name="precommit",
       desc="Automatic pre-commit checks",
       hooks={
           "precommit_check": (
               HookType.FILE_POST_SAVE.value,
               run_precommit,
               5  # Run after other hooks
           )
       }
   )

Memory/Context Hook
~~~~~~~~~~~~~~~~~~~

Automatically add context at session start:

.. code-block:: python

   def add_context(logdir, workspace, initial_msgs):
       """Add relevant context at session start."""
       context = load_relevant_context(workspace)
       if context:
           yield Message("system", f"Loaded context:\n{context}", pinned=True)

   tool = ToolSpec(
       name="memory",
       desc="Automatic context loading",
       hooks={
           "load_context": (
               HookType.SESSION_START.value,
               add_context,
               10
           )
       }
   )

Linting Hook
~~~~~~~~~~~~

Automatically lint files after saving:

.. code-block:: python

   def lint_file(path: Path, content: str, created: bool):
       """Lint Python files."""
       if path.suffix != ".py":
           return

       import subprocess
       result = subprocess.run(
           ["ruff", "check", str(path)],
           capture_output=True,
           text=True
       )

       if result.returncode != 0:
           yield Message("system", f"Linting issues:\n{result.stdout}")

   tool = ToolSpec(
       name="linter",
       desc="Automatic Python linting",
       hooks={
           "lint": (HookType.FILE_POST_SAVE.value, lint_file, 5)
       }
   )

Best Practices
--------------

1. **Keep hooks fast**: Hooks run synchronously and can slow down operations
2. **Handle errors gracefully**: Use try-except to prevent hook failures from breaking the system
3. **Use priorities wisely**: Higher priority hooks run first (use for dependencies)
4. **Return Messages appropriately**: Use ``hide=True`` for verbose/debug messages
5. **Test hooks thoroughly**: Hooks run in the main execution path
6. **Document hook behavior**: Explain what your hooks do and when they run
7. **Consider disabling hooks**: Make hooks easy to disable via configuration

Thread Safety
-------------

The hook registry is thread-safe. Each thread maintains its own tool state, and hooks are registered per-thread.

When running in server mode with multiple workers, hooks must be registered in each worker process.

Configuration
-------------

Hooks can be configured via environment variables:

.. code-block:: bash

   # Example: disable specific hooks
   export GPTME_HOOKS_DISABLED="linter.lint,precommit.precommit_check"

   # Example: set hook priorities
   export GPTME_HOOK_PRIORITY_LINTER=20

Migration Guide
---------------

Converting Existing Features to Hooks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you have features that should be hooks:

1. **Identify the appropriate hook type**: Choose from the available hook types
2. **Extract the logic**: Move the feature logic into a hook function
3. **Register the hook**: Add it to a ToolSpec or register programmatically
4. **Test thoroughly**: Ensure the hook works in all scenarios
5. **Update documentation**: Document the new hook

Example: Converting pre-commit checks to a hook
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Before** (hard-coded in chat.py):

.. code-block:: python

   # In chat.py
   if check_for_modifications(log):
       run_precommit_checks()

**After** (as a hook):

.. code-block:: python

   # In a tool
   def precommit_hook(log, workspace):
       if check_for_modifications(log):
           run_precommit_checks()

   tool = ToolSpec(
       name="precommit",
       hooks={
           "check": (HookType.MESSAGE_POST_PROCESS.value, precommit_hook, 5)
       }
   )

API Reference
-------------

.. automodule:: gptme.hooks
   :members:
   :undoc-members:
   :show-inheritance:

See Also
--------

- :doc:`tools` - Tool system documentation
- :doc:`config` - Configuration options
- `Issue #156 <https://github.com/gptme/gptme/issues/156>`_ - Original feature request


API Reference
=============

Here is the API reference for ``gptme``.

.. contents:: Content
   :depth: 5
   :local:
   :backlinks: none


core
----

Some of the core classes and functions in ``gptme``.

Message
~~~~~~~

A message in the conversation.

.. autoclass:: gptme.message.Message
   :members:

Codeblock
~~~~~~~~~

A codeblock in a message, possibly executable by tools.

.. automodule:: gptme.codeblock
   :members:

LogManager
~~~~~~~~~~

Holds the current conversation as a list of messages, saves and loads the conversation to and from files, supports branching, etc.

.. automodule:: gptme.logmanager
   :members:


Config
------

Configuration for ``gptme`` on user-level (:ref:`global-config`), project-level (:ref:`project-config`), and conversation-level.

.. automodule:: gptme.config
   :members:


prompts
-------

See :doc:`prompts` for more information.

tools
-----

Supporting classes and functions for creating and using tools.

.. automodule:: gptme.tools
   :members:

server
------

See :doc:`server` for more information.

.. automodule:: gptme.server
   :members:


Alternatives
============

The AI-assisted development space is rapidly evolving, with many projects emerging and rapidly improving. Here, we'll provide an overview of gptme and some similar projects that might be good alternatives (or vice versa) for your use case, highlighting their key features to help you understand the landscape.

When selecting an AI-assisted development tool, consider the following factors:

1. Your preferred working environment (terminal, IDE, etc.)
2. The specific tasks you need assistance with
3. Integration with your existing workflow
4. The level of control and customization you require

Each of these projects has its own strengths and may be better suited for different use cases. We encourage you to explore them and find the one that best fits your needs.

If your answers to these questions are "terminal", "general-purpose/coding", "extensible", and "highly customizable", gptme might be the right choice for you.

Remember that the AI-assisted development space is rapidly evolving, and these tools are continuously improving and adding new features. Always check the latest documentation and releases for the most up-to-date information.

Let's start with the comparison, we will first show an overview comparison and then dig deeper into each alternative.

Comparison
----------

While we obviously like gptme, there are other great projects in the AI-assisted development space that provide similar but different capabilities, which be more what you are looking for.

Here we will briefly introduce some we like, along with their key features.

.. |nbsp| unicode:: 0xA0
   :trim:

.. list-table:: Comparison
   :widths: 18 9 18 9 13 9 12
   :header-rows: 1

   * -
     - Type
     - Focus
     - Hosting
     - Price
     - Funding
     - Open |nbsp| Source
   * - gptme
     - CLI
     - General purpose
     - Local
     - Free
     - Bootstrap
     - ✅
   * - Open Interpreter
     - CLI
     - General purpose
     - Local
     - Free
     - ?
     - ✅
   * - Aider
     - CLI
     - Coding
     - Local
     - Free
     - Bootstrap
     - ✅
   * - Moatless Tools
     - CLI
     - Coding
     - Local
     - Free
     - Bootstrap
     - ✅
   * - OpenHands
     - CLI/Web
     - General purpose
     - Both
     - Free
     - VC ($5M)
     - ✅
   * - Lovable.dev
     - Web app
     - Frontend
     - SaaS
     - Credits
     - VC ($8M)
     - ❌
   * - Cursor
     - IDE fork
     - Coding
     - Desktop
     - $20/mo
     - VC ($1.1B)
     - ❌
   * - Claude Desktop
     - Desktop app
     - General purpose
     - Desktop
     - $20/mo
     - VC
     - ❌
   * - Claude Projects
     - Web app
     - Chat with files
     - SaaS
     - $20/mo
     - VC
     - ❌


Projects
--------

To begin, lets first introduce gptme and then we will compare it to some of the other projects in the space.

gptme
^^^^^

gptme is a personal AI assistant that runs in your terminal, designed to assist with various programming tasks and knowledge work.

Key features:

- Runs in the terminal
- Can execute shell commands and Python code
- Ability to read, write, and patch files
- Web browsing capabilities
- Vision support for images and screenshots
- Self-correcting behavior
- Support for multiple LLM providers
- Extensible tool system
- Highly customizable, aims to be simple to modify

First commit: March 24, 2023.

Aider
^^^^^

`Aider <https://aider.chat/>`_ is AI pair programming in your terminal.

Key features:

- Git integration
- Code editing capabilities
- Conversation history
- Customizable prompts
- Builds a code map for context
- Scores highly on SWE-Bench

Differences to gptme:

- gptme is less git-commit focused
- gptme is more general-purpose
- gptme has wider array of tools

First commit: April 4, 2023.

Moatless Tools
^^^^^^^^^^^^^^

`Moatless Tools <https://github.com/aorwall/moatless-tools>`_ is an impressive AI coding agent that has performed really well on `SWE-Bench <https://www.swebench.com/>`_.

Key features:

- Various specialized tools for different tasks
- Integration with popular development environments
- Focus on specific development workflows
- Scores highly on SWE-Bench

OpenHands
^^^^^^^^^

`OpenHands <https://github.com/All-Hands-AI/OpenHands>`_ (formerly OpenDevin) is a leading open-source platform for software development agents, with impressive performance on benchmarks and a large community.

Key features:

- Leading performance on SWE-bench (>50% score)
- Can do anything a human developer can: write code, run commands, browse web
- Support for multiple LLM providers
- Both CLI and web interface
- Docker-based sandboxed execution
- Active development and large community (46.9k stars)

Differences to gptme:

- More focused on software development
- Has web UI in addition to CLI
- Larger community and more active development
- Docker-based sandboxing vs gptme's direct execution

First commit: March 13, 2024.

Lovable.dev
^^^^^^^^^^^

`lovable.dev <https://lovable.dev>`_ (previously `GPT Engineer.app <https://gptengineer.app>`_) lets you build webapps fast using natural language.

Key features:

- Builds frontends with ease, just by prompting
- LLM-powered no-code editor for frontends
- Git/GitHub integration, ability to import projects
- Supabase integration for backend support

Differences to gptme:

- gptme is terminal-only (for now)
- gptme is much more general-purpose
- gptme is far from low/no-code
- gptme is far from as good at building frontends
- gptme is not no-code, you still need to select your context yourself

Disclaimer: gptme author Erik was an early hire at Lovable.

Cursor
^^^^^^

If you are a VSCode user who doesn't mind using a fork, this seems to be it.

Key features:

- AI native IDE
- Git checkpointing
- Great tab completion ("Babble", from `acquiring Supermaven <https://www.coplay.dev/blog/a-brief-history-of-cursor-s-tab-completion>`_)

Differences to gptme:

- gptme is in-terminal instead of in-vscode-fork
- gptme is extensible with tools, more general-purpose

  - Less true now that Cursor supports MCP

Cline
^^^^^

`Cline <https://cline.bot/>`_ is a coding agent running as a VSCode extension. Similar to Cursor, but open-source and not a full VSCode fork.

It also has a fork called `Roo Code <https://github.com/RooVetGit/Roo-Code>`_ (prev Roo Cline).


Claude
^^^^^^

Anthropic's Claude has gotten popular due to its excellent coding capabilities. It has also championed MCP as a way to extend its capabilities and solve the n-to-m problem of tool clients (Claude Desktop, Cursor) and servers (browser, shell, python).

.. https://docs.anthropic.com/en/release-notes/claude-apps

.. rubric:: Projects

Claude Projects lets users upload their files and chat with them. It requires a Claude subscription.

Released Jun 25, 2024.

.. rubric:: Artifacts

Claude Artifacts allows users to directly preview certain content, like HTML and React components, allowing to build small web apps with Claude.

It is like a mini-version of Lovable.dev.

Released Aug 27, 2024.

.. rubric:: Desktop

Claude Desktop is a desktop client for Claude.

It supports MCP, allowing for a wide array of tools and resources to be used with it. (gptme also intends to support MCP)

Released October 31st, 2024.

.. rubric:: Code

Claude Code is a "is an agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster through natural language commands".

It is pretty much a full-on clone of gptme, with MCP support. Unlike gptme, it is not open-source (and they have `no such plans <https://github.com/anthropics/claude-code/issues/59>`_.

We have not made a thorough comparison yet. While users we asked have said they still prefer gptme, they acknowledge Claude Code has certain advantages which gptme could learn from.

Released February 24, 2025.

ChatGPT
^^^^^^^

.. rubric:: Code Interpreter

ChatGPT's Code Interpreter was one of the early inspirations for gptme as an open-source and local-first alternative, giving the LLM access to your terminal and local files.

There's not much to compare here anymore, as gptme has evolved a lot since then (while Code Interpreter hasn't), but it's worth mentioning as it was one of the first projects in this space.

Released July 6, 2023.

.. rubric:: Canvas

ChatGPT Canvas was OpenAI's response to Claude Artifacts (released ~1 month before).

Released October 3, 2024.

.. rubric:: Codex

`Codex <https://github.com/openai/codex>`_ is a "lightweight coding agent that runs in your terminal".

It was OpenAI's response to Claude Code (released ~2 months before). Unlike Claude Code, it is open-source.

Released April 16th, 2025.

(not to be confused with OpenAI's earlier Codex model)


Are we tiny?
============

gptme is intended to be small and simple, and focus on doing the right thing in the right way, rather than all the things in all the ways.

The benefits of this approach are many:

- It is easier to understand and maintain.
- It is easier to contribute to.
- It is easier to learn.
- It is easier to extend.
- It is more fun to work on.

Being aggressive about keeping things small and simple is a way to keep the project maintainable and fun to work on. The fastest way to kill a project is to make it too big and complex, and suffer burnout as a result.

Another major benefit of keeping things small and simple is that it makes it easier for AI to understand and work with the codebase.
This is a major goal of the project, and it is important to keep in mind that the simpler the codebase is, the easier it will be for AI to work with it:

..

    *"The simpler your API is, the more effectively the AI can harness it when generating code."*

    -- `Kenneth Reitz <https://x.com/kennethreitz42/status/1852750768920518768>`_ (and many others)


To that end, in this document we will present some statistics about the current state of the project, trying to be mindful to keep an eye on this page and make sure we are not growing too much.

Startup time
------------

.. command-output:: make bench-import
   :cwd: ..

.. command-output:: make bench-startup
   :cwd: ..


Lines of code
-------------

LoC Core
********

.. command-output:: make cloc-core
   :cwd: ..

LoC LLM
*******

.. command-output:: make cloc-llm
   :cwd: ..

LoC Tools
*********

.. command-output:: make cloc-tools
   :cwd: ..

LoC Server
***********

.. command-output:: make cloc-server
   :cwd: ..

LoC Tests
**********

.. command-output:: make cloc-tests
   :cwd: ..

LoC Eval
********

.. command-output:: make cloc-eval
   :cwd: ..

LoC Total
*********

.. command-output:: make cloc-total
   :cwd: ..

Code Metrics
------------

.. command-output:: make metrics
   :cwd: ..

The metrics above show:

- **Project Overview**: Basic stats about the codebase size and complexity
- **Complex Functions**: Functions rated D+ (high complexity, should be refactored)
- **Large Files**: Files over 300 SLOC (should be split into smaller modules)
- **Duplicated Files**: Using `jscpd` to find duplicated code

We should aim to:

- Keep average complexity below 4.0
- Have no E-rated functions (extremely complex)
- Have few D-rated functions (very complex)
- Keep files under 300 SLOC where possible


Timeline
========

A brief timeline of the project.

The idea is to later make this into a timeline similar to the one for `ActivityWatch <https://activitywatch.net/timeline/>`_, including releases, features, etc.

.. figure:: https://starchart.cc/gptme/gptme.svg
   :alt: Stargazers over time
   :target: https://starchart.cc/gptme/gptme

   GitHub stargazers over time

..
    This timeline tracks development across the entire gptme ecosystem, including:

    - `gptme <https://github.com/gptme/gptme>`_ (main repository)
    - `gptme-agent-template <https://github.com/gptme/gptme-agent-template>`_
    - `gptme-rag <https://github.com/gptme/gptme-rag>`_
    - `gptme.vim <https://github.com/gptme/gptme.vim>`_
    - `gptme-webui <https://github.com/gptme/gptme-webui>`_

    For repositories with formal releases, we track significant version releases.
    For repositories without formal releases (like gptme.vim and gptme-webui),
    we track initial releases and major feature additions based on commit history.

    This file can be automatically updated by gptme with the help of `gh release list` and `gh release view` commands.

2025
----

March

- v0.27.0 (2025-03-11)

  - Pre-commit integration for automatic code quality checks
  - macOS support for computer use tool
  - Claude 3.7 Sonnet and DeepSeek R1 support
  - Improved TTS with Kokoro 1.0
  - Context tree for including repository structure in prompts
  - Enhanced RAG with LLM post-processing

February

- Added image support to gptme-webui (2025-02-07)

January

- Major UI improvements to gptme-webui (2025-01-28)
- v0.26.0 (2025-01-14)

  - Added support for loading tools from external modules (custom tools)
  - Added experimental local TTS support using Kokoro

- gptme-contrib repository created (2025-01-10)

  - Initial tools: Twitter and Perplexity CLI integrations
  - Later expanded with Discord bot, Pushover notifications, and enhanced Twitter automation

2024
----

December

- v0.25.0 (2024-12-20)

  - New prompt_toolkit-based interface with better completion and highlighting
  - Support for OpenAI/Anthropic tools APIs
  - Improved cost & performance through better prompt caching
  - Better path handling and workspace context
  - Added heredoc support
- gptme-agent-template v0.3 release (2024-12-20)
- gptme-rag v0.5.1 release (2024-12-13)

November

- gptme.vim initial release (2024-11-29)
- v0.24.0 (2024-11-22)
- gptme-rag v0.3.0 release (2024-11-22)
- gptme-agent-template initial release v0.1 (2024-11-21)
- gptme-rag initial release v0.1.0 (2024-11-15)
- v0.23.0 (2024-11-14)
- gptme-webui initial release (2024-11-03)
- v0.22.0 (2024-11-01)

October

- v0.21.0 (2024-10-25)
- v0.20.0 (2024-10-10)

  - Updated web UI with sidebar
  - Improved performance with faster imports
  - Enhanced error handling for tools

- `First viral tweet <https://x.com/rohanpaul_ai/status/1841999030999470326>`_ (2024-10-04)
- v0.19.0 (2024-10-02)

September

- v0.18.0 (2024-09-26)
- v0.17.0 (2024-09-19)
- v0.16.0 (2024-09-16)
- v0.15.0 (2024-09-06)

  - Added screenshot_url function to browser tool
  - Added GitHub bot features for non-change questions/answers
  - Added special prompting for non-interactive mode

August

- v0.14.0 (2024-08-21)
- v0.13.0 (2024-08-09)

  - Added Anthropic Claude support
  - Added tmux terminal tool
  - Improved shell tool with better bash syntax support
  - Major tools refactoring

- v0.12.0 (2024-08-06)

  - Improved browsing with assistant-driven navigation
  - Added subagent tool (early version)
  - Tools refactoring

- `Show HN <https://news.ycombinator.com/item?id=41204256>`__

2023
----

November

- v0.11.0 (2023-11-29)

  - Added support for paths/URLs in prompts
  - Mirror working directory in shell and Python tools
  - Started evaluation suite

- v0.10.0 (2023-11-03)

  - Improved file handling in prompts
  - Added GitHub bot documentation

October

- v0.9.0 (2023-10-27)

  - Added automatic naming of conversations
  - Added patch tool
  - Initial documentation

- v0.8.0 (2023-10-16)

  - Added web UI for conversations
  - Added rename and fork commands
  - Improved web UI responsiveness

- v0.7.0 (2023-10-10)
- v0.6.0 (2023-10-10)
- v0.5.0 (2023-10-02)

  - Added browser tool (early version)

September

- v0.4.0 (2023-09-10)
- v0.3.0 (2023-09-06)

  - Added configuration system
  - Improved context awareness
  - Made OpenAI model configurable

- `Reddit announcement <https://www.reddit.com/r/LocalLLaMA/comments/16atlia/gptme_a_fancy_cli_to_interact_with_llms_gpt_or/>`_ (2023-09-05)
- `Twitter announcement <https://x.com/ErikBjare/status/1699097896451289115>`_ (2023-09-05)
- `Show HN <https://news.ycombinator.com/item?id=37394845>`__ (2023-09-05)
- v0.2.1 (2023-09-05)

  - Initial release

August

March

- `Initial commit <https://github.com/gptme/gptme/commit/d00e9aae68cbd6b89bbc474ed7721d08798f96dc>`_


Changelog
=========

The changelog is also available in the repository releases <https://github.com/gptme/gptme/releases>

.. toctree::
   :maxdepth: 1

   releases/v0.29.0.md
   releases/v0.28.3.md
   releases/v0.28.2.md
   releases/v0.28.1.md
   releases/v0.28.0.md
   releases/v0.27.0.md
   releases/v0.26.0.md
   releases/v0.25.0.md
   releases/v0.24.1.md
   releases/v0.24.0.md
   releases/v0.23.0.md
   releases/v0.22.0.md
   releases/v0.21.0.md
   releases/v0.20.0.md
   releases/v0.19.0.md
   releases/v0.18.0.md
   releases/v0.17.0.md
   releases/v0.16.0.md
   releases/v0.15.0.md
   releases/v0.14.0.md
   releases/v0.13.0.md
   releases/v0.12.0.md
   releases/v0.11.0.md
   releases/v0.10.5.md
   releases/v0.10.4.md
   releases/v0.10.3.md
   releases/v0.10.2.md
   releases/v0.10.1.md
   releases/v0.10.0.md
   releases/v0.9.4.md
   releases/v0.9.3.md
   releases/v0.9.2.md
   releases/v0.9.1.md
   releases/v0.9.0.md
   releases/v0.8.1.md
   releases/v0.8.0.md
   releases/v0.7.0.md
   releases/v0.6.1.md
   releases/v0.6.0.md
   releases/v0.5.0.md
   releases/v0.4.2.md
   releases/v0.4.1.md
   releases/v0.4.0.md
   releases/v0.3.3.md
   releases/v0.3.2.md
   releases/v0.3.1.md
   releases/v0.3.0.md
   releases/v0.2.2.md
   releases/v0.2.1.md
   releases/v0.1.1.md


# v0.29.0

These are the release notes for gptme version v0.29.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare, @TimeToBuildBob

## Changelog

Changes since v0.28.3:


## 📦 gptme

### ✨ Features (39)

 - feat: improve token awareness to show warnings at meaningful thresholds ([`fce2382a`](https://github.com/gptme/gptme/commit/fce2382a))
 - feat: make hook parameters consistent across all hook types ([`2e71dcc9`](https://github.com/gptme/gptme/commit/2e71dcc9))
 - feat: expose MCP tool commands as slash commands ([#760](https://github.com/gptme/gptme/issues/760)) ([`2a89022f`](https://github.com/gptme/gptme/commit/2a89022f))
 - feat(mcp): add MCP discovery and dynamic loading support ([#685](https://github.com/gptme/gptme/issues/685)) ([`e8af7604`](https://github.com/gptme/gptme/commit/e8af7604))
 - feat: add token & time awareness tools/hooks ([#665](https://github.com/gptme/gptme/issues/665)) ([`c0391ddd`](https://github.com/gptme/gptme/commit/c0391ddd))
 - feat: show conversation ID in goodbye message ([`ad5bc4d0`](https://github.com/gptme/gptme/commit/ad5bc4d0))
 - feat: add gptme-util prompts expand command ([`fb543142`](https://github.com/gptme/gptme/commit/fb543142))
 - feat: add --profile flag for performance profiling ([`9ce6e3e8`](https://github.com/gptme/gptme/commit/9ce6e3e8))
 - feat(shell): add configurable shellcheck exclude codes ([#747](https://github.com/gptme/gptme/issues/747)) ([`46a54148`](https://github.com/gptme/gptme/commit/46a54148))
 - feat(shell): add simple shellcheck validation ([#740](https://github.com/gptme/gptme/issues/740)) ([`20f28f6b`](https://github.com/gptme/gptme/commit/20f28f6b))
 - feat(lessons): add message pattern-based mode detection for Phase 3 ([#722](https://github.com/gptme/gptme/issues/722)) ([`fc131775`](https://github.com/gptme/gptme/commit/fc131775))
 - feat: switch CI from claude-3-5-haiku to claude-haiku-4-5 ([#712](https://github.com/gptme/gptme/issues/712)) ([`64e04708`](https://github.com/gptme/gptme/commit/64e04708))
 - feat(llm): add support for Claude Haiku 4.5 ([#705](https://github.com/gptme/gptme/issues/705)) ([`e48fcd2f`](https://github.com/gptme/gptme/commit/e48fcd2f))
 - feat(lessons): implement status filtering for lesson lifecycle management ([#702](https://github.com/gptme/gptme/issues/702)) ([`be25b397`](https://github.com/gptme/gptme/commit/be25b397))
 - feat: support @log workspace magic value in API ([#695](https://github.com/gptme/gptme/issues/695)) ([`9fc71ad1`](https://github.com/gptme/gptme/commit/9fc71ad1))
 - feat: save removed tool outputs during auto-compacting ([`186ac031`](https://github.com/gptme/gptme/commit/186ac031))
 - feat(gh): add optional commit_sha parameter to check specific commits ([`3df3c44f`](https://github.com/gptme/gptme/commit/3df3c44f))
 - feat(lessons): add configurable lesson directories via gptme.toml ([`0a05ec61`](https://github.com/gptme/gptme/commit/0a05ec61))
 - feat(gh): add quick status check command ([`76c67881`](https://github.com/gptme/gptme/commit/76c67881))
 - feat(gh): show run IDs for failed checks and add --log-failed example ([`c3f131c3`](https://github.com/gptme/gptme/commit/c3f131c3))
 - feat: enhance lesson matching with tools and history-based deduplication ([`5aefbe37`](https://github.com/gptme/gptme/commit/5aefbe37))
 - feat(llm): add configurable API timeout for OpenAI-compatible providers ([#681](https://github.com/gptme/gptme/issues/681)) ([`6a2d532f`](https://github.com/gptme/gptme/commit/6a2d532f))
 - feat: enhance GitHub PR reading with code context and suggestions ([#689](https://github.com/gptme/gptme/issues/689)) ([`4c1cef43`](https://github.com/gptme/gptme/commit/4c1cef43))
 - feat: implement basic lesson system with metadata and auto-inclusion ([#687](https://github.com/gptme/gptme/issues/687)) ([`3e81a0d2`](https://github.com/gptme/gptme/commit/3e81a0d2))
 - feat: add tool_format to telemetry and remove redundant log ([`d59332ab`](https://github.com/gptme/gptme/commit/d59332ab))
 - feat(browser): add Accept header to prefer markdown/plaintext over HTML ([#680](https://github.com/gptme/gptme/issues/680)) ([`f92ab671`](https://github.com/gptme/gptme/commit/f92ab671))
 - feat: improve conversation history context ([#679](https://github.com/gptme/gptme/issues/679)) ([`35c303d3`](https://github.com/gptme/gptme/commit/35c303d3))
 - feat(shell): add 20-minute default timeout to prevent stuck commands ([#678](https://github.com/gptme/gptme/issues/678)) ([`526da1cb`](https://github.com/gptme/gptme/commit/526da1cb))
 - feat(telemetry): add hostname to resource attributes ([#676](https://github.com/gptme/gptme/issues/676)) ([`0d77253f`](https://github.com/gptme/gptme/commit/0d77253f))
 - feat(telemetry): add agent name and interactive mode metadata ([#675](https://github.com/gptme/gptme/issues/675)) ([`206ff1fb`](https://github.com/gptme/gptme/commit/206ff1fb))
 - feat: reintroduce OpenAI and Anthropic telemetry instrumentation ([`d4b031f0`](https://github.com/gptme/gptme/commit/d4b031f0))
 - feat: add GENERATION_PRE hook trigger before LLM generation ([`f69c3d37`](https://github.com/gptme/gptme/commit/f69c3d37))
 - feat: add concise __repr__ to Log class ([`b9485b98`](https://github.com/gptme/gptme/commit/b9485b98))
 - feat: implement auto-reply mechanism as LOOP_CONTINUE hook ([`de79d5ba`](https://github.com/gptme/gptme/commit/de79d5ba))
 - feat: implement /compact and auto-compacting ([#645](https://github.com/gptme/gptme/issues/645)) ([`61392fc0`](https://github.com/gptme/gptme/commit/61392fc0))
 - feat: implement comprehensive hook system and command registration ([#156](https://github.com/gptme/gptme/issues/156)) ([#660](https://github.com/gptme/gptme/issues/660)) ([`32d39817`](https://github.com/gptme/gptme/commit/32d39817))
 - feat: auto-restore todo state when resuming conversations ([#659](https://github.com/gptme/gptme/issues/659)) ([`debcb096`](https://github.com/gptme/gptme/commit/debcb096))
 - feat: implement complete tool and auto-reply mechanism for autonomous operation ([`14952de1`](https://github.com/gptme/gptme/commit/14952de1))
 - feat: emit hint when save tool barely changes file ([`1601f5e8`](https://github.com/gptme/gptme/commit/1601f5e8))

### 🐛 Fixes (77)
<details><summary>Click to expand</summary>
<p>

 - fix: fix issue with hook args ([`4fa95612`](https://github.com/gptme/gptme/commit/4fa95612))
 - fix: correct complete_hook signature to match GENERATION_PRE calling convention ([`90a12f9c`](https://github.com/gptme/gptme/commit/90a12f9c))
 - fix: handle pipe operators inside quoted strings in shell commands ([#764](https://github.com/gptme/gptme/issues/764)) ([`5f80b533`](https://github.com/gptme/gptme/commit/5f80b533))
 - fix: skip generating initial messages when resuming conversations ([#763](https://github.com/gptme/gptme/issues/763)) ([`2898e79d`](https://github.com/gptme/gptme/commit/2898e79d))
 - fix: add special haiku-adapted to_xml (for testing) ([`cc868960`](https://github.com/gptme/gptme/commit/cc868960))
 - fix(tools): add support for Haiku 4.5 XML format ([#752](https://github.com/gptme/gptme/issues/752)) ([`96f87e43`](https://github.com/gptme/gptme/commit/96f87e43))
 - fix: run auto-naming in background thread to avoid blocking CLI ([`1d17674f`](https://github.com/gptme/gptme/commit/1d17674f))
 - fix: fix anthropic non-streaming requests being denied during auto renames ([#759](https://github.com/gptme/gptme/issues/759)) ([`397634ab`](https://github.com/gptme/gptme/commit/397634ab))
 - fix: disable time and token awareness hooks by default (until issues are fixed) ([`6b6ad577`](https://github.com/gptme/gptme/commit/6b6ad577))
 - fix: skip tests when missing extras ([#754](https://github.com/gptme/gptme/issues/754)) ([`d4095036`](https://github.com/gptme/gptme/commit/d4095036))
 - fix(mcp): add resilience with auto-restart and retry on connection failures ([#719](https://github.com/gptme/gptme/issues/719)) ([`d30fd6ca`](https://github.com/gptme/gptme/commit/d30fd6ca))
 - fix: improve tool instructions, add pyyaml dependency ([#755](https://github.com/gptme/gptme/issues/755)) ([`696f1430`](https://github.com/gptme/gptme/commit/696f1430))
 - fix: lower ding log message level from info to debug ([`41d604d9`](https://github.com/gptme/gptme/commit/41d604d9))
 - fix(shell): fix pipe handling and add telemetry error filter ([#750](https://github.com/gptme/gptme/issues/750)) ([`3bb57151`](https://github.com/gptme/gptme/commit/3bb57151))
 - fix: improve handling of keyboard interrupts in precommit and autocommit hooks and commands ([`8ea8db89`](https://github.com/gptme/gptme/commit/8ea8db89))
 - fix: include tool-registered commands in autocomplete ([`25c9772a`](https://github.com/gptme/gptme/commit/25c9772a))
 - fix: fixed log formatting of included lessons ([`a95ac3f7`](https://github.com/gptme/gptme/commit/a95ac3f7))
 - fix(llm): extend Anthropic retry logic to handle all transient 5xx errors ([#746](https://github.com/gptme/gptme/issues/746)) ([`418b4669`](https://github.com/gptme/gptme/commit/418b4669))
 - fix(llm): use client defaults for timeout instead of explicit value ([#735](https://github.com/gptme/gptme/issues/735)) ([`0e3dcbcc`](https://github.com/gptme/gptme/commit/0e3dcbcc))
 - fix(llm): update deepseek models context window to 128k ([#742](https://github.com/gptme/gptme/issues/742)) ([`dca014fe`](https://github.com/gptme/gptme/commit/dca014fe))
 - fix: some telemetry fixes ([#737](https://github.com/gptme/gptme/issues/737)) ([`8b10eef6`](https://github.com/gptme/gptme/commit/8b10eef6))
 - fix(shell): handle file descriptor redirects and complex tool syntax ([#736](https://github.com/gptme/gptme/issues/736)) ([`5207e421`](https://github.com/gptme/gptme/commit/5207e421))
 - fix: include duration in tool call telemetry ([`d7dfb9c9`](https://github.com/gptme/gptme/commit/d7dfb9c9))
 - fix: ensure MCP tools reload with updated config ([#731](https://github.com/gptme/gptme/issues/731)) ([`a46e6799`](https://github.com/gptme/gptme/commit/a46e6799))
 - fix(shell): handle compound commands (for/while/if loops) correctly ([#725](https://github.com/gptme/gptme/issues/725)) ([`64f7d7c4`](https://github.com/gptme/gptme/commit/64f7d7c4))
 - fix(shell): handle compound operators and preserve tilde expansion ([#730](https://github.com/gptme/gptme/issues/730)) ([`1213b372`](https://github.com/gptme/gptme/commit/1213b372))
 - fix: extend context script timeout to 60s, log warning if it takes >10s ([`a5274983`](https://github.com/gptme/gptme/commit/a5274983))
 - fix: log message when lessons included ([`45ef8d95`](https://github.com/gptme/gptme/commit/45ef8d95))
 - fix(eval): set tool_format before LogManager.load() ([#726](https://github.com/gptme/gptme/issues/726)) ([`f9403a1f`](https://github.com/gptme/gptme/commit/f9403a1f))
 - fix(tests): skip test_subagent for claude-haiku-4-5 due to timeout ([#728](https://github.com/gptme/gptme/issues/728)) ([`6165feb3`](https://github.com/gptme/gptme/commit/6165feb3))
 - fix(shell): redirect stdin in pipelines to prevent deadlock ([#715](https://github.com/gptme/gptme/issues/715)) ([`350d87d1`](https://github.com/gptme/gptme/commit/350d87d1))
 - fix(codeblock): improve nested block detection to fix XFAIL tests ([#711](https://github.com/gptme/gptme/issues/711)) ([`d3de4165`](https://github.com/gptme/gptme/commit/d3de4165))
 - fix(auto-naming): strip think tags from LLM responses ([#716](https://github.com/gptme/gptme/issues/716)) ([`ec6224b7`](https://github.com/gptme/gptme/commit/ec6224b7))
 - fix(shell): include heredoc content when splitting compound commands ([#714](https://github.com/gptme/gptme/issues/714)) ([`d6b256b6`](https://github.com/gptme/gptme/commit/d6b256b6))
 - fix(openai): preserve tool results in gpt-5 models ([#713](https://github.com/gptme/gptme/issues/713)) ([`a9616f78`](https://github.com/gptme/gptme/commit/a9616f78))
 - fix: set disallowed_special=[] for encode in len_tokens ([`e6629375`](https://github.com/gptme/gptme/commit/e6629375))
 - fix: correct haiku pricing ([`8e986ea6`](https://github.com/gptme/gptme/commit/8e986ea6))
 - fix: fix metadata for haiku ([`9513741b`](https://github.com/gptme/gptme/commit/9513741b))
 - fix(anthropic): add timeout configuration to prevent indefinite hangs ([#701](https://github.com/gptme/gptme/issues/701)) ([`23fa89f3`](https://github.com/gptme/gptme/commit/23fa89f3))
 - fix(anthropic): handle status 529 overload errors ([#697](https://github.com/gptme/gptme/issues/697)) ([`5f851d10`](https://github.com/gptme/gptme/commit/5f851d10))
 - fix(complete): allow up to 2 auto-replies before exiting autonomous mode ([#696](https://github.com/gptme/gptme/issues/696)) ([`fd94f689`](https://github.com/gptme/gptme/commit/fd94f689))
 - fix(autocompact): prevent backup filename growth with repeated compactions ([#693](https://github.com/gptme/gptme/issues/693)) ([`ad7e1574`](https://github.com/gptme/gptme/commit/ad7e1574))
 - fix(tests): update remaining lesson tests to mock _get_lesson_index ([#694](https://github.com/gptme/gptme/issues/694)) ([`b1d3d775`](https://github.com/gptme/gptme/commit/b1d3d775))
 - fix(autocompact): reduce limits to avoid Anthropic token approximation errors ([`a382baaa`](https://github.com/gptme/gptme/commit/a382baaa))
 - fix(tests): replace tmp_path with tempfile to avoid pytest-retry KeyError ([`2825a9a5`](https://github.com/gptme/gptme/commit/2825a9a5))
 - fix(tests): update tests for lesson system changes ([`78743917`](https://github.com/gptme/gptme/commit/78743917))
 - fix(gh): poll original commit checks even if PR head updates ([`09f1622f`](https://github.com/gptme/gptme/commit/09f1622f))
 - fix(tests): update exception test to mock cached index getter ([`36b5b6a1`](https://github.com/gptme/gptme/commit/36b5b6a1))
 - fix(gh): add logging for check polling ([`c8494836`](https://github.com/gptme/gptme/commit/c8494836))
 - fix: extract tool name correctly from codeblock lang ([`fc874f30`](https://github.com/gptme/gptme/commit/fc874f30))
 - fix: cache lesson index per-thread to reduce log noise ([`bc3364c3`](https://github.com/gptme/gptme/commit/bc3364c3))
 - fix: prevent duplicate tool loading warnings in evals ([#690](https://github.com/gptme/gptme/issues/690)) ([`fa4e40a0`](https://github.com/gptme/gptme/commit/fa4e40a0))
 - fix: show full path in patch tool output ([`dc1c8458`](https://github.com/gptme/gptme/commit/dc1c8458))
 - fix(anthropic): set temperature/top_p only for models not supporting reasoning, even if thinking disabled (as if due to --tool-format tool) ([`9eb0c704`](https://github.com/gptme/gptme/commit/9eb0c704))
 - fix: remove emoji from OTLP log message ([`dc0ae258`](https://github.com/gptme/gptme/commit/dc0ae258))
 - fix: remove redundant log message ([`cc2262ee`](https://github.com/gptme/gptme/commit/cc2262ee))
 - fix: shortened telemetry startup log ([`4467046d`](https://github.com/gptme/gptme/commit/4467046d))
 - fix(ci): pin openai version in pre-commit mypy config ([#682](https://github.com/gptme/gptme/issues/682)) ([`565a3a3f`](https://github.com/gptme/gptme/commit/565a3a3f))
 - fix(telemetry): Strip http:// prefix from OTLP endpoint for gRPC ([`87985904`](https://github.com/gptme/gptme/commit/87985904))
 - fix(telemetry): switch to using OTLP for both metrics and traces ([#668](https://github.com/gptme/gptme/issues/668)) ([`0bf1839b`](https://github.com/gptme/gptme/commit/0bf1839b))
 - fix: improved prompting for complete tool ([#674](https://github.com/gptme/gptme/issues/674)) ([`5bfb8440`](https://github.com/gptme/gptme/commit/5bfb8440))
 - fix: fixes complete, autocommit, and pre-commit hooks ([#672](https://github.com/gptme/gptme/issues/672)) ([`ba81cb24`](https://github.com/gptme/gptme/commit/ba81cb24))
 - fix: fixes to CLI params with Click 8.3 ([#670](https://github.com/gptme/gptme/issues/670)) ([`718d5545`](https://github.com/gptme/gptme/commit/718d5545))
 - fix(config): always apply CLI defaults for stream and interactive ([`c1571069`](https://github.com/gptme/gptme/commit/c1571069))
 - fix: pass workspace and manager args to GENERATION_PRE hooks ([`f2818334`](https://github.com/gptme/gptme/commit/f2818334))
 - fix: use trigger_hook function to properly trigger hooks ([`5d84602d`](https://github.com/gptme/gptme/commit/5d84602d))
 - fix(complete): handle Log objects in complete_hook ([`1e4ff12f`](https://github.com/gptme/gptme/commit/1e4ff12f))
 - fix(autocompact): handle Log objects in hook ([`bc64b55d`](https://github.com/gptme/gptme/commit/bc64b55d))
 - fix(complete): stop session immediately after complete tool ([`be0282b8`](https://github.com/gptme/gptme/commit/be0282b8))
 - fix: prevent infinite loop when hooks fail ([`06081068`](https://github.com/gptme/gptme/commit/06081068))
 - fix: reduce verbosity in hook error logging ([`67aa156b`](https://github.com/gptme/gptme/commit/67aa156b))
 - fix(shell): prevent editors from breaking terminal state ([`8f5b436b`](https://github.com/gptme/gptme/commit/8f5b436b))
 - fix: prevent cache_control on empty text blocks in Anthropic API ([#653](https://github.com/gptme/gptme/issues/653)) ([`e19f4fd8`](https://github.com/gptme/gptme/commit/e19f4fd8))
 - fix: improved complete tool detection in chat loop ([`2645dab6`](https://github.com/gptme/gptme/commit/2645dab6))
 - fix: increase number of past conversation summaries in system prompt to 5 ([`d151017f`](https://github.com/gptme/gptme/commit/d151017f))
 - fix: handle nested code blocks in patch blocks correctly ([`42cff496`](https://github.com/gptme/gptme/commit/42cff496))
 - fix: add version header and correct heading levels in release notes ([`51c4066b`](https://github.com/gptme/gptme/commit/51c4066b))

</p>
</details>

### 🔨 Misc (42)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.29.0 ([`556b0621`](https://github.com/gptme/gptme/commit/556b0621))
 - test: added xfail tests for patch with relaxed matching for whitespace-only lines ([`7f813225`](https://github.com/gptme/gptme/commit/7f813225))
 - refactor: enable ruff import sorting and sort all imports ([`3dbd45bd`](https://github.com/gptme/gptme/commit/3dbd45bd))
 - test: fix token_awareness tests to handle threshold-based warnings ([`8d5a40c3`](https://github.com/gptme/gptme/commit/8d5a40c3))
 - chore: add worktree/ to gitignore ([`899d94dd`](https://github.com/gptme/gptme/commit/899d94dd))
 - refactor: simplify and improve typing of hook signatures ([#765](https://github.com/gptme/gptme/issues/765)) ([`e003b285`](https://github.com/gptme/gptme/commit/e003b285))
 - test: mark flaky test with xfail ([`a52a846b`](https://github.com/gptme/gptme/commit/a52a846b))
 - docs: add nitpick ignore for failing targets ([`819ad518`](https://github.com/gptme/gptme/commit/819ad518))
 - refactor: use manager.workspace instead of threading workspace parameter ([`c90f55d4`](https://github.com/gptme/gptme/commit/c90f55d4))
 - test: added xfail shell test ([`3d4da112`](https://github.com/gptme/gptme/commit/3d4da112))
 - test: fixed missing parameter in test ([`38b0bc8e`](https://github.com/gptme/gptme/commit/38b0bc8e))
 - refactor(cli): move auto-naming from logmanager to chat.py ([#757](https://github.com/gptme/gptme/issues/757)) ([`bf2fae75`](https://github.com/gptme/gptme/commit/bf2fae75))
 - tests: remove flaky/slow/stalling test ([`5dd354d7`](https://github.com/gptme/gptme/commit/5dd354d7))
 - docs: fixed docstring formatting ([`9dc9cdf2`](https://github.com/gptme/gptme/commit/9dc9cdf2))
 - docs: complete /edit command demo documentation ([#734](https://github.com/gptme/gptme/issues/734)) ([`d66e76e7`](https://github.com/gptme/gptme/commit/d66e76e7))
 - test(codeblock): add streaming mode variants for header+backticks tests ([#721](https://github.com/gptme/gptme/issues/721)) ([`8bc29a4b`](https://github.com/gptme/gptme/commit/8bc29a4b))
 - tests: adjust allowed prompt sizes with buffer in non-CI environments ([`b2ccf215`](https://github.com/gptme/gptme/commit/b2ccf215))
 - tests: fix tests to check for response type ([`48a3eaae`](https://github.com/gptme/gptme/commit/48a3eaae))
 - test(codeblock): remove xfail markers from passing header tests ([#718](https://github.com/gptme/gptme/issues/718)) ([`320cc4b8`](https://github.com/gptme/gptme/commit/320cc4b8))
 - tests: comment out bad assert ([`4777e9d5`](https://github.com/gptme/gptme/commit/4777e9d5))
 - docs(alternatives): add Hosting and Funding columns to comparison table ([#698](https://github.com/gptme/gptme/issues/698)) ([`f22195f5`](https://github.com/gptme/gptme/commit/f22195f5))
 - test(codeblock): add edge case tests for nested markdown blocks ([#704](https://github.com/gptme/gptme/issues/704)) ([`36646f93`](https://github.com/gptme/gptme/commit/36646f93))
 - docs: suggest `uv tool install` as pipx alternative ([`23f9b2c5`](https://github.com/gptme/gptme/commit/23f9b2c5))
 - revert: restore tmp_path in setup_conversation fixture ([`2e5fdd35`](https://github.com/gptme/gptme/commit/2e5fdd35))
 - docs: simplified python lesson ([`b16580bd`](https://github.com/gptme/gptme/commit/b16580bd))
 - docs(lessons): add uv shebang for directly executable scripts ([`5aa47af6`](https://github.com/gptme/gptme/commit/5aa47af6))
 - docs(lessons): rewrite Python lesson with practical gptme-specific guidance ([`af96ecc8`](https://github.com/gptme/gptme/commit/af96ecc8))
 - refactor(gh): extract common check fetching logic and address review comments ([`e7d9acc7`](https://github.com/gptme/gptme/commit/e7d9acc7))
 - docs: exclude lessons from Sphinx build ([`7119fb4c`](https://github.com/gptme/gptme/commit/7119fb4c))
 - docs: add example lessons for testing lesson system ([`fc54397d`](https://github.com/gptme/gptme/commit/fc54397d))
 - docs: improve server docs, mention gptme.ai ([`1850de88`](https://github.com/gptme/gptme/commit/1850de88))
 - docs: comprehensive streaming bug investigation report ([`2ad5d258`](https://github.com/gptme/gptme/commit/2ad5d258))
 - Revert "fix(config): always apply CLI defaults for stream and interactive" ([`001afd13`](https://github.com/gptme/gptme/commit/001afd13))
 - debug: add logging to complete_hook for diagnosis ([`e7b2e40e`](https://github.com/gptme/gptme/commit/e7b2e40e))
 - refactor: consolidate auto-compact/precommit functionality into tools ([#666](https://github.com/gptme/gptme/issues/666)) ([`8c12b806`](https://github.com/gptme/gptme/commit/8c12b806))
 - docs(shell): move timeout config from agent instructions to module docstring ([#662](https://github.com/gptme/gptme/issues/662)) ([`fabdf981`](https://github.com/gptme/gptme/commit/fabdf981))
 - test: document actual behavior of ambiguous bare backticks ([`3e7841bc`](https://github.com/gptme/gptme/commit/3e7841bc))
 - test: add comprehensive nested codeblock tests ([`42df7d90`](https://github.com/gptme/gptme/commit/42df7d90))
 - chore: remove build_changelog.py, now available upstream ([`22a316dd`](https://github.com/gptme/gptme/commit/22a316dd))
 - refactor: simplify version header logic in build_changelog.py ([`4e24c182`](https://github.com/gptme/gptme/commit/4e24c182))
 - docs: fixed changelog index ([`e7b276b0`](https://github.com/gptme/gptme/commit/e7b276b0))
 - chore: improve changelog version detection and update contributors ([`6e200052`](https://github.com/gptme/gptme/commit/6e200052))

</p>
</details>

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.28.3...v0.29.0


# v0.28.3

These are the release notes for gptme version v0.28.3.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare, @TimeToBuildBob

## Changelog

Changes since v0.28.2:


## 📦 gptme

### ✨ Features (2)

 - feat: improve save tool feedback with detailed status ([`d920ae5e`](https://github.com/gptme/gptme/commit/d920ae5e))
 - feat: add git safety guards to shell tool ([`fc78a042`](https://github.com/gptme/gptme/commit/fc78a042))

### 🐛 Fixes (7)
<details><summary>Click to expand</summary>
<p>

 - fix: update CI anthropic model to claude-3-5-haiku ([`28d9367c`](https://github.com/gptme/gptme/commit/28d9367c))
 - fix(shell): denylist should not trigger on content in quoted strings or heredocs ([`0ce788a2`](https://github.com/gptme/gptme/commit/0ce788a2))
 - fix(shell): improve denylist patterns for git commands ([`5e6bdc97`](https://github.com/gptme/gptme/commit/5e6bdc97))
 - fix: prevent premature code block closure during streaming with nested blocks ([#657](https://github.com/gptme/gptme/issues/657)) ([`55fedb76`](https://github.com/gptme/gptme/commit/55fedb76))
 - fix: change default/recommended model to Sonnet 4.5 ([`21de08ce`](https://github.com/gptme/gptme/commit/21de08ce))
 - fix: use dateutil.parser.isoparse for all datetime parsing ([`f6f3de5e`](https://github.com/gptme/gptme/commit/f6f3de5e))
 - fix: use dateutil.parser.isoparse instead of datetime.fromisoformat ([`934384dc`](https://github.com/gptme/gptme/commit/934384dc))

</p>
</details>

### 🔨 Misc (5)

 - chore: bump version to 0.28.3 ([`d22ff504`](https://github.com/gptme/gptme/commit/d22ff504))
 - docs: fixed v0.1.1 release notes ([`00ed0ece`](https://github.com/gptme/gptme/commit/00ed0ece))
 - docs: included all past changelogs ([`6d407047`](https://github.com/gptme/gptme/commit/6d407047))
 - docs: improve chat history prompt format ([`6fbd9db8`](https://github.com/gptme/gptme/commit/6fbd9db8))
 - docs: added release notes for v0.28.2 ([`481a07ff`](https://github.com/gptme/gptme/commit/481a07ff))

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.28.2...v0.28.3))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.28.2...v0.28.3


# v0.28.2

These are the release notes for gptme version v0.28.2.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.28.1:


## 📦 gptme

### ✨ Features (3)

 - feat: add dry-run mode for DSPy optimization commands ([`bd8861c5`](https://github.com/gptme/gptme/commit/bd8861c5))
 - feat: add dedicated gptme-dspy command entry point ([`4c400d9f`](https://github.com/gptme/gptme/commit/4c400d9f))
 - feat: GEPA in DSPy ([#651](https://github.com/gptme/gptme/issues/651)) ([`014121ce`](https://github.com/gptme/gptme/commit/014121ce))

### 🐛 Fixes (5)

 - fix: add support for sonnet 4.5 ([`991e8ac0`](https://github.com/gptme/gptme/commit/991e8ac0))
 - fix: fixes to proxy openrouter support ([`7f4e7bf7`](https://github.com/gptme/gptme/commit/7f4e7bf7))
 - fix(llm): respect LLM_PROXY_URL for OpenRouter models endpoint ([`17b903c9`](https://github.com/gptme/gptme/commit/17b903c9))
 - fix: make num_trials parameter actually control DSPy optimizers and add CLI options for dataset sizes ([`c447ed5c`](https://github.com/gptme/gptme/commit/c447ed5c))
 - fix: improvements to evals/dspy/gepa ([#652](https://github.com/gptme/gptme/issues/652)) ([`a1a17ea5`](https://github.com/gptme/gptme/commit/a1a17ea5))

### 🔨 Misc (5)

 - chore: bump version to 0.28.2 ([`3b7d5fc5`](https://github.com/gptme/gptme/commit/3b7d5fc5))
 - refactor: split GEPA into separate optimize-gepa subcommand with proper budget configuration ([`67588b16`](https://github.com/gptme/gptme/commit/67588b16))
 - docs: added release notes to index ([`4229c49a`](https://github.com/gptme/gptme/commit/4229c49a))
 - docs: added release notes for v0.28.1 ([`9836de12`](https://github.com/gptme/gptme/commit/9836de12))
 - chore: updated changelog_contributors.csv cache ([`41f40093`](https://github.com/gptme/gptme/commit/41f40093))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.28.1...v0.28.2


# v0.28.1

These are the release notes for gptme version v0.28.1.

## Contributors

Thanks to everyone who contributed to this release:

@delorenj, @erikbjare

## Changelog

Changes since v0.28.0:


## 📦 gptme

### ✨ Features (14)

 - feat: add denylist for dangerous shell commands with specific deny reasons ([#648](https://github.com/gptme/gptme/issues/648)) ([`5b977846`](https://github.com/gptme/gptme/commit/5b977846))
 - feat: implement get_model TODO and fix critical telemetry bug ([#647](https://github.com/gptme/gptme/issues/647)) ([`9c05ac26`](https://github.com/gptme/gptme/commit/9c05ac26))
 - feat: add trajectory-rich tasks for GEPA optimization ([#640](https://github.com/gptme/gptme/issues/640)) ([`962bdf3c`](https://github.com/gptme/gptme/commit/962bdf3c))
 - feat: add user-level files support in config ([#639](https://github.com/gptme/gptme/issues/639)) ([`fb3bbfb7`](https://github.com/gptme/gptme/commit/fb3bbfb7))
 - feat: add HTTP MCP Server Support + CLI Management Tools ([#635](https://github.com/gptme/gptme/issues/635)) ([`0a4ef349`](https://github.com/gptme/gptme/commit/0a4ef349))
 - feat: added cross-conversation context ([#636](https://github.com/gptme/gptme/issues/636)) ([`54f289ec`](https://github.com/gptme/gptme/commit/54f289ec))
 - feat: add cache-aware cost calculation, use in telemetry ([#631](https://github.com/gptme/gptme/issues/631)) ([`b3cd6e07`](https://github.com/gptme/gptme/commit/b3cd6e07))
 - feat: dspy experiment ([#627](https://github.com/gptme/gptme/issues/627)) ([`fb61ddda`](https://github.com/gptme/gptme/commit/fb61ddda))
 - feat: filter out resolved comments from GitHub PR content ([`d612a355`](https://github.com/gptme/gptme/commit/d612a355))
 - feat: add GitHub Actions status to PR content fetching ([`947700de`](https://github.com/gptme/gptme/commit/947700de))
 - feat: add auto-naming for conversations in server API ([#621](https://github.com/gptme/gptme/issues/621)) ([`cfce2bc8`](https://github.com/gptme/gptme/commit/cfce2bc8))
 - feat: add todo tools for conversation-scoped task management ([#622](https://github.com/gptme/gptme/issues/622)) ([`ce3bfe72`](https://github.com/gptme/gptme/commit/ce3bfe72))
 - feat: include pwd and agent workspace path in system prompt ([`b38e06d0`](https://github.com/gptme/gptme/commit/b38e06d0))
 - feat: add GitHub issue/PR link handling in context ([#619](https://github.com/gptme/gptme/issues/619)) ([`f79e2428`](https://github.com/gptme/gptme/commit/f79e2428))

### 🐛 Fixes (25)
<details><summary>Click to expand</summary>
<p>

 - fix(api): support auto-generating agent path from name ([#646](https://github.com/gptme/gptme/issues/646)) ([`62534a95`](https://github.com/gptme/gptme/commit/62534a95))
 - fix: propagate agent logdir from subprocess in DSPy evaluations ([#643](https://github.com/gptme/gptme/issues/643)) ([`d6c9fc69`](https://github.com/gptme/gptme/commit/d6c9fc69))
 - fix(eval): fix DSPy integration to use real evaluation specs ([#630](https://github.com/gptme/gptme/issues/630)) ([`fa48bb34`](https://github.com/gptme/gptme/commit/fa48bb34))
 - fix: added qwen3-max metadata ([`a471d1de`](https://github.com/gptme/gptme/commit/a471d1de))
 - fix: add initial support for magistral models ([`59dce119`](https://github.com/gptme/gptme/commit/59dce119))
 - fix: fixes on top of HTTP MCP server support ([#637](https://github.com/gptme/gptme/issues/637)) ([`21dc660a`](https://github.com/gptme/gptme/commit/21dc660a))
 - fix: switch to sonar-pro by default for perplexity ([`d9e99aef`](https://github.com/gptme/gptme/commit/d9e99aef))
 - fix: extract env vars to constants ([`0eb0c9b0`](https://github.com/gptme/gptme/commit/0eb0c9b0))
 - fix: improve todo tool, support writing multiple tasks in one tool call ([`61727b43`](https://github.com/gptme/gptme/commit/61727b43))
 - fix: correct optimizers parameter format in workflow ([`9c565269`](https://github.com/gptme/gptme/commit/9c565269))
 - fix: handle models that dont support vision, stricter openrouter provider selection, fixes to deepseek & kimi-k2 ([`1c18c3fa`](https://github.com/gptme/gptme/commit/1c18c3fa))
 - fix: added chime to generate_sounds script ([`fe24000f`](https://github.com/gptme/gptme/commit/fe24000f))
 - fix: misc fixes ([#626](https://github.com/gptme/gptme/issues/626)) ([`ff0b6c74`](https://github.com/gptme/gptme/commit/ff0b6c74))
 - fix: catch exception if image file cannot be read ([`8165857c`](https://github.com/gptme/gptme/commit/8165857c))
 - fix: update provider examples ([`faf56f60`](https://github.com/gptme/gptme/commit/faf56f60))
 - fix: move GitHub Actions status to end of PR content ([`174cc409`](https://github.com/gptme/gptme/commit/174cc409))
 - fix: make morph tool work with all tool formats (fixes [#603](https://github.com/gptme/gptme/issues/603)) ([`181a5fca`](https://github.com/gptme/gptme/commit/181a5fca))
 - fix: better tree output ([#624](https://github.com/gptme/gptme/issues/624)) ([`6782d81a`](https://github.com/gptme/gptme/commit/6782d81a))
 - fix: fixed todo tools ([`daf128aa`](https://github.com/gptme/gptme/commit/daf128aa))
 - fix: add browser resilience with auto-restart and retry mechanism ([`26c93942`](https://github.com/gptme/gptme/commit/26c93942))
 - fix: include starting working directory and use absolute paths in system prompt ([`204d09d2`](https://github.com/gptme/gptme/commit/204d09d2))
 - fix(server): fix setting initial working directory from workspace ([`03aa619e`](https://github.com/gptme/gptme/commit/03aa619e))
 - fix: use "Initial Working Directory" instead of "Current Directory" ([`c6cbc272`](https://github.com/gptme/gptme/commit/c6cbc272))
 - fix: exclude untracked files from autocommit status check ([`da5fb7f5`](https://github.com/gptme/gptme/commit/da5fb7f5))
 - fix: resolve audio blocking and ALSA/PulseAudio timeout issues ([#620](https://github.com/gptme/gptme/issues/620)) ([`d6703e85`](https://github.com/gptme/gptme/commit/d6703e85))

</p>
</details>

### 🔨 Misc (13)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.28.1 ([`dae71fc5`](https://github.com/gptme/gptme/commit/dae71fc5))
 - test: fix todo tool test expectations to match implementation ([`e9ff2efc`](https://github.com/gptme/gptme/commit/e9ff2efc))
 - docs: fixed incorrect example ([`1aaad3d0`](https://github.com/gptme/gptme/commit/1aaad3d0))
 - chore: comment out excessive debug logging ([`65f68e23`](https://github.com/gptme/gptme/commit/65f68e23))
 - refactor: improve ask_execute variable naming and imports ([`471ad1b5`](https://github.com/gptme/gptme/commit/471ad1b5))
 - docs: clarify gptme description and improve usage examples ([`f606ccd2`](https://github.com/gptme/gptme/commit/f606ccd2))
 - docs: fix outdated model reference ([`d7a06264`](https://github.com/gptme/gptme/commit/d7a06264))
 - chore: fix gitignore ([`8e262818`](https://github.com/gptme/gptme/commit/8e262818))
 - docs: fix docs for changelog/release notes ([#623](https://github.com/gptme/gptme/issues/623)) ([`8c6caf5f`](https://github.com/gptme/gptme/commit/8c6caf5f))
 - docs: create changelogs for tagged versions in ./docs/changelog using make target ([`4f69ef2e`](https://github.com/gptme/gptme/commit/4f69ef2e))
 - docs: update project description to emphasize modern agent capabilities ([`37a179a1`](https://github.com/gptme/gptme/commit/37a179a1))
 - Improve tree output and autocommit functionality ([`a6008fc2`](https://github.com/gptme/gptme/commit/a6008fc2))
 - chore: updated changelog_contributors.csv cache ([`f045f329`](https://github.com/gptme/gptme/commit/f045f329))

</p>
</details>

*(excluded 8 less relevant [commits](https://github.com/gptme/gptme/compare/v0.28.0...v0.28.1))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.28.0...v0.28.1


# v0.28.0

These are the release notes for gptme version v0.28.0.

## Contributors

Thanks to everyone who contributed to this release:

@0xbrayo, @erikbjare, @Miyou, @RickardCarlsson4

## Changelog

Changes since v0.27.0:

## Summary

This is a **major feature release** packed with exciting improvements! 🎉

**🚀 Major New Capabilities:**
- **GPT-5 Support** - Works with OpenAI's latest model
- **Claude 4 Support** - Works with Anthropic's latest model
- **Bell and Tool Sounds** 🔊 - Pleasant notification sounds for user input requested and different operations (enable via `/setup` or `GPTME_DING`/`GPTME_TOOL_SOUNDS` env vars)
- **Perplexity Search** 🔍 - Enhanced web search capabilities through the browser tool
- **MCP Integration** 🔌 - Support for Model Context Protocol servers, expanding tool ecosystem

**🤖 Agent & Automation Enhancements:**
- **Setup Command** ⚙️ - Easy configuration with `/setup`
- **Auto-commit** - Automatically tell agent to git commit, or do it manually with `/commit`
- **Agent Workspace Auto-detection** - Smarter handling of agent environments
- **Choice Tool** - Interactive decision-making capabilities

**🛠 Developer Experience:**
- **Shell Timeouts** ⏱️ - Configurable command timeouts (set `GPTME_SHELL_TIMEOUT`)
- **Morph Tool** ✨ - Alternative fast patching tool for precise code edits
- **Computer Tool Improvements** 💻 - Better key sequence chaining for GUI automation
- **Enhanced TTS** 🗣️ - Improved text-to-speech with Chatterbox support

**🌐 Server & API:**
- **Redesigned Server API** - Complete API overhaul for better web UI integration
- **Tasks API** - New task management capabilities
- **OpenAPI Specification** - Comprehensive API documentation

**🔧 Quality of Life:**
- **90+ Bug Fixes** - Significantly improved stability and reliability
- **Better Configuration** - Enhanced config system with user-, project-, and chat-specific settings
- **Improved Error Handling** - More user-friendly error messages and recovery

## 📦 gptme

### ✨ Features (39)

 - feat: enhance telemetry with Prometheus metrics and comprehensive instrumentation ([#592](https://github.com/gptme/gptme/issues/592)) ([`a73f60b0`](https://github.com/gptme/gptme/commit/a73f60b0))
 - feat: improve eval system and fix tool format content extraction ([#618](https://github.com/gptme/gptme/issues/618)) ([`099c80b4`](https://github.com/gptme/gptme/commit/099c80b4))
 - feat: add GPT-5 support ([`4ff6d5c9`](https://github.com/gptme/gptme/commit/4ff6d5c9))
 - feat: add timeout support to shell tool ([`06d85f94`](https://github.com/gptme/gptme/commit/06d85f94))
 - feat: add last/all option to /replay command ([`ec4bec77`](https://github.com/gptme/gptme/commit/ec4bec77))
 - feat: added /api/v2/models endpoint ([#612](https://github.com/gptme/gptme/issues/612)) ([`b08f64e0`](https://github.com/gptme/gptme/commit/b08f64e0))
 - feat: add tool sounds for different operations ([#597](https://github.com/gptme/gptme/issues/597)) ([`ce6f50a2`](https://github.com/gptme/gptme/commit/ce6f50a2))
 - feat: add Perplexity search support to browser tool ([#566](https://github.com/gptme/gptme/issues/566)) ([`c91c9d18`](https://github.com/gptme/gptme/commit/c91c9d18))
 - feat: implemented choice tool ([#598](https://github.com/gptme/gptme/issues/598)) ([`07b602ee`](https://github.com/gptme/gptme/commit/07b602ee))
 - feat: add /setup command for user and project configuration ([#596](https://github.com/gptme/gptme/issues/596)) ([`2379e665`](https://github.com/gptme/gptme/commit/2379e665))
 - feat: add ding sound notification with bell audio ([#588](https://github.com/gptme/gptme/issues/588)) ([`6096474b`](https://github.com/gptme/gptme/commit/6096474b))
 - feat: add OpenTelemetry integration for performance monitoring ([#587](https://github.com/gptme/gptme/issues/587)) ([`41ab4283`](https://github.com/gptme/gptme/commit/41ab4283))
 - feat: add support for custom agent names in CLI/TUI interface ([`658fd3d6`](https://github.com/gptme/gptme/commit/658fd3d6))
 - feat: auto-detect agent workspaces ([`420d3072`](https://github.com/gptme/gptme/commit/420d3072))
 - feat: added support for --agent-path in CLI, include agent context in addition to workspace context ([`c40477e0`](https://github.com/gptme/gptme/commit/c40477e0))
 - feat: implement auto-commit ([#441](https://github.com/gptme/gptme/issues/441)) ([`cf0ed1c5`](https://github.com/gptme/gptme/commit/cf0ed1c5))
 - feat: support the openrouter /v1/models api to list all models with metadata ([#575](https://github.com/gptme/gptme/issues/575)) ([`88df6238`](https://github.com/gptme/gptme/commit/88df6238))
 - feat: added alternate patch tool using morph fast apply v2 via openro… ([#574](https://github.com/gptme/gptme/issues/574)) ([`23258e0b`](https://github.com/gptme/gptme/commit/23258e0b))
 - feat: add support for a GPTME_REASONING flag to explicitly enable/disable reasoning ([#568](https://github.com/gptme/gptme/issues/568)) ([`df0e0ca7`](https://github.com/gptme/gptme/commit/df0e0ca7))
 - feat: add automatic inclusion of default project files ([#565](https://github.com/gptme/gptme/issues/565)) ([`ac05da57`](https://github.com/gptme/gptme/commit/ac05da57))
 - feat: add chatterbox tts support ([#541](https://github.com/gptme/gptme/issues/541)) ([`84151f97`](https://github.com/gptme/gptme/commit/84151f97))
 - feat: openapi spec for server ([#563](https://github.com/gptme/gptme/issues/563)) ([`62bd55d6`](https://github.com/gptme/gptme/commit/62bd55d6))
 - feat: add tasks API for new tasks UI in gptme-webui ([#562](https://github.com/gptme/gptme/issues/562)) ([`6807d484`](https://github.com/gptme/gptme/commit/6807d484))
 - feat: added 'worked for `<time>`' output behind feature flag (due to issues) ([`ce78dda1`](https://github.com/gptme/gptme/commit/ce78dda1))
 - feat: added read_logs function to browser tool (playwright backend) ([#553](https://github.com/gptme/gptme/issues/553)) ([`9291e000`](https://github.com/gptme/gptme/commit/9291e000))
 - feat: add gptme-util models list/info commands with fish completion ([`82c551f7`](https://github.com/gptme/gptme/commit/82c551f7))
 - feat: add support for setting chat name in chat config ([#549](https://github.com/gptme/gptme/issues/549)) ([`5c30f5df`](https://github.com/gptme/gptme/commit/5c30f5df))
 - feat: added `gptme-util llm generate` command, rework `gptme-util context` ([#535](https://github.com/gptme/gptme/issues/535)) ([`87832050`](https://github.com/gptme/gptme/commit/87832050))
 - feat: added basic workspace file browsing api ([#530](https://github.com/gptme/gptme/issues/530)) ([`0ab8abf9`](https://github.com/gptme/gptme/commit/0ab8abf9))
 - feat: set enable_suspend (Ctrl+Z) and enable_open_in_editor (Ctrl-X Ctrl-E) for prompt (fixes [#525](https://github.com/gptme/gptme/issues/525)) ([#526](https://github.com/gptme/gptme/issues/526)) ([`ef33c190`](https://github.com/gptme/gptme/commit/ef33c190))
 - feat: add api_conversation_delete ([#519](https://github.com/gptme/gptme/issues/519)) ([`4fb3561b`](https://github.com/gptme/gptme/commit/4fb3561b))
 - feat: support ChatConfig in server and CLI ([#504](https://github.com/gptme/gptme/issues/504)) ([`0266e350`](https://github.com/gptme/gptme/commit/0266e350))
 - feat: added support for context_cmd project config ([#511](https://github.com/gptme/gptme/issues/511)) ([`8805aa28`](https://github.com/gptme/gptme/commit/8805aa28))
 - feat: added ChatConfig, refactored config, support overriding values ([#500](https://github.com/gptme/gptme/issues/500)) ([`fc6497c9`](https://github.com/gptme/gptme/commit/fc6497c9))
 - feat: added support for MCP server tools ([#486](https://github.com/gptme/gptme/issues/486)) ([`c43f10a6`](https://github.com/gptme/gptme/commit/c43f10a6))
 - feat: redesigned server API ([#469](https://github.com/gptme/gptme/issues/469)) ([`d8f4fc4a`](https://github.com/gptme/gptme/commit/d8f4fc4a))
 - feat: enhance computer tool with key sequence chaining for both macOS and Linux ([#479](https://github.com/gptme/gptme/issues/479)) ([`9f05e048`](https://github.com/gptme/gptme/commit/9f05e048))
 - feat: support entering newlines with Ctrl+J ([#464](https://github.com/gptme/gptme/issues/464)) ([`9204f1ab`](https://github.com/gptme/gptme/commit/9204f1ab))
 - feat: support LLM_PROXY_URL and LLM_PROXY_API_KEY (fixes [#470](https://github.com/gptme/gptme/issues/470)) ([#471](https://github.com/gptme/gptme/issues/471)) ([`1f2bd182`](https://github.com/gptme/gptme/commit/1f2bd182))

### 🐛 Fixes (90)
<details><summary>Click to expand</summary>
<p>

 - fix: use correct max_tokens for Anthropic models ([`b78bd34e`](https://github.com/gptme/gptme/commit/b78bd34e))
 - fix: unify thinking budget configuration in Anthropic LLM ([`f96f610f`](https://github.com/gptme/gptme/commit/f96f610f))
 - fix: updated metadata for gpt-5-mini and gpt-5-nano ([`72527978`](https://github.com/gptme/gptme/commit/72527978))
 - fix: updated metadata for opus 4/4.1 and sonnet 4 ([`0a5bd991`](https://github.com/gptme/gptme/commit/0a5bd991))
 - fix: add permissions to GitHub Actions eval workflow ([`92b6818d`](https://github.com/gptme/gptme/commit/92b6818d))
 - fix: add system dependencies for PyInstaller builds on Ubuntu ([`5a91a44d`](https://github.com/gptme/gptme/commit/5a91a44d))
 - fix: resolve _struct module error in PyInstaller build ([`dc4743db`](https://github.com/gptme/gptme/commit/dc4743db))
 - fix: support quoted heredoc delimiters with spaces and consolidate shell tests ([`9d2ff5e1`](https://github.com/gptme/gptme/commit/9d2ff5e1))
 - fix: switch to morph-v3-fast (morph-v2 deprecated) ([`051cdfcb`](https://github.com/gptme/gptme/commit/051cdfcb))
 - fix: fix /fork incorrectly recursively copying workspace directory ([`2db544f5`](https://github.com/gptme/gptme/commit/2db544f5))
 - fix: fixed bad syntax in dockerfile ([`52aacddd`](https://github.com/gptme/gptme/commit/52aacddd))
 - fix: add tree to gptme Dockerfile ([`5fcd296e`](https://github.com/gptme/gptme/commit/5fcd296e))
 - fix: set git config for gptme container so it can make commits ([`9f4cdcc7`](https://github.com/gptme/gptme/commit/9f4cdcc7))
 - fix: pass provider prefix when using LLM proxy ([`833a236d`](https://github.com/gptme/gptme/commit/833a236d))
 - fix: remove outdated print message ([`06dd8b53`](https://github.com/gptme/gptme/commit/06dd8b53))
 - fix: minor improvement to instructions for RAG tool ([`61853abf`](https://github.com/gptme/gptme/commit/61853abf))
 - fix: fixed running nested gptme sessions with shell tool waiting for piped stdin by redirecting stdin to /dev/null ([#604](https://github.com/gptme/gptme/issues/604)) ([`97110820`](https://github.com/gptme/gptme/commit/97110820))
 - fix: moved sound media ([`31f54127`](https://github.com/gptme/gptme/commit/31f54127))
 - fix: validate CLI tool arguments and provide clear error messages ([#600](https://github.com/gptme/gptme/issues/600)) ([`e7df4f5c`](https://github.com/gptme/gptme/commit/e7df4f5c))
 - fix: respect saved conversation config when resuming ([#595](https://github.com/gptme/gptme/issues/595)) ([`1d78ca30`](https://github.com/gptme/gptme/commit/1d78ca30))
 - fix: minor formatting fix in shell tool response to removing excessive newline ([`b03ec16b`](https://github.com/gptme/gptme/commit/b03ec16b))
 - fix: resolve OpenAPI validation errors with undefined dict schema ([`dcd05f9e`](https://github.com/gptme/gptme/commit/dcd05f9e))
 - fix: fix failing eval tests by correctly looking up agent name ([`6210bba6`](https://github.com/gptme/gptme/commit/6210bba6))
 - fix: complete tuple return type refactoring for precommit checks ([`8c98f140`](https://github.com/gptme/gptme/commit/8c98f140))
 - fix: fix rich console log formatting ([`be666183`](https://github.com/gptme/gptme/commit/be666183))
 - fix: workaround for incorrect pwd in new chats ([`daae7754`](https://github.com/gptme/gptme/commit/daae7754))
 - fix: disambiguate agent path and workspace ([`e4698c09`](https://github.com/gptme/gptme/commit/e4698c09))
 - fix: use shlex.split() for proper shell command parsing in agent creation ([`04931116`](https://github.com/gptme/gptme/commit/04931116))
 - fix: bad rebase ([`1e92afa5`](https://github.com/gptme/gptme/commit/1e92afa5))
 - fix: separate agent path and workspace ([`f21077f0`](https://github.com/gptme/gptme/commit/f21077f0))
 - fix: strip thinking when checking markdown for codeblocks ([#579](https://github.com/gptme/gptme/issues/579)) ([`b1c22f1f`](https://github.com/gptme/gptme/commit/b1c22f1f))
 - fix: morph should fail to apply if file changed since patch generated (edits before confirmation) ([#578](https://github.com/gptme/gptme/issues/578)) ([`2faa01f8`](https://github.com/gptme/gptme/commit/2faa01f8))
 - fix: improved mcp tool confirmation preview ([#577](https://github.com/gptme/gptme/issues/577)) ([`28c17214`](https://github.com/gptme/gptme/commit/28c17214))
 - fix: improvements to morph tool, better checks for valid results and output diff in response ([`c899e789`](https://github.com/gptme/gptme/commit/c899e789))
 - fix: update default models and add more gemini models ([`4835fdbf`](https://github.com/gptme/gptme/commit/4835fdbf))
 - fix: improve support for nested markdown codeblocks in markdown tool format ([#571](https://github.com/gptme/gptme/issues/571)) ([`d5b82d71`](https://github.com/gptme/gptme/commit/d5b82d71))
 - fix: add AGENTS.md to default context files ([`2a2a3ee0`](https://github.com/gptme/gptme/commit/2a2a3ee0))
 - fix: fix default `serve` command for gptme-server using click-default-group ([`ca5578a9`](https://github.com/gptme/gptme/commit/ca5578a9))
 - fix: improve id naming convention for new task conversations ([`0652c7e6`](https://github.com/gptme/gptme/commit/0652c7e6))
 - fix: move workspace prompt to get_prompt ([#521](https://github.com/gptme/gptme/issues/521)) ([`f0ab6faf`](https://github.com/gptme/gptme/commit/f0ab6faf))
 - fix: support heredocs with quoted delimiters in shell tool ([#558](https://github.com/gptme/gptme/issues/558)) ([`df09d8a1`](https://github.com/gptme/gptme/commit/df09d8a1))
 - fix: made assistant prompt name and color settable via env vars ([`315cec9d`](https://github.com/gptme/gptme/commit/315cec9d))
 - fix: improve shell command interrupt handling with partial output capture ([#556](https://github.com/gptme/gptme/issues/556)) ([`d5e89b6d`](https://github.com/gptme/gptme/commit/d5e89b6d))
 - fix: streamline gptme-util subcommands to all use list instead of ls ([`d6ef0b5e`](https://github.com/gptme/gptme/commit/d6ef0b5e))
 - fix: improve how tildes are handled in workspace paths (store/expose with tildes, process without) ([`bde855f2`](https://github.com/gptme/gptme/commit/bde855f2))
 - fix: resolve workspace path before saving config ([`63c00411`](https://github.com/gptme/gptme/commit/63c00411))
 - fix: include conversation workspace metadata in api ([#551](https://github.com/gptme/gptme/issues/551)) ([`ae7013c6`](https://github.com/gptme/gptme/commit/ae7013c6))
 - fix: fixed server tests ([`aaf80fdf`](https://github.com/gptme/gptme/commit/aaf80fdf))
 - fix: improvements to server ([#547](https://github.com/gptme/gptme/issues/547)) ([`077aa878`](https://github.com/gptme/gptme/commit/077aa878))
 - fix: fix config loading from cli params and env ([#545](https://github.com/gptme/gptme/issues/545)) ([`0d5a46d0`](https://github.com/gptme/gptme/commit/0d5a46d0))
 - fix: delay tts availability checks to tool init ([#543](https://github.com/gptme/gptme/issues/543)) ([`40ca7475`](https://github.com/gptme/gptme/commit/40ca7475))
 - fix: check if pre-commit executable exists before enabling checks ([`239c1a83`](https://github.com/gptme/gptme/commit/239c1a83))
 - fix: better support for reasoning via openrouter ([#538](https://github.com/gptme/gptme/issues/538)) ([`f8f1de95`](https://github.com/gptme/gptme/commit/f8f1de95))
 - fix: added support for TEMPERATURE and TOP_P environment variables ([`9c944e62`](https://github.com/gptme/gptme/commit/9c944e62))
 - fix: added shell example to use single quotes for complex content ([`e5f5d0f2`](https://github.com/gptme/gptme/commit/e5f5d0f2))
 - fix: fixed --workspace=@log behavior after config refactor ([#537](https://github.com/gptme/gptme/issues/537)) ([`b1824077`](https://github.com/gptme/gptme/commit/b1824077))
 - fix: disable pre-commit checks running before first user message, misc fixes ([`87781b6b`](https://github.com/gptme/gptme/commit/87781b6b))
 - fix: improve browser init logging, made ToolSpec.available optionally a Callable with new is_available property ([`01a8616e`](https://github.com/gptme/gptme/commit/01a8616e))
 - fix: change misleading config warning to debug level ([`23799d34`](https://github.com/gptme/gptme/commit/23799d34))
 - fix: output cwd changes in shell responses, error on extra ======= for patch ([#534](https://github.com/gptme/gptme/issues/534)) ([`7c4fbbb5`](https://github.com/gptme/gptme/commit/7c4fbbb5))
 - fix: use quadruple backticks in markdown codeblocks to avoid conflicts ([#533](https://github.com/gptme/gptme/issues/533)) ([`2abf6025`](https://github.com/gptme/gptme/commit/2abf6025))
 - fix: add metadata for Claude 4 models ([`c54ef4a2`](https://github.com/gptme/gptme/commit/c54ef4a2))
 - fix: improved text file detection in workspace API ([`350d8532`](https://github.com/gptme/gptme/commit/350d8532))
 - fix: dont fail pre-commit check if config file not found ([`76b55482`](https://github.com/gptme/gptme/commit/76b55482))
 - fix: updated with more Gemini models ([`e9c4cf3d`](https://github.com/gptme/gptme/commit/e9c4cf3d))
 - fix: reverted accidentally commited changes ([`7d9d0d92`](https://github.com/gptme/gptme/commit/7d9d0d92))
 - fix: added check for placeholder lines in save tool (and tests) ([#522](https://github.com/gptme/gptme/issues/522)) ([`b8d32b6b`](https://github.com/gptme/gptme/commit/b8d32b6b))
 - fix: added convert_convo.py script ([`344a1539`](https://github.com/gptme/gptme/commit/344a1539))
 - fix: better support for interrupting pre-commit checks ([`d50af6af`](https://github.com/gptme/gptme/commit/d50af6af))
 - fix: fix streaming files support in server ([#518](https://github.com/gptme/gptme/issues/518)) ([`543e2ee3`](https://github.com/gptme/gptme/commit/543e2ee3))
 - fix: fix use of workspace paths in server by syncing workspace set in chat config (new) with workspace symlink (old) ([#517](https://github.com/gptme/gptme/issues/517)) ([`984d6412`](https://github.com/gptme/gptme/commit/984d6412))
 - fix: use absolute paths for files in view_image messages, improve markdown markup for paths ([`f2f57c6e`](https://github.com/gptme/gptme/commit/f2f57c6e))
 - fix(server): don't store chat config obj in session, load mcp server from user/project config ([#515](https://github.com/gptme/gptme/issues/515)) ([`a6504e0e`](https://github.com/gptme/gptme/commit/a6504e0e))
 - fix: change mcp tool format to mcp_tool.mcp_func (instead of mcp_tool_mcp_func) ([`385901a3`](https://github.com/gptme/gptme/commit/385901a3))
 - fix: fixed prompt not showing when prompt text overflows ([#510](https://github.com/gptme/gptme/issues/510)) ([`e7657223`](https://github.com/gptme/gptme/commit/e7657223))
 - fix: remove default BASE ARG from Dockerfile.server to remove the need for skaffold workarounds ([#512](https://github.com/gptme/gptme/issues/512)) ([`a0b507ef`](https://github.com/gptme/gptme/commit/a0b507ef))
 - fix: misc fixes by mike ([#501](https://github.com/gptme/gptme/issues/501)) ([`adfd31f8`](https://github.com/gptme/gptme/commit/adfd31f8))
 - fix: fixes auto-stepping in server ([#499](https://github.com/gptme/gptme/issues/499)) ([`3b70dd8c`](https://github.com/gptme/gptme/commit/3b70dd8c))
 - fix: improved the gh-pr-view script and rewrote in Python ([#483](https://github.com/gptme/gptme/issues/483)) ([`ba032393`](https://github.com/gptme/gptme/commit/ba032393))
 - fix: change default gptme-server port to 5700 ([#491](https://github.com/gptme/gptme/issues/491)) ([`33c2ba7f`](https://github.com/gptme/gptme/commit/33c2ba7f))
 - fix: add screenshot example ([`d9be0727`](https://github.com/gptme/gptme/commit/d9be0727))
 - fix: fix weird needed {!r} in typecheck (https://github.com/gptme/gptme/pull/486#issuecomment-2763345203) ([`f5c58db0`](https://github.com/gptme/gptme/commit/f5c58db0))
 - fix: dont run `tree` outside git repositories (likely to timeout) ([`2fb0210d`](https://github.com/gptme/gptme/commit/2fb0210d))
 - fix: support credentials in CORS ([`958bcb89`](https://github.com/gptme/gptme/commit/958bcb89))
 - fix(server): support non-streaming LLM requests ([#481](https://github.com/gptme/gptme/issues/481)) ([`085b726b`](https://github.com/gptme/gptme/commit/085b726b))
 - fix: refactored tooluse detection in server to save a call ([`64888eb9`](https://github.com/gptme/gptme/commit/64888eb9))
 - fix(server): fixes interruptions during generation ([`adad1144`](https://github.com/gptme/gptme/commit/adad1144))
 - fix: fixed 'f-string expression part cannot include a backslash' ([`cbc69653`](https://github.com/gptme/gptme/commit/cbc69653))
 - fix: fix missing MODELS entry for azure (fixes [#472](https://github.com/gptme/gptme/issues/472)) ([`67cad0ac`](https://github.com/gptme/gptme/commit/67cad0ac))
 - fix(tts): correctly strip `<think>` tags and leading hashes for '# Headers' ([`7fecf09f`](https://github.com/gptme/gptme/commit/7fecf09f))

</p>
</details>

### 🔨 Misc (57)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.28.0 ([`41d31f10`](https://github.com/gptme/gptme/commit/41d31f10))
 - docs: updated README usage, CLI help strings, and set gpt-5 as default OpenAI model ([`b5a1abd7`](https://github.com/gptme/gptme/commit/b5a1abd7))
 - docs: clarify max_tokens calculation rationale for thinking feature ([`3395bf23`](https://github.com/gptme/gptme/commit/3395bf23))
 - docs: improved prometheus config and docs ([`037e51d4`](https://github.com/gptme/gptme/commit/037e51d4))
 - docs: improve setup instructions for agents (include uv) ([`4ac4a45f`](https://github.com/gptme/gptme/commit/4ac4a45f))
 - docs: add bench of startup time using hyperfine ([`a0c3ed39`](https://github.com/gptme/gptme/commit/a0c3ed39))
 - refactor: refactor to eliminate duplicate lines ([#608](https://github.com/gptme/gptme/issues/608)) ([`309ae85f`](https://github.com/gptme/gptme/commit/309ae85f))
 - docs: mention lessons system ([`1e8d62f3`](https://github.com/gptme/gptme/commit/1e8d62f3))
 - docs: fixed ref and improved note about agents in web ui ([`85680cf5`](https://github.com/gptme/gptme/commit/85680cf5))
 - docs: added mermaid diagrams to agents docs ([`63f2345e`](https://github.com/gptme/gptme/commit/63f2345e))
 - refactor: change how extra_headers and extra_data is set in openai client ([`860f1e89`](https://github.com/gptme/gptme/commit/860f1e89))
 - docs: link to llms.txt and llms-full.txt in docs index ([`e5b4fb97`](https://github.com/gptme/gptme/commit/e5b4fb97))
 - docs: improve github bot doc ([`d65c1ee4`](https://github.com/gptme/gptme/commit/d65c1ee4))
 - docs: minor formatting fix ([`2e9cf77b`](https://github.com/gptme/gptme/commit/2e9cf77b))
 - docs: add telemetry setup guide and simplify telemetry init ([`87cb53d4`](https://github.com/gptme/gptme/commit/87cb53d4))
 - docs: more updates to docs to recommend Claude Sonnet 4 ([`9cf99057`](https://github.com/gptme/gptme/commit/9cf99057))
 - docs: update docs to recommend Claude Sonnet 4 ([`2740eca5`](https://github.com/gptme/gptme/commit/2740eca5))
 - refactor: split api_v2.py into focused modules ([`c2b67525`](https://github.com/gptme/gptme/commit/c2b67525))
 - refactor: break down complex functions into smaller focused units ([`2207190c`](https://github.com/gptme/gptme/commit/2207190c))
 - refactor: reduce code duplication with CommandContext ([`c884d8d1`](https://github.com/gptme/gptme/commit/c884d8d1))
 - refactor: convert command handling to decorator-based registry ([`04a6af0d`](https://github.com/gptme/gptme/commit/04a6af0d))
 - refactor: simplify chat function signatures and improve autocommit prompting ([`a37ddf7c`](https://github.com/gptme/gptme/commit/a37ddf7c))
 - refactor: simplify chat loop and fix interruption handling ([#582](https://github.com/gptme/gptme/issues/582)) ([`a012815e`](https://github.com/gptme/gptme/commit/a012815e))
 -  feat: add create agent endpoint in v2 api ([`c2759a5a`](https://github.com/gptme/gptme/commit/c2759a5a))
 - refactor: improve error handling and message formatting in morph/patch tools ([#581](https://github.com/gptme/gptme/issues/581)) ([`5b19708b`](https://github.com/gptme/gptme/commit/5b19708b))
 - chore: improve gitignore and dockerignore ([`ab9627a0`](https://github.com/gptme/gptme/commit/ab9627a0))
 - docs: updated docs ([#564](https://github.com/gptme/gptme/issues/564)) ([`f0842e84`](https://github.com/gptme/gptme/commit/f0842e84))
 - docs: added sphinx_llms_txt extension to generate llms.txt and llms-full.txt ([#561](https://github.com/gptme/gptme/issues/561)) ([`8181e276`](https://github.com/gptme/gptme/commit/8181e276))
 - tests: fixed test ([`a78c0561`](https://github.com/gptme/gptme/commit/a78c0561))
 - docs: fix duplicate autosectionlabel warnings by limiting maxdepth ([`5ca5e83b`](https://github.com/gptme/gptme/commit/5ca5e83b))
 - docs: added back missing file from last PR ([`d5507b7e`](https://github.com/gptme/gptme/commit/d5507b7e))
 - docs: mention Ctrl+X Ctrl+E support in --help output ([`ae3d2857`](https://github.com/gptme/gptme/commit/ae3d2857))
 - docs: improve alternatives, config and usage documentation ([`4d310b83`](https://github.com/gptme/gptme/commit/4d310b83))
 - docs: changed MCP example to use mcp-server-sqlite ([`d7d9470a`](https://github.com/gptme/gptme/commit/d7d9470a))
 - docs: moved environment variables section to bottom of config doc, add link to it from lead ([`f83568a4`](https://github.com/gptme/gptme/commit/f83568a4))
 - docs: improved docs for config, including context_cmd description and Chat Config section ([`46a4628c`](https://github.com/gptme/gptme/commit/46a4628c))
 - refactor: thread-local globals for _config and _loaded_tools ([#506](https://github.com/gptme/gptme/issues/506)) ([`ad888d38`](https://github.com/gptme/gptme/commit/ad888d38))
 - docs: improved docs, added docstrings and minor improvements to config code ([#505](https://github.com/gptme/gptme/issues/505)) ([`c0c5c739`](https://github.com/gptme/gptme/commit/c0c5c739))
 - refactor: improve config and tools architecture ([#503](https://github.com/gptme/gptme/issues/503)) ([`dc7be5fa`](https://github.com/gptme/gptme/commit/dc7be5fa))
 - docs: add a copiable markdown for powerd by gptme badge ([#490](https://github.com/gptme/gptme/issues/490)) ([`0b3a3967`](https://github.com/gptme/gptme/commit/0b3a3967))
 - docs: mention mcp in custom_tool doc ([`b24c0f95`](https://github.com/gptme/gptme/commit/b24c0f95))
 - tests: mark tests failing in ci with xfail ([`ed0e8ada`](https://github.com/gptme/gptme/commit/ed0e8ada))
 - docs: strip ansi color codes from jscpd output ([`5396094e`](https://github.com/gptme/gptme/commit/5396094e))
 - docs: improved MPC docs ([`150a35b5`](https://github.com/gptme/gptme/commit/150a35b5))
 - tests: improved mcp tests, replaced weather mcp server test with memory server ([`c7f7014b`](https://github.com/gptme/gptme/commit/c7f7014b))
 - docs: fix crazy wrong MCP explanation in docs ([`ff52d7ba`](https://github.com/gptme/gptme/commit/ff52d7ba))
 - docs: fixed title underline too short ([`15c3f403`](https://github.com/gptme/gptme/commit/15c3f403))
 - docs: moved MCP guide into documentation ([`078e667f`](https://github.com/gptme/gptme/commit/078e667f))
 - tests: add xfail to flaky tests ([`6ddf8a3b`](https://github.com/gptme/gptme/commit/6ddf8a3b))
 - refactor: reorder Message attributes ([`22f590ab`](https://github.com/gptme/gptme/commit/22f590ab))
 - chore: add dev/ to .gitignore for dev branch worktrees ([`c19893b3`](https://github.com/gptme/gptme/commit/c19893b3))
 - docs: add jscpd output to `make metrics` and arewetiny doc ([`50bcae47`](https://github.com/gptme/gptme/commit/50bcae47))
 - docs: added sitemap.xml ([#480](https://github.com/gptme/gptme/issues/480)) ([`5d4df786`](https://github.com/gptme/gptme/commit/5d4df786))
 - docs: improved timeline further ([`2665a9e3`](https://github.com/gptme/gptme/commit/2665a9e3))
 - docs: fixed rst list formatting, added `check_rst_formatting.py` script and added to pre-commit hooks ([`e88bd567`](https://github.com/gptme/gptme/commit/e88bd567))
 - docs: updated timeline ([`34bddb2b`](https://github.com/gptme/gptme/commit/34bddb2b))
 - docs: improved tts usage docs ([`598e1b29`](https://github.com/gptme/gptme/commit/598e1b29))

</p>
</details>

*(excluded 19 less relevant [commits](https://github.com/gptme/gptme/compare/v0.27.0...v0.28.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.27.0...v0.28.0


# v0.27.0

These are the release notes for gptme version v0.27.0.

## Contributors

Thanks to everyone who contributed to this release:

@0xbrayo, @erikbjare, @jrmi, @Miyou

## Changelog

Changes since v0.26.0:


## 📦 gptme

### ✨ Features (19)

 - feat: added GPTME_CONTEXT_TREE which includes `tree --gitignore .` output in initial prompt ([#461](https://github.com/gptme/gptme/issues/461)) ([`593ee900`](https://github.com/gptme/gptme/commit/593ee900))
 - feat(style): print `<think>`/`<thinking>` in dimmed text ([`dfab1e05`](https://github.com/gptme/gptme/commit/dfab1e05))
 - feat: added basic files support to server API ([#440](https://github.com/gptme/gptme/issues/440)) ([`24b9dc95`](https://github.com/gptme/gptme/commit/24b9dc95))
 - feat: added script to auto-rename past conversations ([#439](https://github.com/gptme/gptme/issues/439)) ([`9a9f0114`](https://github.com/gptme/gptme/commit/9a9f0114))
 - feat: added terminal title status output ([#438](https://github.com/gptme/gptme/issues/438)) ([`37c877f3`](https://github.com/gptme/gptme/commit/37c877f3))
 - feat: much improved RAG, added LLM post-processing of results ([#435](https://github.com/gptme/gptme/issues/435)) ([`f4b6f02e`](https://github.com/gptme/gptme/commit/f4b6f02e))
 - feat: use gnome-screenshot in wayland ([#436](https://github.com/gptme/gptme/issues/436)) ([`6d1d47a4`](https://github.com/gptme/gptme/commit/6d1d47a4))
 - feat: add status emojis to system messages ([#429](https://github.com/gptme/gptme/issues/429)) ([`69c5f011`](https://github.com/gptme/gptme/commit/69c5f011))
 - feat: added support for nvidia provider ([`7f387d33`](https://github.com/gptme/gptme/commit/7f387d33))
 - feat: auto-enable pre-commit checks when config exists ([#430](https://github.com/gptme/gptme/issues/430)) ([`5cd9b1e8`](https://github.com/gptme/gptme/commit/5cd9b1e8))
 - feat: enhance vision tool with better image processing ([`6a982987`](https://github.com/gptme/gptme/commit/6a982987))
 - feat: add option to override base prompt ([#426](https://github.com/gptme/gptme/issues/426)) ([`78e92091`](https://github.com/gptme/gptme/commit/78e92091))
 - feat(computer): add macOS support for computer tool ([#324](https://github.com/gptme/gptme/issues/324)) ([`7a08e341`](https://github.com/gptme/gptme/commit/7a08e341))
 - feat: added support for GPTME_BREAK_ON_TOOLUSE flag to not stop generation when tooluse occurs in stream ([`e7021b9c`](https://github.com/gptme/gptme/commit/e7021b9c))
 - feat: auto-run precommit checks when tooluse exhausted ([#415](https://github.com/gptme/gptme/issues/415)) ([`254d1b61`](https://github.com/gptme/gptme/commit/254d1b61))
 - feat: added support for deepseek-reasoner ([#410](https://github.com/gptme/gptme/issues/410)) ([`ac3b8258`](https://github.com/gptme/gptme/commit/ac3b8258))
 - feat: added /model command to list/switch models, support mixing providers ([#409](https://github.com/gptme/gptme/issues/409)) ([`a2bc4e00`](https://github.com/gptme/gptme/commit/a2bc4e00))
 - feat: add env var feature flag for llm prompt suggestions ([`978b1c4b`](https://github.com/gptme/gptme/commit/978b1c4b))
 - feat: added gptme-wut ([#402](https://github.com/gptme/gptme/issues/402)) ([`91bdce67`](https://github.com/gptme/gptme/commit/91bdce67))

### 🐛 Fixes (65)
<details><summary>Click to expand</summary>
<p>

 - fix: fixed reduce_context script ([`2f8246c6`](https://github.com/gptme/gptme/commit/2f8246c6))
 - fix: added reduce_context.py script ([`f0edadde`](https://github.com/gptme/gptme/commit/f0edadde))
 - fix: added gh-pr-view-with-pr-comments.sh script ([`3e0dd23d`](https://github.com/gptme/gptme/commit/3e0dd23d))
 - fix: add gemini-2.0-flash-thinking-exp-01-21 to models ([#465](https://github.com/gptme/gptme/issues/465)) ([`489f73e6`](https://github.com/gptme/gptme/commit/489f73e6))
 - fix: fix /export command ([#460](https://github.com/gptme/gptme/issues/460)) ([`0ce55149`](https://github.com/gptme/gptme/commit/0ce55149))
 - fix: fix missing dependency warning ([#455](https://github.com/gptme/gptme/issues/455)) ([`ced1b9ac`](https://github.com/gptme/gptme/commit/ced1b9ac))
 - fix: fixed incorrect reference to GPTME_FRESH_CONTEXT (now just GPTME_FRESH) ([`ce626ed1`](https://github.com/gptme/gptme/commit/ce626ed1))
 - fix: fix circular import ([`417613c1`](https://github.com/gptme/gptme/commit/417613c1))
 - fix: correctly handle too long path names ([`ec1118c6`](https://github.com/gptme/gptme/commit/ec1118c6))
 - fix: dont expand paths in user commands for tools, like /shell ([#453](https://github.com/gptme/gptme/issues/453)) ([`96304695`](https://github.com/gptme/gptme/commit/96304695))
 - fix: fixed a bunch of get_default_model uses, return None instead of exception if unset ([`a3626c82`](https://github.com/gptme/gptme/commit/a3626c82))
 - fix: make model fully optional in prompts.py, no fallback to possibly unset default ([`29a0cb19`](https://github.com/gptme/gptme/commit/29a0cb19))
 - fix: correct content block processing in Anthropic LLM module ([`b4d2d962`](https://github.com/gptme/gptme/commit/b4d2d962))
 - fix(anthropic): use model_meta.supports_reasoning to determine wether to use thinking ([`91af56c1`](https://github.com/gptme/gptme/commit/91af56c1))
 - fix: add supports_reasoning to model_meta, disabling `<thinking>` prompting for such models ([`b15fb6a5`](https://github.com/gptme/gptme/commit/b15fb6a5))
 - fix(anthropic): set max_tokens from model metadata ([`a89ca157`](https://github.com/gptme/gptme/commit/a89ca157))
 - fix: refactor only-once warning of unknown model metadata ([`5d5f0e95`](https://github.com/gptme/gptme/commit/5d5f0e95))
 - fix: disabled `tool` tooluse format for Sonnet 3.7 with thinking, for now ([`4354f3e7`](https://github.com/gptme/gptme/commit/4354f3e7))
 - fix: only log missing model metadata warning once ([`ffb83789`](https://github.com/gptme/gptme/commit/ffb83789))
 - fix: added model metadata for sonnet 3.7 ([`1df392ac`](https://github.com/gptme/gptme/commit/1df392ac))
 - fix: add support for sonnet 3.7 ([`cb83725c`](https://github.com/gptme/gptme/commit/cb83725c))
 - fix: add `model` parameter to `step` function (dont rely on global) ([`ebc076bb`](https://github.com/gptme/gptme/commit/ebc076bb))
 - fix: refactored get_project_dir helper function ([`d231311e`](https://github.com/gptme/gptme/commit/d231311e))
 - fix: prompt to prefer absolute paths ([`ba11552a`](https://github.com/gptme/gptme/commit/ba11552a))
 - fix: fixes after RAG improvement PR ([`486d9858`](https://github.com/gptme/gptme/commit/486d9858))
 - fix: refactor workspace initialization ([`6936a4e1`](https://github.com/gptme/gptme/commit/6936a4e1))
 - fix: fix support for explicitly disabling pre-commit checks ([`603ecaae`](https://github.com/gptme/gptme/commit/603ecaae))
 - fix: added basic `gptme-util chats search` command, fixes to `gptme-util chats` overall ([#434](https://github.com/gptme/gptme/issues/434)) ([`b9a64578`](https://github.com/gptme/gptme/commit/b9a64578))
 - fix: adjust tts speed to 1.0 by default after tts_server.py updated to kokoro 1.0 which seems faster by default ([`6e3af447`](https://github.com/gptme/gptme/commit/6e3af447))
 - fix: upgrade tts_server.py to use kokoro 1.0, fix audio output device on linux ([#432](https://github.com/gptme/gptme/issues/432)) ([`007a0750`](https://github.com/gptme/gptme/commit/007a0750))
 - fix: improved status emojis in formatted messages ([`964b5280`](https://github.com/gptme/gptme/commit/964b5280))
 - fix: automatically clone Kokoro-82M repo in tts_server.py script ([`a6109c71`](https://github.com/gptme/gptme/commit/a6109c71))
 - fix: fixed support for o3 ([`3a810109`](https://github.com/gptme/gptme/commit/3a810109))
 - fix: log reasoning_content when available (i.e. Deepseek R1) ([`e13af3f3`](https://github.com/gptme/gptme/commit/e13af3f3))
 - fix: added support for GPTME_PATCH_RECOVERY where file is returned in error for non-matching patches ([`96ceec24`](https://github.com/gptme/gptme/commit/96ceec24))
 - fix: minor improvements to ipython function description formatting ([`7d2fec38`](https://github.com/gptme/gptme/commit/7d2fec38))
 - fix: auto-step in server (wip), dont use logmanager lock in API ([`c948e3b1`](https://github.com/gptme/gptme/commit/c948e3b1))
 - fix: improve formatting for large patch warnings ([`4ad126e3`](https://github.com/gptme/gptme/commit/4ad126e3))
 - fix: handle None workspace in get_project_config to prevent TypeError ([`d0fee8a6`](https://github.com/gptme/gptme/commit/d0fee8a6))
 - fix: minor logging improvements ([`48782fcd`](https://github.com/gptme/gptme/commit/48782fcd))
 - fix(screenshot): add prompting for screenshot permissions on macos ([`3bc328ea`](https://github.com/gptme/gptme/commit/3bc328ea))
 - fix(vision): rescale large images passed to view_image ([`1a1d969c`](https://github.com/gptme/gptme/commit/1a1d969c))
 - fix(tts): fix logging output in tts server ([`060b5d09`](https://github.com/gptme/gptme/commit/060b5d09))
 - fix(tts): added GPTME_VOICE_FINISH flag to wait for speech to finish before exiting ([`95042d40`](https://github.com/gptme/gptme/commit/95042d40))
 - fix(tts): combine short sentences into larger chunks before sending to tts server ([`d6a941ea`](https://github.com/gptme/gptme/commit/d6a941ea))
 - fix: remove exclusive mode ([#423](https://github.com/gptme/gptme/issues/423)) ([`0c99cb8f`](https://github.com/gptme/gptme/commit/0c99cb8f))
 - fix(tts): make tts server requests non-blocking, improve clean_for_speech ([#422](https://github.com/gptme/gptme/issues/422)) ([`44c3dfe9`](https://github.com/gptme/gptme/commit/44c3dfe9))
 - fix: improve pre-commit output message when files automatically fixed by hook ([`9b4e9117`](https://github.com/gptme/gptme/commit/9b4e9117))
 - fix: added support for knowledge cutoff in model metadata ([`d166b4cb`](https://github.com/gptme/gptme/commit/d166b4cb))
 - fix(eval): use seperate status emoji for timeouts ([`00fdd187`](https://github.com/gptme/gptme/commit/00fdd187))
 - fix: locate espeak library more intelligently on macOS ([`583a6b43`](https://github.com/gptme/gptme/commit/583a6b43))
 - fix: strip leading/trailing silence from tts output ([#420](https://github.com/gptme/gptme/issues/420)) ([`96c54c41`](https://github.com/gptme/gptme/commit/96c54c41))
 - fix: fix call_id regex format for deepseek ([`ec30e9b0`](https://github.com/gptme/gptme/commit/ec30e9b0))
 - fix: fixed tts_server.py on macOS ([#418](https://github.com/gptme/gptme/issues/418)) ([`477a81e2`](https://github.com/gptme/gptme/commit/477a81e2))
 - fix: enable `tool` format for deepseek provider ([`7fda8bdc`](https://github.com/gptme/gptme/commit/7fda8bdc))
 - fix: fixed summarization for openrouter and deepseek ([`d8a9bec6`](https://github.com/gptme/gptme/commit/d8a9bec6))
 - fix: added TODOs for better openrouter support ([`e56491f1`](https://github.com/gptme/gptme/commit/e56491f1))
 - fix: fixed output of codeblocks with unescaped rich [style] tags ([`07ed85fd`](https://github.com/gptme/gptme/commit/07ed85fd))
 - fix: detect tooluses with common path characters when cleaning for speech ([#412](https://github.com/gptme/gptme/issues/412)) ([`9124640b`](https://github.com/gptme/gptme/commit/9124640b))
 - fix: improve default models+toolformats to run in evals (autodetect from available keys) ([`598f4096`](https://github.com/gptme/gptme/commit/598f4096))
 - fix: fixed broken openrouter support due to missing entry in model metadata ([`0cd60a08`](https://github.com/gptme/gptme/commit/0cd60a08))
 - fix: added gptme-eval-docker.sh helper script ([`9e62c3d1`](https://github.com/gptme/gptme/commit/9e62c3d1))
 - fix: broken mixed tool formats execution while using  `tool` format ([#407](https://github.com/gptme/gptme/issues/407)) ([`bcf45cd5`](https://github.com/gptme/gptme/commit/bcf45cd5))
 - fix: improved logging output for gptme-rag calls (incl time taken) ([`33db67ec`](https://github.com/gptme/gptme/commit/33db67ec))
 - fix: cleaned up tts tool, detect if tts server isnt running ([#404](https://github.com/gptme/gptme/issues/404)) ([`d27da5e0`](https://github.com/gptme/gptme/commit/d27da5e0))

</p>
</details>

### 🔨 Misc (42)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.27.0 ([`96a5b54e`](https://github.com/gptme/gptme/commit/96a5b54e))
 - docs: replaced github.com/ErikBjare/gptme links with github.com/gptme/gptme ([`6ac6f6e7`](https://github.com/gptme/gptme/commit/6ac6f6e7))
 - docs: reference both usage and examples in getting-started guide ([`1bd6a607`](https://github.com/gptme/gptme/commit/1bd6a607))
 - docs: fixed link ([`bb1c3f3f`](https://github.com/gptme/gptme/commit/bb1c3f3f))
 - docs: link to bob from README ([`2349c046`](https://github.com/gptme/gptme/commit/2349c046))
 - refactor: make computer tool share logic with screenshot tool ([#442](https://github.com/gptme/gptme/issues/442)) ([`412bace5`](https://github.com/gptme/gptme/commit/412bace5))
 - docs: mention Claude Code in alternatives ([`05648fb4`](https://github.com/gptme/gptme/commit/05648fb4))
 - refactor: refactored include_paths in chat.py by moving in and helpers into gptme.util.context ([`f008b6a9`](https://github.com/gptme/gptme/commit/f008b6a9))
 - docs: update the evals page to mention recommended model (sonnet) and available evals ([#451](https://github.com/gptme/gptme/issues/451)) ([`92965cd1`](https://github.com/gptme/gptme/commit/92965cd1))
 - refactor: extract get_default_model_summary ([`161451e1`](https://github.com/gptme/gptme/commit/161451e1))
 - docs: fixed broken document_prompt_function ([`004ced9e`](https://github.com/gptme/gptme/commit/004ced9e))
 - refactor: separate all get_default_model logic from get_model ([`5e3aa80a`](https://github.com/gptme/gptme/commit/5e3aa80a))
 - tests: uncomment test and mark to skip instead ([`40dc44c1`](https://github.com/gptme/gptme/commit/40dc44c1))
 - tests: disable broken search_ddg test ([`4a241f4c`](https://github.com/gptme/gptme/commit/4a241f4c))
 - refactor: refactored retry_(generator_)on_overloaded (almost-duplicate decorator) ([`e64006cc`](https://github.com/gptme/gptme/commit/e64006cc))
 - docs: add OpenHands to alternatives ([`1edf80d9`](https://github.com/gptme/gptme/commit/1edf80d9))
 - docs: split sections from 'dev guide' into new 'about' toctree in index ([`8845a1a6`](https://github.com/gptme/gptme/commit/8845a1a6))
 - chore: updated gitignore ([`2bdad1a7`](https://github.com/gptme/gptme/commit/2bdad1a7))
 - docs: improved lead in README ([`d07e799c`](https://github.com/gptme/gptme/commit/d07e799c))
 - docs: improved tools page ([`dae30218`](https://github.com/gptme/gptme/commit/dae30218))
 - docs: updated page with alternatives/comparison ([`5d53aa42`](https://github.com/gptme/gptme/commit/5d53aa42))
 - test: fixed conversation search test ([`8dfc3a06`](https://github.com/gptme/gptme/commit/8dfc3a06))
 - refactor: move default rag post-process prompt from config.py into tools/rag.py ([`0b9ea550`](https://github.com/gptme/gptme/commit/0b9ea550))
 - docs: fixes to config docs ([`2b11a3c7`](https://github.com/gptme/gptme/commit/2b11a3c7))
 - test: add requires_api test mark to run tests without API keys (such as for untrusted PRs) ([#433](https://github.com/gptme/gptme/issues/433)) ([`19895aa8`](https://github.com/gptme/gptme/commit/19895aa8))
 - docs: improve documentation and code style ([`8c536f17`](https://github.com/gptme/gptme/commit/8c536f17))
 - docs: improve TTS documentation and update README ([`00198a35`](https://github.com/gptme/gptme/commit/00198a35))
 - docs: added complexity metrics with radon to arewetiny docs, as makefile target ([#428](https://github.com/gptme/gptme/issues/428)) ([`0bd43f3e`](https://github.com/gptme/gptme/commit/0bd43f3e))
 - docs: fix RST formatting in config.rst ([`2059dddf`](https://github.com/gptme/gptme/commit/2059dddf))
 - docs: document potential DeepSeek/Gemini reasoning content support ([`ab780b99`](https://github.com/gptme/gptme/commit/ab780b99))
 - style: add newline between patch success message and warnings ([`8698758b`](https://github.com/gptme/gptme/commit/8698758b))
 - style: improve readability of base_prompt assignment ([`79df878a`](https://github.com/gptme/gptme/commit/79df878a))
 - refactor: improve imports and error handling in cli.py ([`de764dac`](https://github.com/gptme/gptme/commit/de764dac))
 - docs: document environment variables and feature flags ([`693b3be0`](https://github.com/gptme/gptme/commit/693b3be0))
 - chore: added config.toml to gitignore ([`456d9661`](https://github.com/gptme/gptme/commit/456d9661))
 - chore: added config.toml to gitignore ([`87d23cfa`](https://github.com/gptme/gptme/commit/87d23cfa))
 - tests: fixed tests for splitting/chunking sentences in tts ([`af0d3588`](https://github.com/gptme/gptme/commit/af0d3588))
 - test: generate unique run name for retries ([`6ff8b94b`](https://github.com/gptme/gptme/commit/6ff8b94b))
 - test: fixed test expecting 'Cost' which isn't known for some models ([`db212bd7`](https://github.com/gptme/gptme/commit/db212bd7))
 - test: fixed missing argument in test ([`0dbcf09e`](https://github.com/gptme/gptme/commit/0dbcf09e))
 - test: disabled test_search_google since its failing, improved error logging for failed searches with playwright ([`51f54e9a`](https://github.com/gptme/gptme/commit/51f54e9a))
 - chore: updated contributor cache ([`719da49f`](https://github.com/gptme/gptme/commit/719da49f))

</p>
</details>

*(excluded 9 less relevant [commits](https://github.com/gptme/gptme/compare/v0.26.0...v0.27.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.26.0...v0.27.0


# v0.26.0

These are the release notes for gptme version v0.26.0.

## Contributors

Thanks to everyone who contributed to this release:

@0xbrayo, @chenrui333, @erikbjare, @jrmi

## Changelog

Changes since v0.25.0:


## 📦 gptme

### ✨ Features (4)

 - feat: added local TTS support using Kokoro ([#401](https://github.com/gptme/gptme/issues/401)) ([`3e8e8698`](https://github.com/gptme/gptme/commit/3e8e8698))
 - feat: allow to load tools from external modules ([#336](https://github.com/gptme/gptme/issues/336)) ([`dd99731c`](https://github.com/gptme/gptme/commit/dd99731c))
 - feat: add support for different tool formats in eval system ([#380](https://github.com/gptme/gptme/issues/380)) ([`5fbc0acb`](https://github.com/gptme/gptme/commit/5fbc0acb))
 - feat: improve tool use response format ([#306](https://github.com/gptme/gptme/issues/306)) ([`1934fcf1`](https://github.com/gptme/gptme/commit/1934fcf1))

### 🐛 Fixes (16)
<details><summary>Click to expand</summary>
<p>

 - fix: fixed sending whitespace-only messages to tts server ([`51ce6aea`](https://github.com/gptme/gptme/commit/51ce6aea))
 - fix: more precise __version__ when installed in editable mode, with git info ([#400](https://github.com/gptme/gptme/issues/400)) ([`9cbaa5da`](https://github.com/gptme/gptme/commit/9cbaa5da))
 - fix: allow overriding logs folder via GPTME_LOGS_HOME ([`a34276c7`](https://github.com/gptme/gptme/commit/a34276c7))
 - fix: dont store invalid commands in log ([`aaf2e9e9`](https://github.com/gptme/gptme/commit/aaf2e9e9))
 - fix: fix /summarize command ([#390](https://github.com/gptme/gptme/issues/390)) ([`c41df98e`](https://github.com/gptme/gptme/commit/c41df98e))
 - fix(server): init tools in server api ([#389](https://github.com/gptme/gptme/issues/389)) ([`b6f337ac`](https://github.com/gptme/gptme/commit/b6f337ac))
 - fix: tool api call broken when user answer no to when asked for confirmation ([#371](https://github.com/gptme/gptme/issues/371)) ([`72fb003d`](https://github.com/gptme/gptme/commit/72fb003d))
 - fix: several fixes to tmux tool, incl support for multiple commands per tooluse ([#382](https://github.com/gptme/gptme/issues/382)) ([`8dbed8eb`](https://github.com/gptme/gptme/commit/8dbed8eb))
 - fix: rename python tool to ipython for better tooluse format adherence ([#361](https://github.com/gptme/gptme/issues/361)) ([`d4407e30`](https://github.com/gptme/gptme/commit/d4407e30))
 - fix: improve smaller model response on user refusals ([#374](https://github.com/gptme/gptme/issues/374)) ([`11708dd1`](https://github.com/gptme/gptme/commit/11708dd1))
 - fix: create workspace symlink in log folder, load on resume ([#368](https://github.com/gptme/gptme/issues/368)) ([`03475102`](https://github.com/gptme/gptme/commit/03475102))
 - fix: shorten command descriptions ([`0d642c22`](https://github.com/gptme/gptme/commit/0d642c22))
 - fix: remove conflicting -n alias for --name, keep as --non-interactive alias (fixes [#360](https://github.com/gptme/gptme/issues/360)) ([`dd26dc23`](https://github.com/gptme/gptme/commit/dd26dc23))
 - fix: prettier /command completions ([`f2e01f3b`](https://github.com/gptme/gptme/commit/f2e01f3b))
 - fix: retry on anthropic overloaded ([#356](https://github.com/gptme/gptme/issues/356)) ([`50763762`](https://github.com/gptme/gptme/commit/50763762))
 - fix: fixed `auto n` option on ask_execute, added log message with remaining skips ([`cc1af13a`](https://github.com/gptme/gptme/commit/cc1af13a))

</p>
</details>

### 🔨 Misc (10)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.26.0 ([`3fef9941`](https://github.com/gptme/gptme/commit/3fef9941))
 - chore: fixed venv docker/gitignore ([`a32fc3bc`](https://github.com/gptme/gptme/commit/a32fc3bc))
 - docs: improve custom tools docs, mentioning simple script tools ([#391](https://github.com/gptme/gptme/issues/391)) ([`d33ff353`](https://github.com/gptme/gptme/commit/d33ff353))
 - test: simplified tool format test, dont skip cli url test if lynx available ([`cdbfae8b`](https://github.com/gptme/gptme/commit/cdbfae8b))
 - chore: added .aider and .env to gitignore ([`54253a5d`](https://github.com/gptme/gptme/commit/54253a5d))
 - test: fix reset_default_model fixture if no default set ([`a5687952`](https://github.com/gptme/gptme/commit/a5687952))
 - test: reset default model in openai tests to fix flaky test ([`7ff84922`](https://github.com/gptme/gptme/commit/7ff84922))
 - test: fix typo in model name ([`dec7a60f`](https://github.com/gptme/gptme/commit/dec7a60f))
 - chore: update brayo-pip -> 0xbrayo ([`871cf63c`](https://github.com/gptme/gptme/commit/871cf63c))
 - chore: updated changelog_contributors.csv cache ([`7abeb1eb`](https://github.com/gptme/gptme/commit/7abeb1eb))

</p>
</details>

*(excluded 11 less relevant [commits](https://github.com/gptme/gptme/compare/v0.25.0...v0.26.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.25.0...v0.26.0


# v0.25.0

These are the release notes for gptme version v0.25.0.

## Contributors

Thanks to everyone who contributed to this release:

@0xbrayo, @bjsi, @erikbjare

## Changelog

Changes since v0.24.1:


## 📦 gptme

### ✨ Features (8)

 - feat: support `auto n` to skip n confirmations ([#346](https://github.com/gptme/gptme/issues/346)) ([`7d2e9e7b`](https://github.com/gptme/gptme/commit/7d2e9e7b))
 - feat: migrate readline to prompt_toolkit, with many features and fixes ([#244](https://github.com/gptme/gptme/issues/244)) ([`61ca0a24`](https://github.com/gptme/gptme/commit/61ca0a24))
 - feat(llm): add model metadata for Deepseek, Groq, and XAI ([`d2109fef`](https://github.com/gptme/gptme/commit/d2109fef))
 - feat: simplify rag tool by simply calling gptme-rag via subprocess ([#316](https://github.com/gptme/gptme/issues/316)) ([`87571086`](https://github.com/gptme/gptme/commit/87571086))
 - feat(anthropic): improve prompt caching and type safety ([#317](https://github.com/gptme/gptme/issues/317)) ([`a2f06df8`](https://github.com/gptme/gptme/commit/a2f06df8))
 - feat: started working on always-fresh context message ([#281](https://github.com/gptme/gptme/issues/281)) ([`01d80524`](https://github.com/gptme/gptme/commit/01d80524))
 - feat: support for OpenAI/Anthropic `tools` APIs ([#300](https://github.com/gptme/gptme/issues/300)) ([`d83f7238`](https://github.com/gptme/gptme/commit/d83f7238))
 - feat: output costs for request and session ([#293](https://github.com/gptme/gptme/issues/293)) ([`063624fe`](https://github.com/gptme/gptme/commit/063624fe))

### 🐛 Fixes (34)
<details><summary>Click to expand</summary>
<p>

 - fix: return instructions to correctly `playwright install` if browser binaries unavailable ([#358](https://github.com/gptme/gptme/issues/358)) ([`ebf56754`](https://github.com/gptme/gptme/commit/ebf56754))
 - fix: dont log costs by default ([`f65e75e6`](https://github.com/gptme/gptme/commit/f65e75e6))
 - fix: stream and capture ipython output ([#357](https://github.com/gptme/gptme/issues/357)) ([`ef424bed`](https://github.com/gptme/gptme/commit/ef424bed))
 - fix: removed spammy debug-logging message ([`99912f3c`](https://github.com/gptme/gptme/commit/99912f3c))
 - fix: properly handle piped input in prompts ([#354](https://github.com/gptme/gptme/issues/354)) ([`f8321834`](https://github.com/gptme/gptme/commit/f8321834))
 - fix: support piping stdin into gptme -r (resume) ([#344](https://github.com/gptme/gptme/issues/344)) ([`621ffd80`](https://github.com/gptme/gptme/commit/621ffd80))
 - fix: move playwright to thread to avoid event loop conflicts ([#353](https://github.com/gptme/gptme/issues/353)) ([`803d6e51`](https://github.com/gptme/gptme/commit/803d6e51))
 - fix: migrated to latest anthropic version v0.42 (prompt caching now stable) ([#352](https://github.com/gptme/gptme/issues/352)) ([`0ecf0459`](https://github.com/gptme/gptme/commit/0ecf0459))
 - fix: fix reading stdin after prompt-toolkit migration ([#337](https://github.com/gptme/gptme/issues/337)) ([`b3974c15`](https://github.com/gptme/gptme/commit/b3974c15))
 - fix: fix log output during input, fix directory completion ([#338](https://github.com/gptme/gptme/issues/338)) ([`e3874aa4`](https://github.com/gptme/gptme/commit/e3874aa4))
 - fix: remove prompting to avoid the now-supported EOF/HereDoc ([`3950a6e7`](https://github.com/gptme/gptme/commit/3950a6e7))
 - fix: support heredoc/EOF syntax in shell tool ([#335](https://github.com/gptme/gptme/issues/335)) ([`6a1246f5`](https://github.com/gptme/gptme/commit/6a1246f5))
 - fix: improved path detection in prompts, now works with more adjacent punctuation types ([#333](https://github.com/gptme/gptme/issues/333)) ([`8e8f28ea`](https://github.com/gptme/gptme/commit/8e8f28ea))
 - fix: use full paths to files in workspace context prompt ([#330](https://github.com/gptme/gptme/issues/330)) ([`a61aa284`](https://github.com/gptme/gptme/commit/a61aa284))
 - fix: fixed incorrectly always using gpt-4 model metadata when reducing ([`2343ab67`](https://github.com/gptme/gptme/commit/2343ab67))
 - fix: when patch failed due to bad path, include pwd in message for fast recovery ([`202869e6`](https://github.com/gptme/gptme/commit/202869e6))
 - fix(llm): transform message content for Groq provider ([`84c83166`](https://github.com/gptme/gptme/commit/84c83166))
 - fix: better prompt caching & less debug logging ([#323](https://github.com/gptme/gptme/issues/323)) ([`fae65ca4`](https://github.com/gptme/gptme/commit/fae65ca4))
 - fix: better anthropic cost logging ([#321](https://github.com/gptme/gptme/issues/321)) ([`283e8b0f`](https://github.com/gptme/gptme/commit/283e8b0f))
 - fix: better error output when loading locked conversation ([#319](https://github.com/gptme/gptme/issues/319)) ([`2264cf10`](https://github.com/gptme/gptme/commit/2264cf10))
 - fix: further anthropic caching improvements ([#318](https://github.com/gptme/gptme/issues/318)) ([`65efc3e0`](https://github.com/gptme/gptme/commit/65efc3e0))
 - fix: fixed regression in syntax highlighting for saves after refactor ([`a40f5387`](https://github.com/gptme/gptme/commit/a40f5387))
 - fix: added conversation lock file management in LogManager ([#295](https://github.com/gptme/gptme/issues/295)) ([`7255f255`](https://github.com/gptme/gptme/commit/7255f255))
 - fix: improvements after execute_with_confirmation refactor ([#311](https://github.com/gptme/gptme/issues/311)) ([`23f81cf8`](https://github.com/gptme/gptme/commit/23f81cf8))
 - fix: set TOKENIZERS_PARALLELISM env var to false to get rid of warning ([`75b298be`](https://github.com/gptme/gptme/commit/75b298be))
 - fix: clarify return prompt for subagent tool ([`29bcc473`](https://github.com/gptme/gptme/commit/29bcc473))
 - fix: skip loading subagent tool by default ([`37ae9c19`](https://github.com/gptme/gptme/commit/37ae9c19))
 - fix(prompts): minor fixes and improvements to prompts ([`10108a10`](https://github.com/gptme/gptme/commit/10108a10))
 - fix: fixed Dockerfile for computer use ([`9bf733a5`](https://github.com/gptme/gptme/commit/9bf733a5))
 - fix: include mention of user-edited save/patch/command in system response ([`93e126ac`](https://github.com/gptme/gptme/commit/93e126ac))
 - fix: make the --help text for --model always use recommended models ([`2c872f36`](https://github.com/gptme/gptme/commit/2c872f36))
 - fix: handle exceptions if readline history fails to write ([`c60eb883`](https://github.com/gptme/gptme/commit/c60eb883))
 - fix: prevent command execution from triggering unnecessary response generation ([`7f66dbff`](https://github.com/gptme/gptme/commit/7f66dbff))
 - fix: incorrect response_preference key in config ([`748be0b6`](https://github.com/gptme/gptme/commit/748be0b6))

</p>
</details>

### 🔨 Misc (26)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.25.0 ([`c3edcbf9`](https://github.com/gptme/gptme/commit/c3edcbf9))
 - refactor: make /tokens command use log_costs function ([`1fd407c1`](https://github.com/gptme/gptme/commit/1fd407c1))
 - docs: improved docs for playwright install, added instructions for lynx browser backend ([`a9bd44fa`](https://github.com/gptme/gptme/commit/a9bd44fa))
 - docs: list api key env variables uniformly for all providers ([`d598ff36`](https://github.com/gptme/gptme/commit/d598ff36))
 - perf: optimize token counting with caching and explicit model param ([#325](https://github.com/gptme/gptme/issues/325)) ([`c05f9c69`](https://github.com/gptme/gptme/commit/c05f9c69))
 - docs(providers): simplify provider docs and update API key config ([`c86b47cf`](https://github.com/gptme/gptme/commit/c86b47cf))
 - refactor: refactored how tools are loaded, to enable loading external tools ([#313](https://github.com/gptme/gptme/issues/313)) ([`c0eb21fa`](https://github.com/gptme/gptme/commit/c0eb21fa))
 - refactor: moved more core files to util module ([#312](https://github.com/gptme/gptme/issues/312)) ([`0ee07cf6`](https://github.com/gptme/gptme/commit/0ee07cf6))
 - docs: moved usage rubrics from example.rst to usage.rst ([`4ff383aa`](https://github.com/gptme/gptme/commit/4ff383aa))
 - test: disable generate primes test for gpt-4o-mini (unreliable) ([`696e722c`](https://github.com/gptme/gptme/commit/696e722c))
 - test: disable subagent test for gpt-4o-mini (unreliable) ([`b34cee08`](https://github.com/gptme/gptme/commit/b34cee08))
 - docs: added alternatives.rst to docs index ([`83736d6e`](https://github.com/gptme/gptme/commit/83736d6e))
 - docs: renamed comparison.rst to alternatives.rst, reorganized it ([`9744d36b`](https://github.com/gptme/gptme/commit/9744d36b))
 - docs: added basic comparison docs page ([`fb148333`](https://github.com/gptme/gptme/commit/fb148333))
 - refactor(tools): introduce execute_with_confirmation helper ([`df5c9d6e`](https://github.com/gptme/gptme/commit/df5c9d6e))
 - refactor: Move utility functions into dedicated modules, make tool content editable ([`d01b943d`](https://github.com/gptme/gptme/commit/d01b943d))
 - docs(gh-bot): fix `uses:` for example workflow in non-gptme repos ([`4d4c2b44`](https://github.com/gptme/gptme/commit/4d4c2b44))
 - docs: add quotes for [extras] in pipx install commands ([`6e4e3319`](https://github.com/gptme/gptme/commit/6e4e3319))
 - test: attempt more reliable prompting for the subagent test ([`fe6730c9`](https://github.com/gptme/gptme/commit/fe6730c9))
 - test: fixed tool format test and improved prompting for chain test ([`a7038e46`](https://github.com/gptme/gptme/commit/a7038e46))
 - refactor: improve tools API and fix issues ([`1c739527`](https://github.com/gptme/gptme/commit/1c739527))
 - refactor: cleanup and improve tools API ([`5b755f3d`](https://github.com/gptme/gptme/commit/5b755f3d))
 - Revert "fix: prevent command execution from triggering unnecessary response generation" ([`6a3813be`](https://github.com/gptme/gptme/commit/6a3813be))
 - test: added placeholders/TODOs for future tests ([`a70fdc01`](https://github.com/gptme/gptme/commit/a70fdc01))
 - docs: added documentation on agents.rst ([`b48f1517`](https://github.com/gptme/gptme/commit/b48f1517))
 - chore: updated changelog_contributors.csv cache ([`88c715b9`](https://github.com/gptme/gptme/commit/88c715b9))

</p>
</details>

*(excluded 6 less relevant [commits](https://github.com/gptme/gptme/compare/v0.24.1...v0.25.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.24.1...v0.25.0


# v0.24.1

These are the release notes for gptme version v0.24.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.24.0:


## 📦 gptme

### ✨ Features (1)

 - feat(llm): support Gemini provider ([#272](https://github.com/gptme/gptme/issues/272)) ([`e875c555`](https://github.com/gptme/gptme/commit/e875c555))

### 🐛 Fixes (4)

 - fix(vim): improved window configuration ([`e59cc066`](https://github.com/gptme/gptme/commit/e59cc066))
 - fix: deepseek provider and gptme-eval docker improvements ([#270](https://github.com/gptme/gptme/issues/270)) ([`591b5be6`](https://github.com/gptme/gptme/commit/591b5be6))
 - fix: model provider handling and vision support metadata ([#269](https://github.com/gptme/gptme/issues/269)) ([`7a797cfb`](https://github.com/gptme/gptme/commit/7a797cfb))
 - fix: remove o1 streaming restriction ([`7fd6ad59`](https://github.com/gptme/gptme/commit/7fd6ad59))

### 🔨 Misc (15)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.24.1 ([`5ec053f4`](https://github.com/gptme/gptme/commit/5ec053f4))
 - docs: added gptme.vim to projects ([`e3afcfd0`](https://github.com/gptme/gptme/commit/e3afcfd0))
 - refactor: moved vim plugin into its own repo ErikBjare/gptme.vim ([`190fcd70`](https://github.com/gptme/gptme/commit/190fcd70))
 - docs(server): mention how to install server extras ([`cb561d6b`](https://github.com/gptme/gptme/commit/cb561d6b))
 - docs: move detailed usage to separate page ([`e8ec1c84`](https://github.com/gptme/gptme/commit/e8ec1c84))
 - docs: improve examples documentation ([`13e3b956`](https://github.com/gptme/gptme/commit/13e3b956))
 - docs: move automation document under examples ([`c2b904fd`](https://github.com/gptme/gptme/commit/c2b904fd))
 - docs: add projects page, more examples and 'powered by gptme' badge ([`602155e7`](https://github.com/gptme/gptme/commit/602155e7))
 - docs(examples): added more examples ([`e69551f5`](https://github.com/gptme/gptme/commit/e69551f5))
 - docs: added links to changelog (releases) and X, improved examples (use of `git status -vv`) ([`37ab6b41`](https://github.com/gptme/gptme/commit/37ab6b41))
 - docs(README): changed twitter/x badge to point to @gptmeorg ([`906bc96e`](https://github.com/gptme/gptme/commit/906bc96e))
 - chore: added htmlcov to gitignore ([`cfd7cdf7`](https://github.com/gptme/gptme/commit/cfd7cdf7))
 - test: fixed readline completions test ([`bc796567`](https://github.com/gptme/gptme/commit/bc796567))
 - docs(README): moved agent feature to done features, link to gptme-agent-template ([`e17ef361`](https://github.com/gptme/gptme/commit/e17ef361))
 - refactor(rag): improve RAG manager implementation ([#268](https://github.com/gptme/gptme/issues/268)) ([`63e8d04f`](https://github.com/gptme/gptme/commit/63e8d04f))

</p>
</details>

*(excluded 7 less relevant [commits](https://github.com/gptme/gptme/compare/v0.24.0...v0.24.1))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.24.0...v0.24.1


# v0.24.0

These are the release notes for gptme version v0.24.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare, @jrmi

## Changelog

Changes since v0.23.0:


## 📦 gptme

### ✨ Features (5)

 - feat(cli): print return values from tool function calls ([`c1f4c005`](https://github.com/gptme/gptme/commit/c1f4c005))
 - feat(utils): add verbose logging and tools call command to gptme-util ([#265](https://github.com/gptme/gptme/issues/265)) ([`b3955d56`](https://github.com/gptme/gptme/commit/b3955d56))
 - feat: begin work on RAG, refactoring, improved docs and tests ([#258](https://github.com/gptme/gptme/issues/258)) ([`950c3972`](https://github.com/gptme/gptme/commit/950c3972))
 - feat: implement gptme-util CLI for utilities ([#261](https://github.com/gptme/gptme/issues/261)) ([`128676c0`](https://github.com/gptme/gptme/commit/128676c0))
 - feat: added current date & time to system prompt ([`faaec3a3`](https://github.com/gptme/gptme/commit/faaec3a3))

### 🐛 Fixes (5)

 - fix: support line removal in patch tool ([#267](https://github.com/gptme/gptme/issues/267)) ([`7c51573f`](https://github.com/gptme/gptme/commit/7c51573f))
 - fix: enforce full path usage in patch tool ([`2ade6677`](https://github.com/gptme/gptme/commit/2ade6677))
 - fix(save): fix save diff preview when path starts with ~/ ([`0fbafd07`](https://github.com/gptme/gptme/commit/0fbafd07))
 - fix: set PAGER and GH_PAGER in shell tool, add wait-for-ci example to gh tool ([`e4ce6c8d`](https://github.com/gptme/gptme/commit/e4ce6c8d))
 - fix: mention paths being relative to working dir in prompt for save tool ([`41594c57`](https://github.com/gptme/gptme/commit/41594c57))

### 🔨 Misc (8)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.24.0 ([`990965f1`](https://github.com/gptme/gptme/commit/990965f1))
 - test(patch): improve test coverage for patch tool ([`e1e2943b`](https://github.com/gptme/gptme/commit/e1e2943b))
 - test(patch): improve empty patch test ([`a6605127`](https://github.com/gptme/gptme/commit/a6605127))
 - refactor(rag): simplify configuration and initialization ([#266](https://github.com/gptme/gptme/issues/266)) ([`84e5ab63`](https://github.com/gptme/gptme/commit/84e5ab63))
 - refactor: group all provider/model related logic into `llm` directory ([#254](https://github.com/gptme/gptme/issues/254)) ([`ac3c1730`](https://github.com/gptme/gptme/commit/ac3c1730))
 - docs(README): added links to issues for agents and Bob ([`ebd700b7`](https://github.com/gptme/gptme/commit/ebd700b7))
 - chore: moved mypy options into pyproject.toml ([`ba2009aa`](https://github.com/gptme/gptme/commit/ba2009aa))
 - docs: moved a couple 'in progress' features to the completed features section ([`e9a00228`](https://github.com/gptme/gptme/commit/e9a00228))

</p>
</details>

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.23.0...v0.24.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.23.0...v0.24.0


# v0.23.0

These are the release notes for gptme version v0.23.0.

## Contributors

Thanks to everyone who contributed to this release:

@0xbrayo, @erikbjare, @jrmi

## Changelog

Changes since v0.22.0:


## 📦 gptme

### ✨ Features (6)

 - feat: improved `ask_execute` options interface, now supporting '?' and 'auto' ([`66c977c0`](https://github.com/gptme/gptme/commit/66c977c0))
 - feat: copy to clipboard ([#234](https://github.com/gptme/gptme/issues/234)) ([`7ad4c947`](https://github.com/gptme/gptme/commit/7ad4c947))
 - feat(server): support interrupting stream, support slash commands ([#248](https://github.com/gptme/gptme/issues/248)) ([`c1d136f1`](https://github.com/gptme/gptme/commit/c1d136f1))
 - feat: added support for streaming in API ([#247](https://github.com/gptme/gptme/issues/247)) ([`7b622016`](https://github.com/gptme/gptme/commit/7b622016))
 - feat: added --cors-origin cli param to gptme-server ([`a7190edc`](https://github.com/gptme/gptme/commit/a7190edc))
 - feat: implemented gptme.vim plugin ([#241](https://github.com/gptme/gptme/issues/241)) ([`a04ee054`](https://github.com/gptme/gptme/commit/a04ee054))

### 🐛 Fixes (11)
<details><summary>Click to expand</summary>
<p>

 - fix: prompt to reinforce correct placement of filename parameter in patch tool ([#252](https://github.com/gptme/gptme/issues/252)) ([`01541af0`](https://github.com/gptme/gptme/commit/01541af0))
 - fix: trigger tool detection only on complete lines, for performance and to fix nested codeblocks in tooluse ([#251](https://github.com/gptme/gptme/issues/251)) ([`5a228d4e`](https://github.com/gptme/gptme/commit/5a228d4e))
 - fix: fixed prompt for python tool ([`64f94916`](https://github.com/gptme/gptme/commit/64f94916))
 - fix: fixes to computer use ([`1de06c67`](https://github.com/gptme/gptme/commit/1de06c67))
 - fix: switch to new Claude 3.5 models in evals, improve detection of results folders ([`6aec2313`](https://github.com/gptme/gptme/commit/6aec2313))
 - fix: switch to duckduckgo as default search engine with lynx browser ([#237](https://github.com/gptme/gptme/issues/237)) ([`ce7afb8f`](https://github.com/gptme/gptme/commit/ce7afb8f))
 - fix: fixed running evals in docker ([`5ac3914b`](https://github.com/gptme/gptme/commit/5ac3914b))
 - fix: added metadata for new haiku model ([`85647562`](https://github.com/gptme/gptme/commit/85647562))
 - fix: fix including files specified in gptme.toml ([`381dbc8f`](https://github.com/gptme/gptme/commit/381dbc8f))
 - fix: updated READMEs about gptme.vim ([`f7913bbc`](https://github.com/gptme/gptme/commit/f7913bbc))
 - fix: removed debug logging in gptme.vim ([`25c998c4`](https://github.com/gptme/gptme/commit/25c998c4))

</p>
</details>

### 🔨 Misc (12)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.23.0 ([`9010fede`](https://github.com/gptme/gptme/commit/9010fede))
 - chore: committed caches for contributor info used in changelog generation ([`9dee5548`](https://github.com/gptme/gptme/commit/9dee5548))
 - docs: improved server/computer use docs ([`501008a3`](https://github.com/gptme/gptme/commit/501008a3))
 - refactor: move get_workspace_prompt into prompts.py, add TODO comments ([`639e4cb1`](https://github.com/gptme/gptme/commit/639e4cb1))
 - docs: updated `gptme --help` output, fix command ordering ([`da90e33c`](https://github.com/gptme/gptme/commit/da90e33c))
 - docs: minor improvements to server docs ([`f6589de1`](https://github.com/gptme/gptme/commit/f6589de1))
 - docs: updated server docs with better structure and mention of gptme-webui ([`c32f64db`](https://github.com/gptme/gptme/commit/c32f64db))
 - docs(README): moved the use cases section above the developer/in-progress sections ([`0c0163d0`](https://github.com/gptme/gptme/commit/0c0163d0))
 - docs(README): rewrote use cases section ([`a517d8f3`](https://github.com/gptme/gptme/commit/a517d8f3))
 - docs: add link to SWE-Bench PR ([`970fc47e`](https://github.com/gptme/gptme/commit/970fc47e))
 - docs: improved arewetiny intro text ([`3f5aa840`](https://github.com/gptme/gptme/commit/3f5aa840))
 - docs: fixed gptme.vim docs ([`9ca2e083`](https://github.com/gptme/gptme/commit/9ca2e083))

</p>
</details>

*(excluded 3 less relevant [commits](https://github.com/gptme/gptme/compare/v0.22.0...v0.23.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.22.0...v0.23.0


# v0.22.0

These are the release notes for gptme version v0.22.0.

## Contributors

Thanks to everyone who contributed to this release:

@0xbrayo, @erikbjare, @jrmi

## Changelog

Changes since v0.21.0:


## 📦 gptme

### ✨ Features (5)

 - feat: implement anthropic-style computer tool ([#225](https://github.com/gptme/gptme/issues/225)) ([`175167e0`](https://github.com/gptme/gptme/commit/175167e0))
 - feat: added /export comment to export self-contained HTML file built from webui ([#235](https://github.com/gptme/gptme/issues/235)) ([`0ca914fc`](https://github.com/gptme/gptme/commit/0ca914fc))
 - feat: add platform info to the system prompt ([#171](https://github.com/gptme/gptme/issues/171)) ([`0288d33a`](https://github.com/gptme/gptme/commit/0288d33a))
 - feat: added lynx browser support ([#214](https://github.com/gptme/gptme/issues/214)) ([`2cd9ffb8`](https://github.com/gptme/gptme/commit/2cd9ffb8))
 - feat: added deepseek support ([#180](https://github.com/gptme/gptme/issues/180)) ([`949eaeec`](https://github.com/gptme/gptme/commit/949eaeec))

### 🐛 Fixes (11)
<details><summary>Click to expand</summary>
<p>

 - fix: correct Linux distro version in systeminfo prompt ([#239](https://github.com/gptme/gptme/issues/239)) ([`3221145d`](https://github.com/gptme/gptme/commit/3221145d))
 - fix: informative message for agent when permission isn't granted ([#223](https://github.com/gptme/gptme/issues/223)) ([`5ee0f2f2`](https://github.com/gptme/gptme/commit/5ee0f2f2))
 - fix: fixed __version__ looking up old package name ([`f8c296f5`](https://github.com/gptme/gptme/commit/f8c296f5))
 - fix: set `<title>` in export and make sure `/export` command doesn't get saved to log ([`2a5576ad`](https://github.com/gptme/gptme/commit/2a5576ad))
 - fix: improved chat picker (now uses full-width of terminal) ([`32db19df`](https://github.com/gptme/gptme/commit/32db19df))
 - fix: add cli-provided prompts to readline history ([`ffaa109c`](https://github.com/gptme/gptme/commit/ffaa109c))
 - fix: improved reliability of llm.generate_name() ([`b9311036`](https://github.com/gptme/gptme/commit/b9311036))
 - fix: include conversation name in exported chat log ([`abc4928c`](https://github.com/gptme/gptme/commit/abc4928c))
 - fix: changed all Message-generator tools to simply print/return value instead (fixes [#186](https://github.com/gptme/gptme/issues/186), fixes [#187](https://github.com/gptme/gptme/issues/187)) ([`3dcef9fd`](https://github.com/gptme/gptme/commit/3dcef9fd))
 - fix: fixed support for groq (and deepseek?) ([#231](https://github.com/gptme/gptme/issues/231)) ([`cea30cfe`](https://github.com/gptme/gptme/commit/cea30cfe))
 - fix: fixed screenshot() not running if generator not consumed (such as when not last statement in codeblock) ([`65bdb8ad`](https://github.com/gptme/gptme/commit/65bdb8ad))

</p>
</details>

### 🔨 Misc (8)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.22.0 ([`cdd8c6b2`](https://github.com/gptme/gptme/commit/cdd8c6b2))
 - docs: removed bad computer use example ([`66898b23`](https://github.com/gptme/gptme/commit/66898b23))
 - tests: fixed blinking test due to changed working dir ([`40d1a5d7`](https://github.com/gptme/gptme/commit/40d1a5d7))
 - docs: add installing from source instructions to contributing guide ([#236](https://github.com/gptme/gptme/issues/236)) ([`4665f499`](https://github.com/gptme/gptme/commit/4665f499))
 - format: s/whitelist/allowlist ([`e77cd4ef`](https://github.com/gptme/gptme/commit/e77cd4ef))
 - docs: add mention of configuration file on providers page ([`16f8254e`](https://github.com/gptme/gptme/commit/16f8254e))
 - docs: fixed incorrect local/ollama/... provider prefix ([`3eb6f8f4`](https://github.com/gptme/gptme/commit/3eb6f8f4))
 - docs: improved note about outdated demos ([`cdce6373`](https://github.com/gptme/gptme/commit/cdce6373))

</p>
</details>

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.21.0...v0.22.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.21.0...v0.22.0


# v0.21.0

These are the release notes for gptme version v0.21.0.

## Contributors

Thanks to everyone who contributed to this release:

@0xbrayo, @erikbjare

## Changelog

Changes since v0.20.0:


## 📦 gptme

### ✨ Features (4)

 - feat: added support for groq provider ([`4299cd02`](https://github.com/gptme/gptme/commit/4299cd02))
 - feat:whitelist some commands ([`7f1ba2be`](https://github.com/gptme/gptme/commit/7f1ba2be))
 - feat: added support for xAI/grok ([`d7cebbae`](https://github.com/gptme/gptme/commit/d7cebbae))
 - feat: started working on ncurses ui ([`d3413eab`](https://github.com/gptme/gptme/commit/d3413eab))

### 🐛 Fixes (19)
<details><summary>Click to expand</summary>
<p>

 - fix: added 'head' to allowlisted commands in shell tool ([`7cc752f6`](https://github.com/gptme/gptme/commit/7cc752f6))
 - fix: compile cmd_regex ([#222](https://github.com/gptme/gptme/issues/222)) ([`623a52d1`](https://github.com/gptme/gptme/commit/623a52d1))
 - fix: print used model on startup ([`6cf4001d`](https://github.com/gptme/gptme/commit/6cf4001d))
 - fix: better error if attempting to run on Windows, refactor readline stuff ([#221](https://github.com/gptme/gptme/issues/221)) ([`bd8b746b`](https://github.com/gptme/gptme/commit/bd8b746b))
 - fix: update to use latest Sonnet model by default, improve typing ([`6e701686`](https://github.com/gptme/gptme/commit/6e701686))
 - fix: dont catch interrupts until conversation has begun ([`2be45a88`](https://github.com/gptme/gptme/commit/2be45a88))
 - fix: added ncgptme and gptme-nc script entrypoints for ncurses tui ([`7b19b760`](https://github.com/gptme/gptme/commit/7b19b760))
 - fix: fixed typing in ncurses.py ([`f018c6c1`](https://github.com/gptme/gptme/commit/f018c6c1))
 - fix: improved shell tool preview format ([`756e4207`](https://github.com/gptme/gptme/commit/756e4207))
 - fix: change OPENAI_API_BASE to OPENAI_BASE_URL ([`30e3f01e`](https://github.com/gptme/gptme/commit/30e3f01e))
 - fix: ensure subagent logdir unique ([`f735111e`](https://github.com/gptme/gptme/commit/f735111e))
 - fix: changed subagent tool param order and example ([`2bdb48fa`](https://github.com/gptme/gptme/commit/2bdb48fa))
 - fix: fixed display bug in confirm prompt ([`b9f8cd89`](https://github.com/gptme/gptme/commit/b9f8cd89))
 - fix: fixed bug where user prompt not included in request ([`53d160eb`](https://github.com/gptme/gptme/commit/53d160eb))
 - fix: fixed prompt_user returning empty string when interrupted ([`440aedb0`](https://github.com/gptme/gptme/commit/440aedb0))
 - fix: fixed leftover call to ask_execute instead of confirm func ([`b7d2a3fe`](https://github.com/gptme/gptme/commit/b7d2a3fe))
 - fix: fixed incorrectly asking for confirmation when impersonating ([`94983436`](https://github.com/gptme/gptme/commit/94983436))
 - fix: more fixes/improvements to treeofthoughts.py ([`d54df51d`](https://github.com/gptme/gptme/commit/d54df51d))
 - fix: re-raise tool use errors in tests ([`0ada191e`](https://github.com/gptme/gptme/commit/0ada191e))

</p>
</details>

### 🔨 Misc (14)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.21.0 ([`852e6f40`](https://github.com/gptme/gptme/commit/852e6f40))
 - docs: added more WIP features to README ([`2d8b6020`](https://github.com/gptme/gptme/commit/2d8b6020))
 - docs: added note about Windows support ([`b8ce0406`](https://github.com/gptme/gptme/commit/b8ce0406))
 - docs: added docstring to ncurses.py ([`5bb00249`](https://github.com/gptme/gptme/commit/5bb00249))
 - docs: add note about limitations of small local models, convert page to rst ([`f521c71b`](https://github.com/gptme/gptme/commit/f521c71b))
 - format: fixed lints ([`ff2277ca`](https://github.com/gptme/gptme/commit/ff2277ca))
 - refactor: refactor ncurses.py and add --no-color cli argument ([`942996c9`](https://github.com/gptme/gptme/commit/942996c9))
 - docs: added basic docs for configuration files (fixes [#173](https://github.com/gptme/gptme/issues/173)) ([`acd0ceee`](https://github.com/gptme/gptme/commit/acd0ceee))
 - docs(README): removed old ToC link ([`5801bbff`](https://github.com/gptme/gptme/commit/5801bbff))
 - docs: fixed docs building after refactor ([`52eaed9f`](https://github.com/gptme/gptme/commit/52eaed9f))
 - refactor: refactor how confirmation works, enabling LLM-guided confirmation and simplifying confirmation support in server ([`b843e889`](https://github.com/gptme/gptme/commit/b843e889))
 - refactor: work on programmatic interface, refactored LogManager into mutable manager and immutable Log dataclass, added wip treeofthought script ([`d421cc8c`](https://github.com/gptme/gptme/commit/d421cc8c))
 - format: fixed formatting after pre-commit setup ([`4ee9761a`](https://github.com/gptme/gptme/commit/4ee9761a))
 - docs: fixed incorrect OPENAI_API_BASE url ([`732c5b85`](https://github.com/gptme/gptme/commit/732c5b85))

</p>
</details>

*(excluded 4 less relevant [commits](https://github.com/gptme/gptme/compare/v0.20.0...v0.21.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.20.0...v0.21.0


# v0.20.0

These are the release notes for gptme version v0.20.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.19.2:


## 📦 gptme

### ✨ Features (1)

 - feat: updated webui style, with sidebar ([`bd44e5c3`](https://github.com/gptme/gptme/commit/bd44e5c3))

### 🐛 Fixes (10)
<details><summary>Click to expand</summary>
<p>

 - fix: use importlib.util.find_spec instead of attempting costly imports at startup, reducing startup time by ~1s ([`7b755202`](https://github.com/gptme/gptme/commit/7b755202))
 - fix(webui): put `<thinking>` tags into `<details>`, minor style improvements ([`04b3109a`](https://github.com/gptme/gptme/commit/04b3109a))
 - fix(webui): switch to marked over showdown, improved styling and misc fixes ([`0a868ba3`](https://github.com/gptme/gptme/commit/0a868ba3))
 - fix: catch exceptions when executing tools ([`9560660e`](https://github.com/gptme/gptme/commit/9560660e))
 - fix: handle bad patches better ([`771734c4`](https://github.com/gptme/gptme/commit/771734c4))
 - fix: limit image size, fixes exception for large images (fixes [#185](https://github.com/gptme/gptme/issues/185)) ([#188](https://github.com/gptme/gptme/issues/188)) ([`45cfbaca`](https://github.com/gptme/gptme/commit/45cfbaca))
 - fix: fixed incorrectly nested string in f-string ([`4aa3f2da`](https://github.com/gptme/gptme/commit/4aa3f2da))
 - fix: made shell tool more strict, now requires exact 'shell' langtag to run ([`578adcc9`](https://github.com/gptme/gptme/commit/578adcc9))
 - fix: use stdout/stderr as langtags in shell output, instead of as headings ([`c102806d`](https://github.com/gptme/gptme/commit/c102806d))
 - fix: log warning if allowlisted tool could not be found ([`f1864c75`](https://github.com/gptme/gptme/commit/f1864c75))

</p>
</details>

### 🔨 Misc (9)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.20.0 ([`5d0b138c`](https://github.com/gptme/gptme/commit/5d0b138c))
 - docs: added startup time to 'Are we tiny?' page ([`cde7937d`](https://github.com/gptme/gptme/commit/cde7937d))
 - refactor: extracted js part of webui into seperate file ([`919fe93a`](https://github.com/gptme/gptme/commit/919fe93a))
 - docs: improved styling of demos ([`018e6ff6`](https://github.com/gptme/gptme/commit/018e6ff6))
 - docs: more use of rubric::, use sphinxcontrib.asciinema to embed player ([`fdfc6589`](https://github.com/gptme/gptme/commit/fdfc6589))
 - docs: improved getting started, tool docs, and docstrings ([`5c827eb4`](https://github.com/gptme/gptme/commit/5c827eb4))
 - docs: updated docs for running with ollama (litellm no longer needed) ([`f2586024`](https://github.com/gptme/gptme/commit/f2586024))
 - docs: updated docs for running locally with ollama/litellm ([`fa59310f`](https://github.com/gptme/gptme/commit/fa59310f))
 - improve: enhance API key setup UX and error handling ([`7231aa96`](https://github.com/gptme/gptme/commit/7231aa96))

</p>
</details>

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.19.2...v0.20.0


# v0.19.0

These are the release notes for gptme version v0.19.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.18.2:


## 📦 gptme

### ✨ Features (3)

 - feat: added screenshot tool ([#92](https://github.com/gptme/gptme/issues/92)) ([`f4c63c2a`](https://github.com/gptme/gptme/commit/f4c63c2a))
 - feat: added vision tool ([`597c66c5`](https://github.com/gptme/gptme/commit/597c66c5))
 - feat: added -t/--tools option to specify which tools to load ([`48d559b4`](https://github.com/gptme/gptme/commit/48d559b4))

### 🐛 Fixes (13)
<details><summary>Click to expand</summary>
<p>

 - fix: fixed lint ([`a3bcf495`](https://github.com/gptme/gptme/commit/a3bcf495))
 - fix: removed incorrect calls to register_function, removed dead code ([`a4fa62ef`](https://github.com/gptme/gptme/commit/a4fa62ef))
 - fix: more patch tool refactor ([`9627b73b`](https://github.com/gptme/gptme/commit/9627b73b))
 - fix: removed emoji from ask_execute, added secret `auto` answer in ask_execute ([`5eddc6a5`](https://github.com/gptme/gptme/commit/5eddc6a5))
 - fix: added patch previews ([`dd7be0dd`](https://github.com/gptme/gptme/commit/dd7be0dd))
 - fix: completed diff_minimal ([`df9d83cf`](https://github.com/gptme/gptme/commit/df9d83cf))
 - fix: flush stdin before asking to execute (prevent unread input from answering before asked) ([`6ab4dbe2`](https://github.com/gptme/gptme/commit/6ab4dbe2))
 - fix: implemented example_to_xml to support xml-ify prompt ([#146](https://github.com/gptme/gptme/issues/146)) ([`5f37d104`](https://github.com/gptme/gptme/commit/5f37d104))
 - fix: init tools in evals ([`44e76ff4`](https://github.com/gptme/gptme/commit/44e76ff4))
 - fix: improved patch warning message on large patches ([`5e635b6c`](https://github.com/gptme/gptme/commit/5e635b6c))
 - fix: froze more dataclasses ([`953f8016`](https://github.com/gptme/gptme/commit/953f8016))
 - fix: improve tool init logic for tools needing it (python), added toolspec args docs ([`f8e5cd68`](https://github.com/gptme/gptme/commit/f8e5cd68))
 - fix: use prompt chaining in subagent task to improve reliability ([`0dd6583c`](https://github.com/gptme/gptme/commit/0dd6583c))

</p>
</details>

### 🔨 Misc (8)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.19.0 ([`bbe3586a`](https://github.com/gptme/gptme/commit/bbe3586a))
 - docs: remove completed TODOs ([`337b025c`](https://github.com/gptme/gptme/commit/337b025c))
 - refactor: refactor patch tool, with plans for producing minimal diffs to replace inefficient diffs in log ([`e2b2d6a0`](https://github.com/gptme/gptme/commit/e2b2d6a0))
 - docs: fixed docstring for gptme.prompts ([`027cb06f`](https://github.com/gptme/gptme/commit/027cb06f))
 - docs: keep copyright year up-to-date ([`1ac4aee0`](https://github.com/gptme/gptme/commit/1ac4aee0))
 - docs: fixed automation docs ([`a70b5b5e`](https://github.com/gptme/gptme/commit/a70b5b5e))
 - docs: changed erik.bjareholt.com/gptme/ links to gptme.org/ ([`52baf5b9`](https://github.com/gptme/gptme/commit/52baf5b9))
 - docs: added minimal automation docs ([#144](https://github.com/gptme/gptme/issues/144)) ([`3902b865`](https://github.com/gptme/gptme/commit/3902b865))

</p>
</details>

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.18.2...v0.19.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.18.2...v0.19.0


# v0.18.0

These are the release notes for gptme version v0.18.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.17.0:


## 📦 gptme

### ✨ Features (1)

 - feat: added better interrupt handling, requiring two interrupts within 1 sec to exit (when not generating response or executing tools) ([`70290590`](https://github.com/gptme/gptme/commit/70290590))

### 🐛 Fixes (16)
<details><summary>Click to expand</summary>
<p>

 - fix: nit to python tool instructions ([`94b1aaf1`](https://github.com/gptme/gptme/commit/94b1aaf1))
 - fix: refactored cli params, removed special 'ask' value for name ([`cbf1d12b`](https://github.com/gptme/gptme/commit/cbf1d12b))
 - fix: persist pinned and hide to jsonl, only include files, pinned, etc in toml output if set ([`c54c1f24`](https://github.com/gptme/gptme/commit/c54c1f24))
 - fix: fixed bug in refactor ([`43f912eb`](https://github.com/gptme/gptme/commit/43f912eb))
 - fix: fix resume after refactor ([`5d1a7612`](https://github.com/gptme/gptme/commit/5d1a7612))
 - fix: minor fixes, set Console.log_path=False, undo /exit message before exit ([`711cab4c`](https://github.com/gptme/gptme/commit/711cab4c))
 - fix: fixes to cli, improved interrupt, refactored conversation picking to not run when piped, dont run assistant until user message present (project context fix) ([`417b319b`](https://github.com/gptme/gptme/commit/417b319b))
 - fix: improve rich usage, change calls to use gptme.util.console.{print,input,log} ([`8cf53cbd`](https://github.com/gptme/gptme/commit/8cf53cbd))
 - fix: improved browser tool search output, if python tool had result then skip stdout in msg ([`4aaf2023`](https://github.com/gptme/gptme/commit/4aaf2023))
 - fix: updated system prompt to mention `<thinking>` tags ([`c686dab8`](https://github.com/gptme/gptme/commit/c686dab8))
 - fix: limit shell output ([`8a62859b`](https://github.com/gptme/gptme/commit/8a62859b))
 - fix: limited default number of listed conversations to 20 in webui ([`84ab2201`](https://github.com/gptme/gptme/commit/84ab2201))
 - fix: added OpenRouter url when asking for API key ([`87280127`](https://github.com/gptme/gptme/commit/87280127))
 - fix: fix conversation list order in picker, lazily load conversation metadata, add get_user_conversations(), add ?limit=`<int>` to /api/conversations and use it in webui ([`9c53aa0f`](https://github.com/gptme/gptme/commit/9c53aa0f))
 - fix: set gptme.__version__ ([`abcfec0a`](https://github.com/gptme/gptme/commit/abcfec0a))
 - fix: fixed prompt chaining, added test (fixes [#106](https://github.com/gptme/gptme/issues/106)) ([`deac8dba`](https://github.com/gptme/gptme/commit/deac8dba))

</p>
</details>

### 🔨 Misc (15)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.18.0 ([`4a7404f4`](https://github.com/gptme/gptme/commit/4a7404f4))
 - refactor: separated cli/interactive stuff from chat() into main() ([`9808166d`](https://github.com/gptme/gptme/commit/9808166d))
 - docs: added more examples ([`da88a5f5`](https://github.com/gptme/gptme/commit/da88a5f5))
 - docs: improved docs config, fixed warnings, build in strict mode in CI (no warning allowed) ([`ae45141f`](https://github.com/gptme/gptme/commit/ae45141f))
 - tests: fixed browser search test ([`a106d5c0`](https://github.com/gptme/gptme/commit/a106d5c0))
 - docs(README): added ToC ([`e88d4265`](https://github.com/gptme/gptme/commit/e88d4265))
 - docs: added link to examples from intro ([`6d1471e0`](https://github.com/gptme/gptme/commit/6d1471e0))
 - refactor: renamed function to remove 'private' underscore prefix ([`a7a5cf66`](https://github.com/gptme/gptme/commit/a7a5cf66))
 - docs: updated README ([`5983f5b5`](https://github.com/gptme/gptme/commit/5983f5b5))
 - tests: fixed test ([`d0a946b2`](https://github.com/gptme/gptme/commit/d0a946b2))
 - docs: added TODO comment ([`8ad35e15`](https://github.com/gptme/gptme/commit/8ad35e15))
 - docs: minor improved examples ([`1158d95b`](https://github.com/gptme/gptme/commit/1158d95b))
 - docs: improved docs structure (User & Dev guide), improved CLI & API Reference, extracted Prompts as new page, added Examples ([`e1b881a3`](https://github.com/gptme/gptme/commit/e1b881a3))
 - format: fixed formatting and typing ([`68c25526`](https://github.com/gptme/gptme/commit/68c25526))
 - docs: added external link to docs index/sidebar ([`c9bc4884`](https://github.com/gptme/gptme/commit/c9bc4884))

</p>
</details>

*(excluded 8 less relevant [commits](https://github.com/gptme/gptme/compare/v0.17.0...v0.18.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.17.0...v0.18.0


# v0.17.0

These are the release notes for gptme version v0.17.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.16.0:


## 📦 gptme

### ✨ Features (1)

 - feat: add support for XML-formatted tool calls ([#121](https://github.com/gptme/gptme/issues/121)) ([`d0b070fc`](https://github.com/gptme/gptme/commit/d0b070fc))

### 🐛 Fixes (23)
<details><summary>Click to expand</summary>
<p>

 - fix: changed warning log to debug ([`0c4c1869`](https://github.com/gptme/gptme/commit/0c4c1869))
 - fix: minor eval refactor (improved type names), clarified python tool instructions ([`e0c79a41`](https://github.com/gptme/gptme/commit/e0c79a41))
 - fix: disable tqdm in tests ([`77ef4fa1`](https://github.com/gptme/gptme/commit/77ef4fa1))
 - fix: reduced number of decimals in eval output ([`b216179b`](https://github.com/gptme/gptme/commit/b216179b))
 - fix: removed spammy message when not in a git repo ([`be3d0232`](https://github.com/gptme/gptme/commit/be3d0232))
 - fix: futher reliability improvements to evals ([`622e5744`](https://github.com/gptme/gptme/commit/622e5744))
 - fix: added tqdm progress bar to eval ([`cd33e06d`](https://github.com/gptme/gptme/commit/cd33e06d))
 - fix: nitpick ([`11f1e7ee`](https://github.com/gptme/gptme/commit/11f1e7ee))
 - fix: improved typing in gptme.evals.run ([`6d00be7a`](https://github.com/gptme/gptme/commit/6d00be7a))
 - fix: more fixes, speed up list_chats and search_chats by lazily searching chronologically ([`8c3cb778`](https://github.com/gptme/gptme/commit/8c3cb778))
 - fix: more fixes and store eval case results in result directory ([`1e23ecbb`](https://github.com/gptme/gptme/commit/1e23ecbb))
 - fix: comment out warning for unknown codeblock types, add lru_cache to frequently called get_tool_for_langtag, added wip llm_openai.list_models ([`aff213f6`](https://github.com/gptme/gptme/commit/aff213f6))
 - fix: refactored evals, fixed leaked semaphore warnings, read logs and naively compute tokens from output ([`3bbd88b4`](https://github.com/gptme/gptme/commit/3bbd88b4))
 - fix: improved system prompt, added system prompt to docs ([#123](https://github.com/gptme/gptme/issues/123)) ([`62220b1a`](https://github.com/gptme/gptme/commit/62220b1a))
 - fix: refactored and improved evals ([#122](https://github.com/gptme/gptme/issues/122)) ([`e4eb81ca`](https://github.com/gptme/gptme/commit/e4eb81ca))
 - fix: improved eval stream capturing logic ([`eecabac8`](https://github.com/gptme/gptme/commit/eecabac8))
 - fix: improved evals output capturing, don't capture by default if a single test is run, and write streams to results directory ([`8e9ad4c1`](https://github.com/gptme/gptme/commit/8e9ad4c1))
 - fix: process eval run futures in the order they are finished, instead of waiting in order ([`5601fae5`](https://github.com/gptme/gptme/commit/5601fae5))
 - fix: remove the missing datascience packages warning at python tool init ([`09f115f2`](https://github.com/gptme/gptme/commit/09f115f2))
 - fix: add ignorelist for certain known non-executable codeblock langs ([`7b82b033`](https://github.com/gptme/gptme/commit/7b82b033))
 - fix: lowered logging level for some spammy messages ([`9a729af0`](https://github.com/gptme/gptme/commit/9a729af0))
 - fix: disable placeholder-aware patching if placeholders in original file, improve error message if file not found ([`1a1e9fb6`](https://github.com/gptme/gptme/commit/1a1e9fb6))
 - fix: dont ask for version in bump_version script if already on tag and pyproject updated ([`68aae660`](https://github.com/gptme/gptme/commit/68aae660))

</p>
</details>

### 🔨 Misc (11)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.17.0 ([`3044149e`](https://github.com/gptme/gptme/commit/3044149e))
 - tests: fixed test_search_chats test ([`56ffb5a7`](https://github.com/gptme/gptme/commit/56ffb5a7))
 - docs: updated README ([`a837b327`](https://github.com/gptme/gptme/commit/a837b327))
 - tests: added particle effect integration-test example ([`5aa79555`](https://github.com/gptme/gptme/commit/5aa79555))
 - tests: fixed broken test in CI ([`49472653`](https://github.com/gptme/gptme/commit/49472653))
 - refactor: refactored Message into a frozen dataclass ([`8887ca8b`](https://github.com/gptme/gptme/commit/8887ca8b))
 - refactor: moved openai model metadata into seperate file, added make update-models to use gptme to update it ([`11221dbc`](https://github.com/gptme/gptme/commit/11221dbc))
 - chore: updated gitignore ([`f2b8be1b`](https://github.com/gptme/gptme/commit/f2b8be1b))
 - docs: updated README ([`ee875999`](https://github.com/gptme/gptme/commit/ee875999))
 - tests: fixed test_eval_cli running on models than intended, and not the tested provider ([`d0ab0429`](https://github.com/gptme/gptme/commit/d0ab0429))
 - refactor: refactored eval TypedDict types to dataclasses ([`25de7f71`](https://github.com/gptme/gptme/commit/25de7f71))

</p>
</details>

*(excluded 5 less relevant [commits](https://github.com/gptme/gptme/compare/v0.16.0...v0.17.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.16.0...v0.17.0


# v0.16.0

These are the release notes for gptme version v0.16.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.15.0:


## 📦 gptme

### ✨ Features (7)

 - feat: basic support for openai/o1-preview and openai/o1-mini ([#117](https://github.com/gptme/gptme/issues/117)) ([`cf13bae8`](https://github.com/gptme/gptme/commit/cf13bae8))
 - feat: added youtube tool ([#116](https://github.com/gptme/gptme/issues/116)) ([`ad669920`](https://github.com/gptme/gptme/commit/ad669920))
 - feat: support placeholders in patches ([#114](https://github.com/gptme/gptme/issues/114)) ([`2e08a3a1`](https://github.com/gptme/gptme/commit/2e08a3a1))
 - feat: added read_chat function to chats tool ([#115](https://github.com/gptme/gptme/issues/115)) ([`527ce5ad`](https://github.com/gptme/gptme/commit/527ce5ad))
 - feat: added list_chats to chats tool, and cleaned up/refactored non-ToolSpec-using tools ([#110](https://github.com/gptme/gptme/issues/110)) ([`5cb3936d`](https://github.com/gptme/gptme/commit/5cb3936d))
 - feat: added a basic tool to search past conversation logs ([#109](https://github.com/gptme/gptme/issues/109)) ([`4e361093`](https://github.com/gptme/gptme/commit/4e361093))
 - feat: added terminal bell to alert the user they have been returned control ([`1da7d047`](https://github.com/gptme/gptme/commit/1da7d047))

### 🐛 Fixes (13)
<details><summary>Click to expand</summary>
<p>

 - fix: support multiple patches in a single codeblock ([#118](https://github.com/gptme/gptme/issues/118)) ([`ae3ea89b`](https://github.com/gptme/gptme/commit/ae3ea89b))
 - fix: made eval harness more reliable, using Manager ([#119](https://github.com/gptme/gptme/issues/119)) ([`0787f597`](https://github.com/gptme/gptme/commit/0787f597))
 - fix: remove spammy log message when youtube tool not available ([`6ab895c2`](https://github.com/gptme/gptme/commit/6ab895c2))
 - fix: extended the patch tool prompt to not strictly forbid placeholders, mention scoping strategies and fallback to save ([`7cf2119f`](https://github.com/gptme/gptme/commit/7cf2119f))
 - fix: added ./projects and ./demos to gitignore ([`ef7d9fd8`](https://github.com/gptme/gptme/commit/ef7d9fd8))
 - fix: change error on unknown codeblock langtags into warning, dont warn on empty langtag ([`481ab38e`](https://github.com/gptme/gptme/commit/481ab38e))
 - fix: minor improvements to --help output, updated --help example output in README ([`78f461ca`](https://github.com/gptme/gptme/commit/78f461ca))
 - fix: fixed excessive whitespace in patch example prompt ([`f0818c3d`](https://github.com/gptme/gptme/commit/f0818c3d))
 - fix: fixed formatting in tools/base.py ([`e3987bdd`](https://github.com/gptme/gptme/commit/e3987bdd))
 - fix: added gptme/server/__init__.py ([`02a3ecf4`](https://github.com/gptme/gptme/commit/02a3ecf4))
 - fix: improved how ToolUse examples are formatted ([`1e6574f1`](https://github.com/gptme/gptme/commit/1e6574f1))
 - fix: fixed bug in how examples were generated for patch tool ([`c8489ecc`](https://github.com/gptme/gptme/commit/c8489ecc))
 - fix: dont crash on unknown shell syntax ([`dd6fff7c`](https://github.com/gptme/gptme/commit/dd6fff7c))

</p>
</details>

### 🔨 Misc (5)

 - chore: bump version to 0.16.0 ([`d7f170cd`](https://github.com/gptme/gptme/commit/d7f170cd))
 - tests: bumped short token allowed token length ([`0208e76a`](https://github.com/gptme/gptme/commit/0208e76a))
 - refactor: refactor tools, codeblock, and tooluse ([#113](https://github.com/gptme/gptme/issues/113)) ([`0cad5ca7`](https://github.com/gptme/gptme/commit/0cad5ca7))
 - tests: added minimal tests for chats tool ([`d079af43`](https://github.com/gptme/gptme/commit/d079af43))
 - format: formatted codebase ([`740f1329`](https://github.com/gptme/gptme/commit/740f1329))

*(excluded 3 less relevant [commits](https://github.com/gptme/gptme/compare/v0.15.0...v0.16.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.15.0...v0.16.0


# v0.15.0

These are the release notes for gptme version v0.15.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.14.2:


## 📦 gptme

### ✨ Features (4)

 - feat: added `screenshot_url` function to browser tool ([`9cd38500`](https://github.com/gptme/gptme/commit/9cd38500))
 - feat(bot): support non-change questions/answers ([`de9844d6`](https://github.com/gptme/gptme/commit/de9844d6))
 - feat: added special prompting for --non-interactive ([`9d912c37`](https://github.com/gptme/gptme/commit/9d912c37))
 - feat(github-action): use Docker for gptme execution ([`97f87247`](https://github.com/gptme/gptme/commit/97f87247))

### 🐛 Fixes (11)
<details><summary>Click to expand</summary>
<p>

 - fix: minor improvement to patch tool prompt ([`722b2c4a`](https://github.com/gptme/gptme/commit/722b2c4a))
 - fix: fixed bug with extra 'Skipped hidden system messages' lines from workspace prompt ([`5937cb7a`](https://github.com/gptme/gptme/commit/5937cb7a))
 - fix(anthropic): fixed vision and other issues with preparing messages ([`b9b84554`](https://github.com/gptme/gptme/commit/b9b84554))
 - fix: don't include paths for slash-command arguments, dont inlude workspace prompt on resume ([`4900d190`](https://github.com/gptme/gptme/commit/4900d190))
 - fix: catch rich.print() errors and fall back to builtins.print() when printing messages ([`8698befd`](https://github.com/gptme/gptme/commit/8698befd))
 - fix: fixed bug checking for browser tool when not available ([`f86569df`](https://github.com/gptme/gptme/commit/f86569df))
 - fix: set session size for tmux tool, fixed wrong tmux examples (terminal instead of tmux) ([`1ef45875`](https://github.com/gptme/gptme/commit/1ef45875))
 - fix: changed tabulate tablefmt in eval output ([`42518547`](https://github.com/gptme/gptme/commit/42518547))
 - fix: fixed docker workspace permissions in bot action ([`aee7f95b`](https://github.com/gptme/gptme/commit/aee7f95b))
 - fix: switch from timeout-minutes to using `timeout` command in bot action step ([`fa23c669`](https://github.com/gptme/gptme/commit/fa23c669))
 - fix: add 'shell' to shell tool's block_types ([`d2c48790`](https://github.com/gptme/gptme/commit/d2c48790))

</p>
</details>

### 🔨 Misc (9)
<details><summary>Click to expand</summary>
<p>

 - chore: bump version to 0.15.0 ([`01c48121`](https://github.com/gptme/gptme/commit/01c48121))
 - docs: added TODO comment in python tool about which venv the repl should ideally run in ([`0d8eb85f`](https://github.com/gptme/gptme/commit/0d8eb85f))
 - docs: fixed bad reference ([`780b3c85`](https://github.com/gptme/gptme/commit/780b3c85))
 - refactor(eval): refactored gptme.eval module, splitting gptme.eval.evals into gptme.eval.suites.{basic, init-project, browser} ([`bfe5e1b8`](https://github.com/gptme/gptme/commit/bfe5e1b8))
 - docs: removed Inputs section from bot.md ([`e18dcb1e`](https://github.com/gptme/gptme/commit/e18dcb1e))
 - docs: renamed webui.rst to server.rst, added bot.md to index and updated instructions ([`18b7268d`](https://github.com/gptme/gptme/commit/18b7268d))
 - docs: added example of eval run output ([`c1987fa3`](https://github.com/gptme/gptme/commit/c1987fa3))
 - tests: fixed blinking test ([`c6953b39`](https://github.com/gptme/gptme/commit/c6953b39))
 - tests: clarified that we're testing so that it doesnt try to show runnable examples ([`8514bd33`](https://github.com/gptme/gptme/commit/8514bd33))

</p>
</details>

*(excluded 20 less relevant [commits](https://github.com/gptme/gptme/compare/v0.14.2...v0.15.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.14.2...v0.15.0


# v0.14.0

These are the release notes for gptme version v0.14.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.13.2:


## 📦 gptme

### ✨ Features (2)

 - feat: anthropic prompt caching beta ([`bb3d9a58`](https://github.com/gptme/gptme/commit/bb3d9a58))
 - feat: started working on vision ([`7b0c5b0f`](https://github.com/gptme/gptme/commit/7b0c5b0f))

### 🐛 Fixes (25)
<details><summary>Click to expand</summary>
<p>

 - fix: improved test flakiness ([`0758c4d4`](https://github.com/gptme/gptme/commit/0758c4d4))
 - fix: check if gitignore exists ([`d664f4b2`](https://github.com/gptme/gptme/commit/d664f4b2))
 - fix: moved vue@create example into bash tool (dont try to do it interactively) ([`5ed36eb8`](https://github.com/gptme/gptme/commit/5ed36eb8))
 - fix: switch to ```ipython syntax for executing with python tool, to differentiate from code samples (see [#67](https://github.com/gptme/gptme/issues/67)) ([`42ee56ab`](https://github.com/gptme/gptme/commit/42ee56ab))
 - fix: changed save format to be more explicit ([`68077b6d`](https://github.com/gptme/gptme/commit/68077b6d))
 - fix: removed spammy warning ([`90aa4a62`](https://github.com/gptme/gptme/commit/90aa4a62))
 - fix: removed use of NotRequired for TypedDict (not in Python 3.10) ([`cfce1303`](https://github.com/gptme/gptme/commit/cfce1303))
 - fix: use anthropic api max_retries instead of custom retry_anthropic decorator ([`008f58c5`](https://github.com/gptme/gptme/commit/008f58c5))
 - fix: added retry_anthropic decorator for rate limits ([`d37d7fbc`](https://github.com/gptme/gptme/commit/d37d7fbc))
 - fix: fixed to evals, capture eval output on timeout/terminate ([`cd0862a7`](https://github.com/gptme/gptme/commit/cd0862a7))
 - fix: fixed spammy prints ([`855a46b0`](https://github.com/gptme/gptme/commit/855a46b0))
 - fix: clarified return format for subagent ([`e5e2a9ab`](https://github.com/gptme/gptme/commit/e5e2a9ab))
 - fix: fixed bug in transform_examples_to_chat_directives ([`2997aa43`](https://github.com/gptme/gptme/commit/2997aa43))
 - fix: print logs dir with --version command ([`1ca6127f`](https://github.com/gptme/gptme/commit/1ca6127f))
 - fix: enabled stricter linting and fixed lints (apparently needed given a25aa7d369dec79341500bcf735e4237def53052) ([`bf67b323`](https://github.com/gptme/gptme/commit/bf67b323))
 - fix: fixed nasty bug with mutable argument default ([`a25aa7d3`](https://github.com/gptme/gptme/commit/a25aa7d3))
 - fix: switch recommended openai model to gpt-4o ([`b3582aca`](https://github.com/gptme/gptme/commit/b3582aca))
 - fix: moved len_tokens and msgs2dicts from util.py to message.py ([`94bade33`](https://github.com/gptme/gptme/commit/94bade33))
 - fix: support nested codeblocks, rewrote/refactored codeblock parsing/management ([`3e291a4f`](https://github.com/gptme/gptme/commit/3e291a4f))
 - fix: fixed incorrect storage format for `Message.to_dict` ([`07f1cbbf`](https://github.com/gptme/gptme/commit/07f1cbbf))
 - fix: added preliminary nested codeblock support ([`885e544b`](https://github.com/gptme/gptme/commit/885e544b))
 - fix: added openai vision support ([`6bbec93b`](https://github.com/gptme/gptme/commit/6bbec93b))
 - fix: completed basic vision support ([`f1846079`](https://github.com/gptme/gptme/commit/f1846079))
 - fix: correct extremely short 'Thinking...' message, now wait until first character ([`b25e576c`](https://github.com/gptme/gptme/commit/b25e576c))
 - fix: typing for subagent tool, added --check-untypes-defs to mypy ([`d94a71e5`](https://github.com/gptme/gptme/commit/d94a71e5))

</p>
</details>

### 🔨 Misc (20)
<details><summary>Click to expand</summary>
<p>

 - chore: bumped version to v0.14.0 ([`d4c55b61`](https://github.com/gptme/gptme/commit/d4c55b61))
 - refactor: renamed terminal tool to tmux ([`79355bc6`](https://github.com/gptme/gptme/commit/79355bc6))
 - tests: increase max tokens for full system prompt significantly ([`c785cfef`](https://github.com/gptme/gptme/commit/c785cfef))
 - tests: made test_subprocess less flaky ([`34234742`](https://github.com/gptme/gptme/commit/34234742))
 - tests: added difficult but reasonably simple integration test example (create vite project, build simple app) ([`57b6febb`](https://github.com/gptme/gptme/commit/57b6febb))
 - docs(README): minor improvements ([`c43cc8a1`](https://github.com/gptme/gptme/commit/c43cc8a1))
 - docs(README): misc minor improvements ([`c705c801`](https://github.com/gptme/gptme/commit/c705c801))
 - tests: removed uninteresting examples from test-integration.sh ([`18c1afa0`](https://github.com/gptme/gptme/commit/18c1afa0))
 - docs: added links to top of README ([`b15d6865`](https://github.com/gptme/gptme/commit/b15d6865))
 - docs(README): added mention that vision works, 'GPTMe' -> 'gptme' for title, mention OpenRouter support ([`4e39f634`](https://github.com/gptme/gptme/commit/4e39f634))
 - tests: run both eval tests (cli and direct call) for better coverage somehow ([`859efbec`](https://github.com/gptme/gptme/commit/859efbec))
 - tests: fixed tests failing due to new file ([`706f13c9`](https://github.com/gptme/gptme/commit/706f13c9))
 - refactor: refactored provider-specific code into new files llm_openai.py and llm_anthropic.py ([`eec82155`](https://github.com/gptme/gptme/commit/eec82155))
 - tests: fix coverage for eval tests (multiprocessing workaround) ([`9ef1ec46`](https://github.com/gptme/gptme/commit/9ef1ec46))
 - tests: added test_eval_cli and cleaned up eval code ([`c0e5c874`](https://github.com/gptme/gptme/commit/c0e5c874))
 - tests: basic test for evals ([`770ed2ca`](https://github.com/gptme/gptme/commit/770ed2ca))
 - tests: fix --version test ([`4ca5078a`](https://github.com/gptme/gptme/commit/4ca5078a))
 - tests: remove ambiguity in subagent fib test prompt ([`fe063ec1`](https://github.com/gptme/gptme/commit/fe063ec1))
 - tests: added test for vision ([`a740194b`](https://github.com/gptme/gptme/commit/a740194b))
 - refactor: moved eval code into `gptme.eval`, added `gptme-eval` entrypoint, fixed typing ([`8a1bb097`](https://github.com/gptme/gptme/commit/8a1bb097))

</p>
</details>

*(excluded 14 less relevant [commits](https://github.com/gptme/gptme/compare/v0.13.2...v0.14.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.13.2...v0.14.0


# v0.13.0

These are the release notes for gptme version v0.13.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.12.8:


## 📦 gptme

### 🔨 Misc (1)

 - test: added basic extract json tests for terminal tool ([`34865902`](https://github.com/gptme/gptme/commit/34865902))

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.12.8...v0.13.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.12.8...v0.13.0


# v0.12.0

These are the release notes for gptme version v0.12.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.11.1:


## 📦 gptme

### ✨ Features (3)

 - feat: added ToolSpec for all tools, added basic XML-callstyle for tools ([`40905b0e`](https://github.com/gptme/gptme/commit/40905b0e))
 - feat(wip): started work on subagent ([`78aa1734`](https://github.com/gptme/gptme/commit/78aa1734))
 - feat: improvements to browsing, including link-following ([`15bd0acb`](https://github.com/gptme/gptme/commit/15bd0acb))

### 🐛 Fixes (25)
<details><summary>Click to expand</summary>
<p>

 - fix: removed order-sensitivity for test ([`c435b30b`](https://github.com/gptme/gptme/commit/c435b30b))
 - fix: added support for gpt-4o and gpt-4o-mini ([`9d81b319`](https://github.com/gptme/gptme/commit/9d81b319))
 - fix: fixed issues with applying patches ([`120233c0`](https://github.com/gptme/gptme/commit/120233c0))
 - fix: fix loading of base tools when browser tool not available ([`74e4b189`](https://github.com/gptme/gptme/commit/74e4b189))
 - fix: fixed typing ([`4c955ffa`](https://github.com/gptme/gptme/commit/4c955ffa))
 - fix: disabled test for search with duckduckgo ([`1411c8d3`](https://github.com/gptme/gptme/commit/1411c8d3))
 - fix: simplified `is_supported_codeblock` ([`cf30c44f`](https://github.com/gptme/gptme/commit/cf30c44f))
 - fix: added debug logging for test ([`0f3c0654`](https://github.com/gptme/gptme/commit/0f3c0654))
 - fix: leftover change leading to test failure ([`a4042d27`](https://github.com/gptme/gptme/commit/a4042d27))
 - fix: disable stripping dates and common prefixes from stdout/stderr in shell tool ([`3803f33b`](https://github.com/gptme/gptme/commit/3803f33b))
 - fix: fixed escaping when serializing messages to toml ([`50e81598`](https://github.com/gptme/gptme/commit/50e81598))
 - fix: fixed model metadata (added gpt-4-turbo) ([`9d74bf5d`](https://github.com/gptme/gptme/commit/9d74bf5d))
 - fix(nit): fixed comment and unused call ([`f9441b7c`](https://github.com/gptme/gptme/commit/f9441b7c))
 - fix: construct prompt from ToolSpec ([`0c76b975`](https://github.com/gptme/gptme/commit/0c76b975))
 - fix: include a summary of function-tools registered in the Python REPL ([`0eb5d5a8`](https://github.com/gptme/gptme/commit/0eb5d5a8))
 - fix: renamed register_function_conditional to register_function_if ([`e256fc96`](https://github.com/gptme/gptme/commit/e256fc96))
 - fix: let other tools register functions in the Python tool REPL ([`f4688aef`](https://github.com/gptme/gptme/commit/f4688aef))
 - fix: fixed imports in test_eval.py ([`83a747c2`](https://github.com/gptme/gptme/commit/83a747c2))
 - fix: strip ANSI escape sequences in Python output ([`a41a3145`](https://github.com/gptme/gptme/commit/a41a3145))
 - fix: fixed bug where Python output is duplicated in result message ([`a8cc4ef4`](https://github.com/gptme/gptme/commit/a8cc4ef4))
 - fix: fixed bug where tool prompts wouldn't show on installs without browser extras ([`92d0f75c`](https://github.com/gptme/gptme/commit/92d0f75c))
 - fix: use browser tools by writing Python code, added stripping of data:image's ([`bd32bc7a`](https://github.com/gptme/gptme/commit/bd32bc7a))
 - fix: reraise exception if over `tries` ([`b3de8f90`](https://github.com/gptme/gptme/commit/b3de8f90))
 - fix: cleaned up code that is now run as test ([`99d3d3d0`](https://github.com/gptme/gptme/commit/99d3d3d0))
 - fix: restart shell on broken pipe, handle composite expressions ([#70](https://github.com/gptme/gptme/issues/70)) ([`8612ca2b`](https://github.com/gptme/gptme/commit/8612ca2b))

</p>
</details>

### 🔨 Misc (6)

 - test: fixed _shorten_stdout tests ([`edb82ded`](https://github.com/gptme/gptme/commit/edb82ded))
 - nit: renamed func loop -> step ([`cafede58`](https://github.com/gptme/gptme/commit/cafede58))
 - refactor: refactored eval/main.py into seperate files ([`3eb49f22`](https://github.com/gptme/gptme/commit/3eb49f22))
 - test: increase system prompt token allowance in tests ([`f1655f63`](https://github.com/gptme/gptme/commit/f1655f63))
 - test: marked evals, disable running by default ([`14097057`](https://github.com/gptme/gptme/commit/14097057))
 - docs: fixed link ([`d3238e36`](https://github.com/gptme/gptme/commit/d3238e36))

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.11.1...v0.12.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.11.1...v0.12.0


# v0.11.0

These are the release notes for gptme version v0.11.0.

## Contributors

Thanks to everyone who contributed to this release:

@AntonOsika, @erikbjare

## Changelog

Changes since v0.10.5:


## 📦 gptme

### ✨ Features (2)

 - feat: mirror working directory in shell and Python process ([#49](https://github.com/gptme/gptme/issues/49)) ([`0b9c3228`](https://github.com/gptme/gptme/commit/0b9c3228))
 - feat: support paths/URLs in any prompt, refactored entrypoint to call a new public API with core logic ([#37](https://github.com/gptme/gptme/issues/37)) ([`aaf60e57`](https://github.com/gptme/gptme/commit/aaf60e57))

### 🐛 Fixes (9)
<details><summary>Click to expand</summary>
<p>

 - fix: exit with appropriate exitcode if evals pass/fail ([`3a0e4dca`](https://github.com/gptme/gptme/commit/3a0e4dca))
 - fix: fixed shell cd test ([`9932b27a`](https://github.com/gptme/gptme/commit/9932b27a))
 - fix: fixed bugs in eval, upload/download binary files, cd to cwd before every shell command ([`cefbbe86`](https://github.com/gptme/gptme/commit/cefbbe86))
 - fix: fixed shell output printing (no extra newlines) ([`cf91873c`](https://github.com/gptme/gptme/commit/cf91873c))
 - fix: fixed a spelling error ([`8c1eadab`](https://github.com/gptme/gptme/commit/8c1eadab))
 - fix: import NotRequired from typing_extensions ([`2718ebac`](https://github.com/gptme/gptme/commit/2718ebac))
 - fix: improved path detection in prompt ([`3f74635d`](https://github.com/gptme/gptme/commit/3f74635d))
 - fix: add price_input and price_output to model metadata, refactored ModelDict TypedDict into ModelMeta dataclass ([`a0f1a731`](https://github.com/gptme/gptme/commit/a0f1a731))
 - fix: switched to ipython for handling Python execution ([#41](https://github.com/gptme/gptme/issues/41)) ([`b75182c7`](https://github.com/gptme/gptme/commit/b75182c7))

</p>
</details>

### 🔨 Misc (14)
<details><summary>Click to expand</summary>
<p>

 - docs: improved entrypoints' docs for better cli docs ([`89506507`](https://github.com/gptme/gptme/commit/89506507))
 - docs: added demos page to docs ([`ab2687c9`](https://github.com/gptme/gptme/commit/ab2687c9))
 - test: run evals as tests, refactor evals, added python-xdist for parallel testing ([`14ca2df6`](https://github.com/gptme/gptme/commit/14ca2df6))
 - test: switch from gpt-3.5-turbo to gpt-4-1106-preview ("gpt-4-turbo") in cli tests ([`75e79bda`](https://github.com/gptme/gptme/commit/75e79bda))
 - refactor: made eval abstractions more general ([#48](https://github.com/gptme/gptme/issues/48)) ([`bf64f208`](https://github.com/gptme/gptme/commit/bf64f208))
 - refactor: moved init code into init.py ([`0e1a0f5e`](https://github.com/gptme/gptme/commit/0e1a0f5e))
 - test: minor improvements to eval ([`e3aa3363`](https://github.com/gptme/gptme/commit/e3aa3363))
 - test: further eval improvements ([`bfc2f14f`](https://github.com/gptme/gptme/commit/bfc2f14f))
 - test: added eval test that accepts stdin ([`28e3a3cc`](https://github.com/gptme/gptme/commit/28e3a3cc))
 - test: fixed bugs and improved output in evals ([`953614f5`](https://github.com/gptme/gptme/commit/953614f5))
 - test: continued work on evals ([`0c070ec2`](https://github.com/gptme/gptme/commit/0c070ec2))
 - test: added basic eval code ([`be678f3a`](https://github.com/gptme/gptme/commit/be678f3a))
 - docs: fixed link to demo ([`66e9e49a`](https://github.com/gptme/gptme/commit/66e9e49a))
 - docs: added more demos ([`7de6c74a`](https://github.com/gptme/gptme/commit/7de6c74a))

</p>
</details>

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.10.5...v0.11.0


# v0.10.5

These are the release notes for gptme version v0.10.5.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.10.4:


## 📦 gptme

### 🐛 Fixes (4)

 - fix: fixed regression in 78e5f52 ([`7160b974`](https://github.com/gptme/gptme/commit/7160b974))
 - fix: output stdout/stderr directly for shell commands, to indicate progress ([`be40f10c`](https://github.com/gptme/gptme/commit/be40f10c))
 - fix: fixed handling codeblocks that contain triple backticks ([`78e5f52d`](https://github.com/gptme/gptme/commit/78e5f52d))
 - fix: fix uncaught assert when patching missing file (fixes [#39](https://github.com/gptme/gptme/issues/39)) ([`e34fb2c9`](https://github.com/gptme/gptme/commit/e34fb2c9))

### 🔨 Misc (2)

 - docs: added link to issue ([`0a0f7ca7`](https://github.com/gptme/gptme/commit/0a0f7ca7))
 - test: added complex plotting example to test-integration.sh ([`3c1524e1`](https://github.com/gptme/gptme/commit/3c1524e1))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.10.4...v0.10.5


# v0.10.4

These are the release notes for gptme version v0.10.4.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.10.3:


## 📦 gptme

### ✨ Features (2)

 - feat: added branching to logmanager ([#33](https://github.com/gptme/gptme/issues/33)) ([`808a8abd`](https://github.com/gptme/gptme/commit/808a8abd))
 - feat: added /tokens command ([`e8415ecc`](https://github.com/gptme/gptme/commit/e8415ecc))

### 🐛 Fixes (4)

 - fix: allow unknown models (again) ([`a89c385d`](https://github.com/gptme/gptme/commit/a89c385d))
 - fix: add missing param to init in tests ([`86d5d747`](https://github.com/gptme/gptme/commit/86d5d747))
 - fix: more improvements to, and integration of, models.py ([`107c57ce`](https://github.com/gptme/gptme/commit/107c57ce))
 - fix: added models.py with metadata about model context lengths ([`c76211d7`](https://github.com/gptme/gptme/commit/c76211d7))

### 🔨 Misc (3)

 - docs: remove mentions of 'Advanced Data Analysis' (now only 'Code Interpreter') ([`923c9280`](https://github.com/gptme/gptme/commit/923c9280))
 - docs: removed old & outdated docstring ([`d29d6457`](https://github.com/gptme/gptme/commit/d29d6457))
 - docs: fixed links to issues in README ([`3217439b`](https://github.com/gptme/gptme/commit/3217439b))

*(excluded 5 less relevant [commits](https://github.com/gptme/gptme/compare/v0.10.3...v0.10.4))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.10.3...v0.10.4


# v0.10.3

These are the release notes for gptme version v0.10.3.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.10.2:


## 📦 gptme

### ✨ Features (2)

 - feat: ask for API key on first run, and save to config ([`bd48a565`](https://github.com/gptme/gptme/commit/bd48a565))
 - feat: added early interrupt of generation for completed patches ([`6f4b88b7`](https://github.com/gptme/gptme/commit/6f4b88b7))

### 🐛 Fixes (2)

 - fix: added typing-extensions to allow use of Self ([`20f97c74`](https://github.com/gptme/gptme/commit/20f97c74))
 - fix: don't persist quiet property to logfile ([`909e37ff`](https://github.com/gptme/gptme/commit/909e37ff))

### 🔨 Misc (4)

 - docs: added getting started guide ([`d085d07f`](https://github.com/gptme/gptme/commit/d085d07f))
 - refactor: refactored msg_to_toml and toml_to_message into Message methods ([`11b711fd`](https://github.com/gptme/gptme/commit/11b711fd))
 - docs: switched to sphinx-book-theme, minor improvements to docs ([`c237ddec`](https://github.com/gptme/gptme/commit/c237ddec))
 - scripts: added build_changelog.sh script ([`68b592b2`](https://github.com/gptme/gptme/commit/68b592b2))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.10.2...v0.10.3


# v0.10.2

These are the release notes for gptme version v0.10.2.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.10.1:


## 📦 gptme

### ✨ Features (1)

 - feat: added support for fetching URLs in initial prompt ([`c580e82d`](https://github.com/gptme/gptme/commit/c580e82d))

### 🐛 Fixes (1)

 - fix: propagate error as message if patch fails ([`a47407f0`](https://github.com/gptme/gptme/commit/a47407f0))

### 🔨 Misc (1)

 - style: applied `pyupgrade --py310-plus` ([`dfd5a1aa`](https://github.com/gptme/gptme/commit/dfd5a1aa))

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.10.1...v0.10.2))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.10.1...v0.10.2


# v0.10.1

These are the release notes for gptme version v0.10.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.10.0:


## 📦 gptme

### 🐛 Fixes (6)

 - fix: added some comments, and strip.sh ([`d2f65d21`](https://github.com/gptme/gptme/commit/d2f65d21))
 - fix: added pragma no cover to gptme-server entrypoint ([`c8fbb1e7`](https://github.com/gptme/gptme/commit/c8fbb1e7))
 - fix: major improvements to reduce tool: added tests, added truncate codeblocks, disabled summarize in reduce_log ([`bb5f9dab`](https://github.com/gptme/gptme/commit/bb5f9dab))
 - fix: fixed don't show 'test-server-...' in convo picker ([`656e8d38`](https://github.com/gptme/gptme/commit/656e8d38))
 - fix: fixed error when /dev/tty cannot be opened (such as in CI) ([`aaf5d9eb`](https://github.com/gptme/gptme/commit/aaf5d9eb))
 - fix(tools): set GIT_PAGER=cat on shell init ([`a9257984`](https://github.com/gptme/gptme/commit/a9257984))

### 🔨 Misc (18)
<details><summary>Click to expand</summary>
<p>

 - test: fixed coverage for playwright tests ([`38183d1b`](https://github.com/gptme/gptme/commit/38183d1b))
 - test: added test for /rename ([`12d922f4`](https://github.com/gptme/gptme/commit/12d922f4))
 - test: set `--log-level INFO` in `make test`, add logging to browser tool ([`c24b18d6`](https://github.com/gptme/gptme/commit/c24b18d6))
 - test: added tests and fixes to browser tool ([`e94f7f64`](https://github.com/gptme/gptme/commit/e94f7f64))
 - test: added pragma nocover to interactive lines, added cli test for context via stdin and --version ([`2ee73af0`](https://github.com/gptme/gptme/commit/2ee73af0))
 - test: added test for patch ([`328fa16d`](https://github.com/gptme/gptme/commit/328fa16d))
 - test: improved testing for utils, removed unused functions ([`b7b57b89`](https://github.com/gptme/gptme/commit/b7b57b89))
 - test: improved test_fileblock and fixed --no-confirm for overwrite ([`cbc0ffec`](https://github.com/gptme/gptme/commit/cbc0ffec))
 - test: mark slow tests as slow, print 5 slowest tests on `make test` ([`6d580af3`](https://github.com/gptme/gptme/commit/6d580af3))
 - test: added test fileblock ([`df9c6a17`](https://github.com/gptme/gptme/commit/df9c6a17))
 - test: improved testing for server ([`e66d05b9`](https://github.com/gptme/gptme/commit/e66d05b9))
 - test: improved command testing, fixed prompt parsing when passed command with path ([`ef6b472f`](https://github.com/gptme/gptme/commit/ef6b472f))
 - test: refactored commands and improved testing ([`50c028db`](https://github.com/gptme/gptme/commit/50c028db))
 - refactor: refactored prompts and get_codeblock ([`d0a22453`](https://github.com/gptme/gptme/commit/d0a22453))
 - docs: more wip stuff on finetuning doc ([`32df0155`](https://github.com/gptme/gptme/commit/32df0155))
 - test: fix blinking test ([`dad5a255`](https://github.com/gptme/gptme/commit/dad5a255))
 - docs: added logo to README ([`6d3aa92d`](https://github.com/gptme/gptme/commit/6d3aa92d))
 - chore: added logo ([`4879d652`](https://github.com/gptme/gptme/commit/4879d652))

</p>
</details>

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.10.0...v0.10.1


# v0.10.0

These are the release notes for gptme version v0.10.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.9.4:


## 📦 gptme

### 🐛 Fixes (3)

 - fix: handle non-terminating ``` in LLM output better ([`509b6a47`](https://github.com/gptme/gptme/commit/509b6a47))
 - fix: include files mentioned within prompt (fixes [#25](https://github.com/gptme/gptme/issues/25)) ([`441add66`](https://github.com/gptme/gptme/commit/441add66))
 - fix: fixed auto-continue in non-interactive mode after codeblock execution ([`0601def2`](https://github.com/gptme/gptme/commit/0601def2))

### 🔨 Misc (3)

 - docs: mention GitHub bot and WIP tree-based convos ([`2fdea105`](https://github.com/gptme/gptme/commit/2fdea105))
 - docs: added WIP docs about finetuning, improved collect.py script ([`eb42f186`](https://github.com/gptme/gptme/commit/eb42f186))
 - docs: improved README ([`f59d4ac7`](https://github.com/gptme/gptme/commit/f59d4ac7))

*(excluded 14 less relevant [commits](https://github.com/gptme/gptme/compare/v0.9.4...v0.10.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.9.4...v0.10.0


# v0.9.4

These are the release notes for gptme version v0.9.4.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.9.3:


## 📦 gptme

### 🐛 Fixes (4)

 - fix: include instructions for append in system prompt ([`50b00a00`](https://github.com/gptme/gptme/commit/50b00a00))
 - fix: removed /continue and /load commands ([`9ba41f54`](https://github.com/gptme/gptme/commit/9ba41f54))
 - fix: fixed ctags test ([`fa7d4092`](https://github.com/gptme/gptme/commit/fa7d4092))
 - fix: improved tabcomplete and added tests ([`e8aa4a96`](https://github.com/gptme/gptme/commit/e8aa4a96))

### 🔨 Misc (4)

 - docs: added docs badge ([`fae03209`](https://github.com/gptme/gptme/commit/fae03209))
 - refactor: extracted server stuff to seperate script `gptme-server` ([`e871a2ce`](https://github.com/gptme/gptme/commit/e871a2ce))
 - test: fixed tabcomplete test in ci ([`9ac4fa00`](https://github.com/gptme/gptme/commit/9ac4fa00))
 - docs: fixed !NOTE ([`86167180`](https://github.com/gptme/gptme/commit/86167180))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.9.3...v0.9.4


# v0.9.3

These are the release notes for gptme version v0.9.3.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.9.2:


## 📦 gptme

### ✨ Features (2)

 - feat: added append tool, fixed patch tool ([`0b698c3e`](https://github.com/gptme/gptme/commit/0b698c3e))
 - feat: added wip finetuning script train/collect.py to collect conversations for use in training ([`2b2476df`](https://github.com/gptme/gptme/commit/2b2476df))

### 🐛 Fixes (1)

 - fix: hide test conversations when selecting a conversation ([`f86c1d21`](https://github.com/gptme/gptme/commit/f86c1d21))

### 🔨 Misc (6)

 - docs: updated the local models doc ([`b658aa9d`](https://github.com/gptme/gptme/commit/b658aa9d))
 - docs: added cli and api docs, improved docstrings ([`de1e94f0`](https://github.com/gptme/gptme/commit/de1e94f0))
 - test: fixed context tool test if ctags missing, install ctags in CI ([`c8c0ec90`](https://github.com/gptme/gptme/commit/c8c0ec90))
 - test: added basic tests for server ([`7f1b3d70`](https://github.com/gptme/gptme/commit/7f1b3d70))
 - docs: added codecov badge ([`a035a321`](https://github.com/gptme/gptme/commit/a035a321))
 - test: wrote tests for context tool ([`d7f0e349`](https://github.com/gptme/gptme/commit/d7f0e349))

*(excluded 6 less relevant [commits](https://github.com/gptme/gptme/compare/v0.9.2...v0.9.3))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.9.2...v0.9.3


# v0.9.2

These are the release notes for gptme version v0.9.2.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.9.1:


## 📦 gptme

### ✨ Features (1)

 - feat: include context about included programs and packages ([`9ccb0a3b`](https://github.com/gptme/gptme/commit/9ccb0a3b))

### 🐛 Fixes (4)

 - fix: fixed ROLE_COLOR for assistant, darker red background for confirm prompt ([`a7e866b9`](https://github.com/gptme/gptme/commit/a7e866b9))
 - fix: minor improvement to load command, added mandelbrot video test to integration test examples ([`f26469cf`](https://github.com/gptme/gptme/commit/f26469cf))
 - fix: fixed bug in codeblock handling, use gpt-3.5-turbo in tests, improved testing ([`99eda23c`](https://github.com/gptme/gptme/commit/99eda23c))
 - fix: made verbose tabcomplete init prints into debug logs ([`84e68c6f`](https://github.com/gptme/gptme/commit/84e68c6f))

### 🔨 Misc (2)

 - test: added test for is_supported_codeblock ([`c1ba742c`](https://github.com/gptme/gptme/commit/c1ba742c))
 - chore: updated pyproject version to 0.9.1.dev0 ([`264b6098`](https://github.com/gptme/gptme/commit/264b6098))

*(excluded 3 less relevant [commits](https://github.com/gptme/gptme/compare/v0.9.1...v0.9.2))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.9.1...v0.9.2


# v0.9.1

These are the release notes for gptme version v0.9.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.9.0:


## 📦 gptme

### 🐛 Fixes (2)

 - fix: fixed passing non-text files on cli, fixed recursive import, fixed len() call which should be len_tokens(), only stop generation on executable/supported codeblocks ([`0aebbffd`](https://github.com/gptme/gptme/commit/0aebbffd))
 - fix: fixed support for local models (specifically through litellm proxy) ([`a0460047`](https://github.com/gptme/gptme/commit/a0460047))

### 🔨 Misc (1)

 - docs: updated local-models doc with better instructions ([`23644af2`](https://github.com/gptme/gptme/commit/23644af2))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.9.0...v0.9.1


# v0.9.0

These are the release notes for gptme version v0.9.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.8.1:


## 📦 gptme

### ✨ Features (2)

 - feat: added automatic naming of conversations ([`46320507`](https://github.com/gptme/gptme/commit/46320507))
 - feat: added patch tool, added more integration test examples ([`2c2a6c0d`](https://github.com/gptme/gptme/commit/2c2a6c0d))

### 🐛 Fixes (5)

 - fix: fixed bug where assistant replied before user prompt ([`4e78303b`](https://github.com/gptme/gptme/commit/4e78303b))
 - fix: respect whitespace in shell output ([`7f5c01a1`](https://github.com/gptme/gptme/commit/7f5c01a1))
 - fix: improved --help output ([`3e6d4fb0`](https://github.com/gptme/gptme/commit/3e6d4fb0))
 - fix: improved /help output ([`16dd27bd`](https://github.com/gptme/gptme/commit/16dd27bd))
 - fix: improved input prompt for ask_execute ([`b68d7d47`](https://github.com/gptme/gptme/commit/b68d7d47))

### 🔨 Misc (6)

 - docs: added placeholder content to index ([`87a26d1b`](https://github.com/gptme/gptme/commit/87a26d1b))
 - docs: added first docs page (moved from README), and markdown support ([`32b86b3e`](https://github.com/gptme/gptme/commit/32b86b3e))
 - docs: init ./docs with sphinx-quickstart ([`36792fcd`](https://github.com/gptme/gptme/commit/36792fcd))
 - docs: improved README and CONTRIBUTING ([`b21870ab`](https://github.com/gptme/gptme/commit/b21870ab))
 - test: moved stray tests into tests dir ([`6c9e7fc2`](https://github.com/gptme/gptme/commit/6c9e7fc2))
 - test: added a new integration-test case ([`a48bc205`](https://github.com/gptme/gptme/commit/a48bc205))

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.8.1...v0.9.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.8.1...v0.9.0


# v0.8.1

These are the release notes for gptme version v0.8.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.8.0:


## 📦 gptme

### ✨ Features (3)

 - feat: auto-continue/recover after code execution/system messages ([`c23a5ce8`](https://github.com/gptme/gptme/commit/c23a5ce8))
 - feat(wip): added wip ctags stuff to build project context ([`8b2342a1`](https://github.com/gptme/gptme/commit/8b2342a1))
 - feat: added ability to create new conversations in web UI, better error output, capture command output, fixed fork, fixed logpath handling ([`3e88e76a`](https://github.com/gptme/gptme/commit/3e88e76a))

### 🐛 Fixes (1)

 - fix: minor misc command fixes, improved integration tests ([`f77a34a0`](https://github.com/gptme/gptme/commit/f77a34a0))

### 🔨 Misc (2)

 - docs: fixed broken link ([`9bd452bb`](https://github.com/gptme/gptme/commit/9bd452bb))
 - docs: added release instructions to CONTRIBUTING ([`a359510a`](https://github.com/gptme/gptme/commit/a359510a))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.8.0...v0.8.1


# v0.8.0

These are the release notes for gptme version v0.8.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.7.0:


## 📦 gptme

### ✨ Features (4)

 - feat: improved web UI responsiveness, added checkbox to toggle hiding initial system messages ([`a01c442f`](https://github.com/gptme/gptme/commit/a01c442f))
 - feat: added ability to send messages and generate replies in web UI, refactored commands ([`4e9ff475`](https://github.com/gptme/gptme/commit/4e9ff475))
 - feat: added wip web UI for conversations ([`19567d41`](https://github.com/gptme/gptme/commit/19567d41))
 - feat: added rename and fork commands, refactor commands and tabcomplete ([`6eb763c6`](https://github.com/gptme/gptme/commit/6eb763c6))

### 🐛 Fixes (7)
<details><summary>Click to expand</summary>
<p>

 - fix: show convo metadata in web UI, remember conversation on page reload using window.location.hash ([`b2adcc62`](https://github.com/gptme/gptme/commit/b2adcc62))
 - fix: save timestamps in logs, show correct 'created' timestamp in web UI, improvements to web UI ([`8dd938c6`](https://github.com/gptme/gptme/commit/8dd938c6))
 - fix: fixed root route handler ([`b5042800`](https://github.com/gptme/gptme/commit/b5042800))
 - fix: fix invalid writing of None to config ([`d4d0c820`](https://github.com/gptme/gptme/commit/d4d0c820))
 - fix: check for common datascience packages, added them as optional deps, warn if not available ([`9fcaab23`](https://github.com/gptme/gptme/commit/9fcaab23))
 - fix: attempt at fixing test caused by tabcomplete ([`b02804b1`](https://github.com/gptme/gptme/commit/b02804b1))
 - fix: refactor summarize, added /save command ([`a78cc91c`](https://github.com/gptme/gptme/commit/a78cc91c))

</p>
</details>

### 🔨 Misc (1)

 - docs: document server/web UI usage ([`b3053b24`](https://github.com/gptme/gptme/commit/b3053b24))

*(excluded 3 less relevant [commits](https://github.com/gptme/gptme/compare/v0.7.0...v0.8.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.7.0...v0.8.0


# v0.7.0

These are the release notes for gptme version v0.7.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.6.1:


## 📦 gptme

### ✨ Features (1)

 - feat: changed command prefix from `.` to `/`, added tab completion, fixed bugs ([`e26fc64b`](https://github.com/gptme/gptme/commit/e26fc64b))

### 🐛 Fixes (1)

 - fix: removed dependency on joblib (in favor of lru_cache) and toml (in favor of tomlkit), marked optionals properly in pyproject ([`43a6d2e5`](https://github.com/gptme/gptme/commit/43a6d2e5))

### 🔨 Misc (1)

 - chore: release v0.7.0 ([`05f74ad8`](https://github.com/gptme/gptme/commit/05f74ad8))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.6.1...v0.7.0


# v0.6.1

These are the release notes for gptme version v0.6.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.6.0:


## 📦 gptme

### ✨ Features (1)

 - feat: added --version option to CLI ([`edb19820`](https://github.com/gptme/gptme/commit/edb19820))

### 🐛 Fixes (2)

 - fix: improved main loop logic, squashed bugs ([`fbd55ffe`](https://github.com/gptme/gptme/commit/fbd55ffe))
 - fix: fixed error when no OPENAI_API_KEY set ([`9b8f4e10`](https://github.com/gptme/gptme/commit/9b8f4e10))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.6.0...v0.6.1


# v0.6.0

These are the release notes for gptme version v0.6.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.5.0:


## 📦 gptme

### ✨ Features (1)

 - feat: added flag `--(non-)interactive`, refactored main loop ([`3122f460`](https://github.com/gptme/gptme/commit/3122f460))

### 🐛 Fixes (1)

 - fix: further improvements to main loop ([`827adcc5`](https://github.com/gptme/gptme/commit/827adcc5))

### 🔨 Misc (1)

 - chore: release v0.6.0 ([`a025c1c3`](https://github.com/gptme/gptme/commit/a025c1c3))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.5.0...v0.6.0


# v0.5.0

These are the release notes for gptme version v0.5.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.4.2:


## 📦 gptme

### ✨ Features (3)

 - feat: added .edit command to edit conversation in $EDITOR ([`b39fd1b5`](https://github.com/gptme/gptme/commit/b39fd1b5))
 - feat: added 'file blocks' for better saving, better prompt, fixed reduce bug ([`dc7e3152`](https://github.com/gptme/gptme/commit/dc7e3152))
 - feat: added browser tool, misc refactoring ([`1fc1f3e1`](https://github.com/gptme/gptme/commit/1fc1f3e1))

### 🐛 Fixes (1)

 - fix: started describe_api.py, added ability to pipe in files as system prompt ([`26612e43`](https://github.com/gptme/gptme/commit/26612e43))

### 🔨 Misc (5)

 - chore: release v0.5.0 ([`c670d352`](https://github.com/gptme/gptme/commit/c670d352))
 - docs(README): added mention of ability to pipe in context ([`6551f858`](https://github.com/gptme/gptme/commit/6551f858))
 - refactor: minor refactor ([`34bed1d4`](https://github.com/gptme/gptme/commit/34bed1d4))
 - refactor: misc refactoring, improved '.continue' behavior with undo ([`2863a7ff`](https://github.com/gptme/gptme/commit/2863a7ff))
 - test: mark browser tests as slow ([`4ec79c96`](https://github.com/gptme/gptme/commit/4ec79c96))

*(excluded 4 less relevant [commits](https://github.com/gptme/gptme/compare/v0.4.2...v0.5.0))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.4.2...v0.5.0


# v0.4.2

These are the release notes for gptme version v0.4.2.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.4.1:


## 📦 gptme

### ✨ Features (2)

 - feat: implemented .continue and .summarize ([`a7d3d345`](https://github.com/gptme/gptme/commit/a7d3d345))
 - feat: added support for multiple prompts args, that are run in sequence ([`6090443f`](https://github.com/gptme/gptme/commit/6090443f))

### 🔨 Misc (3)

 - chore: release v0.4.2 ([`48e53703`](https://github.com/gptme/gptme/commit/48e53703))
 - docs: minor additions ([`2de28ffb`](https://github.com/gptme/gptme/commit/2de28ffb))
 - chore: release v0.4.1 ([`a6cec3e8`](https://github.com/gptme/gptme/commit/a6cec3e8))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.4.1...v0.4.2


# v0.4.1

These are the release notes for gptme version v0.4.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.4.0:


## 📦 gptme

### ✨ Features (1)

 - feat: added config support for 'custom instructions', for both the user and projects, more prompting improvements ([`b75c7906`](https://github.com/gptme/gptme/commit/b75c7906))

### 🐛 Fixes (1)

 - fix: prompt improvement to avoid overly eager shell file-writing ([`250def1d`](https://github.com/gptme/gptme/commit/250def1d))

### 🔨 Misc (2)

 - refactor: renamed test_gptme.py to test_cli.py ([`79e5a565`](https://github.com/gptme/gptme/commit/79e5a565))
 - chore: release v0.4.0 ([`616a4689`](https://github.com/gptme/gptme/commit/616a4689))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.4.0...v0.4.1


# v0.4.0

These are the release notes for gptme version v0.4.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.3.3:


## 📦 gptme

### ✨ Features (2)

 - feat: added impersonate command ([`ccb25cf6`](https://github.com/gptme/gptme/commit/ccb25cf6))
 - feat: lots and lots of changes ([`0e3a7c5b`](https://github.com/gptme/gptme/commit/0e3a7c5b))

### 🐛 Fixes (11)
<details><summary>Click to expand</summary>
<p>

 - fix: improved codeblock formatting in tools ([`599cb141`](https://github.com/gptme/gptme/commit/599cb141))
 - fix: fixed code block output ([`da1da3b4`](https://github.com/gptme/gptme/commit/da1da3b4))
 - fix: fixed bug where shell didn't output newlines ([`e6004a5f`](https://github.com/gptme/gptme/commit/e6004a5f))
 - fix: fixed type error ([`07da76ae`](https://github.com/gptme/gptme/commit/07da76ae))
 - fix: improved path constants ([`02f63384`](https://github.com/gptme/gptme/commit/02f63384))
 - fix: fixed bug on ask ([`7605ce97`](https://github.com/gptme/gptme/commit/7605ce97))
 - fix: readline setup fixes ([`e4009987`](https://github.com/gptme/gptme/commit/e4009987))
 - fix: fixed bug where browsing readline history would clear the prompt ([`3bf2f831`](https://github.com/gptme/gptme/commit/3bf2f831))
 - fix: set max_tokens if not using OpenAI ([`8b559236`](https://github.com/gptme/gptme/commit/8b559236))
 - fix: moved context message to second-to-last place in msg log ([`9017f7eb`](https://github.com/gptme/gptme/commit/9017f7eb))
 - fix: fixed context message ([`946d88ed`](https://github.com/gptme/gptme/commit/946d88ed))

</p>
</details>

### 🔨 Misc (8)
<details><summary>Click to expand</summary>
<p>

 - test: improved testing for output formatting ([`a9a659cc`](https://github.com/gptme/gptme/commit/a9a659cc))
 - docs: improved README with emojis and more ([`4bc1ede1`](https://github.com/gptme/gptme/commit/4bc1ede1))
 - refactor: moved/renamed logmanager.print_log to messages.print_msg ([`50545dda`](https://github.com/gptme/gptme/commit/50545dda))
 - test: added test for shell multiline output ([`4f8407e0`](https://github.com/gptme/gptme/commit/4f8407e0))
 - test: added profiling ([`8a32552b`](https://github.com/gptme/gptme/commit/8a32552b))
 - docs: improved instructions for how to run models locally ([`3c347901`](https://github.com/gptme/gptme/commit/3c347901))
 - chore: updated .gitignore ([`b5457edb`](https://github.com/gptme/gptme/commit/b5457edb))
 - docs: moved download badges to top ([`0a4a2668`](https://github.com/gptme/gptme/commit/0a4a2668))

</p>
</details>

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.3.3...v0.4.0


# v0.3.3

These are the release notes for gptme version v0.3.3.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.3.2:


## 📦 gptme

### 🐛 Fixes (1)

 - fix: fixed bug in shell tool ([`a8e6a028`](https://github.com/gptme/gptme/commit/a8e6a028))

### 🔨 Misc (1)

 - chore: release v0.3.3 ([`cc69a483`](https://github.com/gptme/gptme/commit/cc69a483))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.3.2...v0.3.3


# v0.3.2

These are the release notes for gptme version v0.3.2.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.3.1:


## 📦 gptme

### 🐛 Fixes (1)

 - fix: minor fixes to shell tool ([`a13fb942`](https://github.com/gptme/gptme/commit/a13fb942))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.3.1...v0.3.2


# v0.3.1

These are the release notes for gptme version v0.3.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.3.0:


## 📦 gptme

### 🐛 Fixes (1)

 - fix: check if gh installed before adding to prompt ([`7cfa25f5`](https://github.com/gptme/gptme/commit/7cfa25f5))

### 🔨 Misc (5)

 - chore: release v0.3.1 ([`012657e1`](https://github.com/gptme/gptme/commit/012657e1))
 - docs: add PyPi version badge ([`c1ac2133`](https://github.com/gptme/gptme/commit/c1ac2133))
 - docs: added stats and links, updated usage ([`e7a0ca60`](https://github.com/gptme/gptme/commit/e7a0ca60))
 - chore: added LICENSE ([`4e7dc71c`](https://github.com/gptme/gptme/commit/4e7dc71c))
 - chore: updated gitignore ([`ee8da7c9`](https://github.com/gptme/gptme/commit/ee8da7c9))

*(excluded 2 less relevant [commits](https://github.com/gptme/gptme/compare/v0.3.0...v0.3.1))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.3.0...v0.3.1


# v0.3.0

These are the release notes for gptme version v0.3.0.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.2.2:


## 📦 gptme

### ✨ Features (2)

 - feat: added config, refactoring, hide initial system messages, better context awareness ([`9b54cec0`](https://github.com/gptme/gptme/commit/9b54cec0))
 - feat: make OpenAI model configurable ([#4](https://github.com/gptme/gptme/issues/4)) ([`3f8f2383`](https://github.com/gptme/gptme/commit/3f8f2383))

### 🐛 Fixes (1)

 - fix: better error if OPENAI_API_KEY not set ([`93ce1c44`](https://github.com/gptme/gptme/commit/93ce1c44))

### 🔨 Misc (5)

 - chore: release v0.3.0 ([`26f3e915`](https://github.com/gptme/gptme/commit/26f3e915))
 - docs: added 'Shell Copilot' usecase ([`6797ca64`](https://github.com/gptme/gptme/commit/6797ca64))
 - docs: added note about Python 3.10+ ([`52934f8e`](https://github.com/gptme/gptme/commit/52934f8e))
 - docs: updated README ([`c8579538`](https://github.com/gptme/gptme/commit/c8579538))
 - docs: added mention of OPENAI_API_KEY ([`1641a70e`](https://github.com/gptme/gptme/commit/1641a70e))

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.2.2...v0.3.0


# v0.2.2

These are the release notes for gptme version v0.2.2.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.2.1:


## 📦 gptme

### 🐛 Fixes (1)

 - fix: minor fixes ([`b173fb86`](https://github.com/gptme/gptme/commit/b173fb86))

### 🔨 Misc (7)
<details><summary>Click to expand</summary>
<p>

 - chore: release v0.2.2 ([`eb8c8f7f`](https://github.com/gptme/gptme/commit/eb8c8f7f))
 - docs: improved README, added usecases ([`7309be2b`](https://github.com/gptme/gptme/commit/7309be2b))
 - docs: added demo gif ([`12cece93`](https://github.com/gptme/gptme/commit/12cece93))
 - docs: added screencast demo ([`46347d3f`](https://github.com/gptme/gptme/commit/46347d3f))
 - chore: cleaned up old files ([`1d04c311`](https://github.com/gptme/gptme/commit/1d04c311))
 - docs: added instructions for installing with pip ([`a3fd368c`](https://github.com/gptme/gptme/commit/a3fd368c))
 - chore: renamed python package due to pypi complaining about name similarity ([`45b933c2`](https://github.com/gptme/gptme/commit/45b933c2))

</p>
</details>

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.2.1...v0.2.2


# v0.2.1

These are the release notes for gptme version v0.2.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since v0.1.1:


## 📦 gptme

### ✨ Features (2)

 - feat: added persistent shell session ([`ac68470d`](https://github.com/gptme/gptme/commit/ac68470d))
 - feat: many major improvements, changed repo name to gptme ([`c6af7f63`](https://github.com/gptme/gptme/commit/c6af7f63))

### 🐛 Fixes (5)

 - fix: fixed type errors ([`627a278f`](https://github.com/gptme/gptme/commit/627a278f))
 - fix: fixed missing dir ([`ce57b1ab`](https://github.com/gptme/gptme/commit/ce57b1ab))
 - fix: fixed tests and some broken behavior ([`6175d050`](https://github.com/gptme/gptme/commit/6175d050))
 - fix: added file and tests I forgot to add in `e787ff8` ([`ad616de5`](https://github.com/gptme/gptme/commit/ad616de5))
 - fix: added .replay, fixed printing Python exceptions, improved docstring ([`78bdffeb`](https://github.com/gptme/gptme/commit/78bdffeb))

### 🔨 Misc (3)

 - chore: release v0.2.1 ([`39e85ceb`](https://github.com/gptme/gptme/commit/39e85ceb))
 - docs: updated README with new usage and clearer instructions ([`2d034692`](https://github.com/gptme/gptme/commit/2d034692))
 - docs: updated README with TODO demo section ([`4f08ca5b`](https://github.com/gptme/gptme/commit/4f08ca5b))

*(excluded 6 less relevant [commits](https://github.com/gptme/gptme/compare/v0.1.1...v0.2.1))*

**Full Changelog**: https://github.com/gptme/gptme/compare/v0.1.1...v0.2.1


# v0.1.1

These are the release notes for gptme version v0.1.1.

## Contributors

Thanks to everyone who contributed to this release:

@erikbjare

## Changelog

Changes since initial commit (d00e9aae68cbd6b89bbc474ed7721d08798f96dc):


## 📦 gptme

### ✨ Features (2)

 - feat: many changes, now supports local inference via llama_cpp.server, some refactoring, improved README ([`86103ca8`](https://github.com/gptme/gptme/commit/86103ca8))
 - feat: added gpt_todoer and 'society' gpt interface ([`d24c4d21`](https://github.com/gptme/gptme/commit/d24c4d21))

### 🐛 Fixes (5)

 - fix: misc changes, added summarize_project script, added python-dotenv ([`00f1d217`](https://github.com/gptme/gptme/commit/00f1d217))
 - fix: fixed bug introduced in refactor ([`06d21e66`](https://github.com/gptme/gptme/commit/06d21e66))
 - fix: misc fixes and refactor ([`85972a75`](https://github.com/gptme/gptme/commit/85972a75))
 - fix: more progress, added gptme script ([`7bd1edaf`](https://github.com/gptme/gptme/commit/7bd1edaf))
 - fix: many misc improvements to the chat interface ([`3dfb8426`](https://github.com/gptme/gptme/commit/3dfb8426))

### 🔨 Misc (5)

 - chore: release v0.1.1 ([`ea6b88d7`](https://github.com/gptme/gptme/commit/ea6b88d7))
 - docs(README): added a bit about gptme ([`f60cfd01`](https://github.com/gptme/gptme/commit/f60cfd01))
 - refactor: refactored gptme script into several files in new gptme module ([`5003ab1b`](https://github.com/gptme/gptme/commit/5003ab1b))
 - docs: added TODOs and badge to README ([`85e1d956`](https://github.com/gptme/gptme/commit/85e1d956))
 - test: added empty tests for ci to pass ([`ae089772`](https://github.com/gptme/gptme/commit/ae089772))

*(excluded 3 less relevant [commits](https://github.com/gptme/gptme/compare/d00e9aae68cbd6b89bbc474ed7721d08798f96dc...v0.1.1))*

**Full Changelog**: https://github.com/gptme/gptme/compare/d00e9aae68cbd6b89bbc474ed7721d08798f96dc...v0.1.1


.. rubric:: Example: Daily Activity Summary

Here's an example of how to use gptme to generate a daily summary based on ActivityWatch data using a shell script:

.. code-block:: bash

   #!/bin/bash

   # Function to get yesterday's date in YYYY-MM-DD format
   get_yesterday() {
       date -d "yesterday" +%Y-%m-%d
   }

   # Function to get ActivityWatch report
   get_aw_report() {
       local date=$1
       aw-client report $(hostname) --start $date --stop $(date -d "$date + 1 day" +%Y-%m-%d)
   }

   # Generate daily summary
   generate_daily_summary() {
       local yesterday=$(get_yesterday)
       local aw_report=$(get_aw_report $yesterday)

       # Create a temporary file
       local summary_file=$(mktemp)

       # Generate summary using gptme
       gptme --non-interactive "Based on the following ActivityWatch report for $yesterday, provide a concise summary of yesterday's activities.
       Include insights on productivity, time spent on different categories, and any notable patterns.
       Suggest areas for improvement if applicable.

       ActivityWatch Report:
       $aw_report

       Please format the summary in a clear, easy-to-read structure.
       Save the summary to this file: $summary_file"

       # Return the path to the summary file
       echo "$summary_file"
   }

   # Run the summary generation and get the file path
   summary_file=$(generate_daily_summary)

   # Output the file path (you can use this in other scripts or log it)
   echo "Daily summary saved to: $summary_file"

To automate this process to run every day at 8 AM, you could set up a cron job. Here's an example cron entry:

.. code-block:: bash

   0 8 * * * /path/to/daily_summary_script.sh

This automation will provide you with daily insights into your computer usage and productivity patterns from the previous day, leveraging the power of gptme to analyze and summarize the data collected by ActivityWatch.


.. rubric:: Example: Automated Code Review

This example demonstrates a simple and composable approach to automated code review using gptme and shell scripting.

1. Create a script called `review_pr.sh`:

   .. code-block:: bash

      #!/bin/bash
      # Usage: ./review_pr.sh <repo> <pr_number>

      repo=$1
      pr_number=$2

      # Fetch PR diff
      diff=$(gh pr view $pr_number --repo $repo --json diffUrl -q .diffUrl | xargs curl -s)

      # Generate review using gptme
      review=$(gptme --non-interactive "Review this pull request diff and provide constructive feedback:
      1. Identify potential bugs or issues.
      2. Suggest improvements for code quality and readability.
      3. Check for adherence to best practices.
      4. Highlight any security concerns.

      Pull Request Diff:
      $diff

      Format your review as a markdown list with clear, concise points.")

      # Post review comment
      gh pr comment $pr_number --repo $repo --body "## Automated Code Review

      $review

      *This review was generated automatically by gptme.*"

2. Make the script executable:

   .. code-block:: bash

      chmod +x review_pr.sh

3. Set up a GitHub Actions workflow (`.github/workflows/code_review.yml`):

   .. code-block:: yaml

      name: Automated Code Review
      on:
        pull_request:
          types: [opened, synchronize]

      jobs:
        review:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v2
            - name: Install gptme and GitHub CLI
              run: |
                pip install gptme
                gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
            - name: Run code review
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                ./review_pr.sh ${{ github.repository }} ${{ github.event.pull_request.number }}

This setup provides automated code reviews for your pull requests using gptme. It demonstrates how powerful automation can be achieved with minimal code and high composability.

Key points:

- Uses shell scripting for simplicity and ease of understanding
- Leverages gptme's non-interactive mode for automation
- Utilizes GitHub CLI (`gh`) for seamless GitHub integration
- Integrates with GitHub Actions for automated workflow

Benefits of this approach:

- Easily customizable: Adjust the gptme prompt to focus on specific aspects of code review
- Composable: The shell script can be extended or combined with other tools
- Minimal dependencies: Relies on widely available tools (bash, curl, gh)
- Quick setup: Can be implemented in any GitHub repository with minimal configuration

To customize this for your specific needs:

1. Modify the gptme prompt in `review_pr.sh` to focus on your project's coding standards
2. Add additional checks or integrations to the shell script as needed
3. Adjust the GitHub Actions workflow to fit your CI/CD pipeline

This example serves as a starting point for integrating gptme into your development workflow, demonstrating its potential for automating code review tasks.


.. warning::

   The computer use interface is experimental and has serious security implications.
   Please use with caution and see Anthropic's documentation on `computer use <https://docs.anthropic.com/en/docs/build-with-claude/computer-use>`_ for additional guidance.

